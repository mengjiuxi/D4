
Touch_Screen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00003a02  00003ab6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a02  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  0080013a  0080013a  00003af0  2**0
                  ALLOC
  3 .eeprom       0000001d  00810000  00810000  00003af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00007884  00000000  00000000  00003b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000626c  00000000  00000000  0000b394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  00011600  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__ctors_end>
       4:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
       8:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
       c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      10:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_4>
      14:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      18:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      1c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      20:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      24:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      28:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      2c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      30:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      34:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      38:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      3c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      40:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      44:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      48:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      4c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      50:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      54:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      58:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      5c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      60:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__vector_24>
      64:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      68:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      6c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      70:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      74:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      78:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>

0000007c <ascii>:
      7c:	02 00 00 00 00 00 00 01 22 20 20 20 00 00 20 01     ........"   .. .
      8c:	52 50 50 00 00 00 00 01 52 50 f8 50 f8 50 50 01     RPP.....RP.P.PP.
      9c:	22 78 a0 70 28 f0 20 01 c2 c8 10 20 40 98 18 01     "x.p(. .... @...
      ac:	62 90 a0 40 a8 90 68 01 62 20 40 00 00 00 00 01     b..@..h.b @.....
      bc:	12 20 40 40 40 20 10 01 42 20 10 10 10 20 40 01     . @@@ ..B ... @.
      cc:	02 20 a8 70 a8 20 00 01 02 20 20 f8 20 20 00 01     . .p. ...  .  ..
      dc:	02 00 00 00 00 60 20 41 02 00 00 f8 00 00 00 01     .....` A........
      ec:	02 00 00 00 00 60 60 01 02 08 10 20 40 80 00 01     .....``.... @...
      fc:	72 88 98 a8 c8 88 70 01 22 60 20 20 20 20 70 01     r.....p."`    p.
     10c:	72 88 08 10 20 40 f8 01 fa 10 20 10 08 88 70 01     r... @.... ...p.
     11c:	12 30 50 90 f8 10 10 01 fa 80 f0 08 08 88 70 01     .0P...........p.
     12c:	32 40 80 f0 88 88 70 01 fa 08 10 20 40 40 40 01     2@....p.... @@@.
     13c:	72 88 88 70 88 88 70 01 72 88 88 78 08 10 60 01     r..p..p.r..x..`.
     14c:	02 60 60 00 60 60 00 01 02 60 60 00 60 20 40 01     .``.``...``.` @.
     15c:	12 20 40 80 40 20 10 01 02 00 f8 00 f8 00 00 01     . @.@ ..........
     16c:	42 20 10 08 10 20 40 01 72 88 08 10 20 00 20 01     B ... @.r... . .
     17c:	72 88 08 68 a8 a8 70 01 72 88 88 88 f8 88 88 01     r..h..p.r.......
     18c:	f2 88 88 f0 88 88 f0 01 72 88 80 80 80 88 70 01     ........r.....p.
     19c:	e2 90 88 88 88 90 e0 01 fa 80 80 f0 80 80 f8 01     ................
     1ac:	fa 80 80 f0 80 80 80 01 72 88 80 b8 88 88 78 01     ........r.....x.
     1bc:	8a 88 88 f8 88 88 88 01 72 20 20 20 20 20 70 01     ........r     p.
     1cc:	3a 10 10 10 10 90 60 01 8a 90 a0 c0 a0 90 88 01     :.....`.........
     1dc:	82 80 80 80 80 80 f8 01 8a d8 a8 a8 88 88 88 01     ................
     1ec:	8a 88 c8 a8 98 88 88 01 72 88 88 88 88 88 70 01     ........r.....p.
     1fc:	f2 88 88 f0 80 80 80 01 72 88 88 88 a8 90 68 01     ........r.....h.
     20c:	f2 88 88 f0 a0 90 88 01 7a 80 80 70 08 08 f0 01     ........z..p....
     21c:	fa 20 20 20 20 20 20 01 8a 88 88 88 88 88 70 01     .      .......p.
     22c:	8a 88 88 88 88 50 20 01 8a 88 88 a8 a8 a8 50 01     .....P .......P.
     23c:	8a 88 50 20 50 88 88 01 8a 88 88 50 20 20 20 01     ..P P......P   .
     24c:	fa 08 10 20 40 80 f8 01 72 40 40 40 40 40 70 01     ... @...r@@@@@p.
     25c:	02 80 40 20 10 08 00 01 72 10 10 10 10 10 70 01     ..@ ....r.....p.
     26c:	22 50 88 00 00 00 00 01 02 00 00 00 00 00 f8 01     "P..............
     27c:	42 20 10 00 00 00 00 01 02 00 70 08 78 88 78 01     B ........p.x.x.
     28c:	82 80 b0 c8 88 88 f0 01 02 00 70 80 80 88 70 01     ..........p...p.
     29c:	0a 08 68 98 88 88 78 01 02 00 70 88 f8 80 70 01     ..h...x...p...p.
     2ac:	32 48 40 e0 40 40 40 01 02 78 88 88 78 08 70 01     2H@.@@@..x..x.p.
     2bc:	82 80 b0 c8 88 88 88 01 22 00 60 20 20 20 70 01     ........".`   p.
     2cc:	12 00 30 10 10 90 60 01 82 80 90 a0 c0 a0 90 01     ..0...`.........
     2dc:	62 20 20 20 20 20 70 01 02 00 d0 a8 a8 a8 a8 01     b     p.........
     2ec:	02 00 b0 c8 88 88 88 01 02 00 70 88 88 88 70 01     ..........p...p.
     2fc:	02 00 f0 88 f0 80 80 01 02 00 68 98 78 08 08 01     ..........h.x...
     30c:	02 00 b0 c8 80 80 80 01 02 00 70 80 70 08 f0 01     ..........p.p...
     31c:	42 40 e0 40 40 48 30 01 02 00 88 88 88 98 68 01     B@.@@H0.......h.
     32c:	02 00 88 88 88 50 20 01 02 00 88 88 a8 a8 50 01     .....P .......P.
     33c:	02 00 88 50 20 50 88 01 02 00 88 88 78 08 70 01     ...P P......x.p.
     34c:	02 00 f8 10 20 40 f8 01 12 20 20 40 20 20 10 01     .... @...  @  ..
     35c:	22 20 20 20 20 20 20 01 42 20 20 10 20 20 40 01     "      .B  .  @.
     36c:	02 00 68 90 00 00 00 01 02 00 00 00 00 00 00 01     ..h.............

0000037c <__ctors_start>:
     37c:	a4 16       	cp	r10, r20

0000037e <__ctors_end>:
     37e:	11 24       	eor	r1, r1
     380:	1f be       	out	0x3f, r1	; 63
     382:	cf ef       	ldi	r28, 0xFF	; 255
     384:	d0 e1       	ldi	r29, 0x10	; 16
     386:	de bf       	out	0x3e, r29	; 62
     388:	cd bf       	out	0x3d, r28	; 61

0000038a <__do_copy_data>:
     38a:	11 e0       	ldi	r17, 0x01	; 1
     38c:	a0 e0       	ldi	r26, 0x00	; 0
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	e2 e0       	ldi	r30, 0x02	; 2
     392:	fa e3       	ldi	r31, 0x3A	; 58
     394:	02 c0       	rjmp	.+4      	; 0x39a <__do_copy_data+0x10>
     396:	05 90       	lpm	r0, Z+
     398:	0d 92       	st	X+, r0
     39a:	aa 33       	cpi	r26, 0x3A	; 58
     39c:	b1 07       	cpc	r27, r17
     39e:	d9 f7       	brne	.-10     	; 0x396 <__do_copy_data+0xc>

000003a0 <__do_clear_bss>:
     3a0:	11 e0       	ldi	r17, 0x01	; 1
     3a2:	aa e3       	ldi	r26, 0x3A	; 58
     3a4:	b1 e0       	ldi	r27, 0x01	; 1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <.do_clear_bss_start>

000003a8 <.do_clear_bss_loop>:
     3a8:	1d 92       	st	X+, r1

000003aa <.do_clear_bss_start>:
     3aa:	a7 3c       	cpi	r26, 0xC7	; 199
     3ac:	b1 07       	cpc	r27, r17
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <.do_clear_bss_loop>

000003b0 <__do_global_ctors>:
     3b0:	13 e0       	ldi	r17, 0x03	; 3
     3b2:	ce e7       	ldi	r28, 0x7E	; 126
     3b4:	d3 e0       	ldi	r29, 0x03	; 3
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <__do_global_ctors+0x10>
     3b8:	22 97       	sbiw	r28, 0x02	; 2
     3ba:	fe 01       	movw	r30, r28
     3bc:	0e 94 3c 18 	call	0x3078	; 0x3078 <__tablejump__>
     3c0:	cc 37       	cpi	r28, 0x7C	; 124
     3c2:	d1 07       	cpc	r29, r17
     3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__do_global_ctors+0x8>
     3c6:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <main>
     3ca:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <_exit>

000003ce <__bad_interrupt>:
     3ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d2 <_Z4initv>:

tft_t tft;
rTouch touch(&tft);

void init(void)
{
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
	DDRB |= 0x80;			// LED
     3d6:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= 0x80;
     3d8:	2f 9a       	sbi	0x05, 7	; 5
	adc_init();
     3da:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <adc_init>
	adc_enable();
     3de:	ea e7       	ldi	r30, 0x7A	; 122
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	80 68       	ori	r24, 0x80	; 128
     3e6:	80 83       	st	Z, r24
	tft.init();
     3e8:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <_ZN7ili93414initEv>
	tft.setOrient(tft.Portrait);
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	8f e5       	ldi	r24, 0x5F	; 95
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN5tft_t9setOrientEh>
	inline uint16_t width(void) const {return d.w;}
	inline uint16_t height(void) const {return d.h;}
	inline void setZoom(const uint8_t zoom) {d.zoom = zoom;}
	inline uint8_t zoom(void) const {return d.zoom;}
	inline void setForeground(uint16_t c) {d.fgc = c;}
	inline void setBackground(uint16_t c) {d.bgc = c;}
     3f6:	cf e5       	ldi	r28, 0x5F	; 95
     3f8:	d1 e0       	ldi	r29, 0x01	; 1
     3fa:	1e 86       	std	Y+14, r1	; 0x0e
     3fc:	1d 86       	std	Y+13, r1	; 0x0d
	inline uint16_t y(void) const {return d.y;}
	inline uint16_t width(void) const {return d.w;}
	inline uint16_t height(void) const {return d.h;}
	inline void setZoom(const uint8_t zoom) {d.zoom = zoom;}
	inline uint8_t zoom(void) const {return d.zoom;}
	inline void setForeground(uint16_t c) {d.fgc = c;}
     3fe:	8f e7       	ldi	r24, 0x7F	; 127
     400:	96 e6       	ldi	r25, 0x66	; 102
     402:	9c 87       	std	Y+12, r25	; 0x0c
     404:	8b 87       	std	Y+11, r24	; 0x0b
	tft.setBackground(0x0000);
	tft.setForeground(0x667F);
	stdout = tftout(&tft);
     406:	ce 01       	movw	r24, r28
     408:	0e 94 59 05 	call	0xab2	; 0xab2 <_Z6tftoutP5tft_t>
     40c:	90 93 c4 01 	sts	0x01C4, r25
     410:	80 93 c3 01 	sts	0x01C3, r24
	touch.init();
     414:	8a e3       	ldi	r24, 0x3A	; 58
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN6rTouch4initEv>
	sei();
     41c:	78 94       	sei
}

inline void ili9341::_setBGLight(bool ctrl)
{
	if (ctrl)
		TFT_WCTRL |= TFT_BLC;
     41e:	11 9a       	sbi	0x02, 1	; 2

	tft.setBGLight(true);
	touch.calibrate();
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	8a e3       	ldi	r24, 0x3A	; 58
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN6rTouch9calibrateEb>
	inline void setBottomMask(const uint16_t lm) {d.bottomMask = lm;}
	// Return to normal mode (disable transform, vertical scrolling)
	inline void vsNormal(void) {setTransform(false); setVerticalScrolling(topEdge());}
#endif

	inline void clean(void) {fill(background()); setX(0); setY(0);}
     42a:	6d 85       	ldd	r22, Y+13	; 0x0d
     42c:	7e 85       	ldd	r23, Y+14	; 0x0e
     42e:	ce 01       	movw	r24, r28
     430:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN5tft_t4fillEj>
	tft_t(void);

	inline class tft_t& operator<<(const char c);
	inline class tft_t& operator<<(const char *str);

	inline void setX(uint16_t x) {d.x = x;}
     434:	1c 82       	std	Y+4, r1	; 0x04
     436:	1b 82       	std	Y+3, r1	; 0x03
	inline void setY(uint16_t y) {d.y = y;}
     438:	1e 82       	std	Y+6, r1	; 0x06
     43a:	1d 82       	std	Y+5, r1	; 0x05
	tft.clean();
	eeprom_first_done();
}
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
	sei();

	tft.setBGLight(true);
	touch.calibrate();
	tft.clean();
	eeprom_first_done();
     440:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <eeprom_first_done>

00000444 <_ZN5tft_t4areaEjjjj.isra.17>:
			data(cl);
		}
	}
}

inline void tft_t::area(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	ec 01       	movw	r28, r24
     456:	8b 01       	movw	r16, r22
     458:	6a 01       	movw	r12, r20
     45a:	79 01       	movw	r14, r18
{
	cmd(0x2A);			// Column Address Set
     45c:	8a e2       	ldi	r24, 0x2A	; 42
     45e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	write16(x);
     462:	ce 01       	movw	r24, r28
     464:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
	write16(x + w - 1);
     468:	ce 01       	movw	r24, r28
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	8c 0d       	add	r24, r12
     46e:	9d 1d       	adc	r25, r13
     470:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
	cmd(0x2B);			// Page Address Set
     474:	8b e2       	ldi	r24, 0x2B	; 43
     476:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	write16(y);
     47a:	c8 01       	movw	r24, r16
     47c:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
	write16(y + h - 1);
     480:	c8 01       	movw	r24, r16
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	8e 0d       	add	r24, r14
     486:	9f 1d       	adc	r25, r15
}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
	cmd(0x2A);			// Column Address Set
	write16(x);
	write16(x + w - 1);
	cmd(0x2B);			// Page Address Set
	write16(y);
	write16(y + h - 1);
     498:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>

0000049c <_ZN5tft_tC1Ev>:
	(x) = (x) ^ (y); \
	(y) = (x) ^ (y); \
	(x) = (x) ^ (y); \
}

tft_t::tft_t(void)
     49c:	fc 01       	movw	r30, r24
	tft_t(void);

	inline class tft_t& operator<<(const char c);
	inline class tft_t& operator<<(const char *str);

	inline void setX(uint16_t x) {d.x = x;}
     49e:	14 82       	std	Z+4, r1	; 0x04
     4a0:	13 82       	std	Z+3, r1	; 0x03
	inline void setY(uint16_t y) {d.y = y;}
     4a2:	16 82       	std	Z+6, r1	; 0x06
     4a4:	15 82       	std	Z+5, r1	; 0x05
	inline void setXY(uint16_t x, uint16_t y) {setX(x); setY(y);}
	inline uint16_t x(void) const {return d.x;}
	inline uint16_t y(void) const {return d.y;}
	inline uint16_t width(void) const {return d.w;}
	inline uint16_t height(void) const {return d.h;}
	inline void setZoom(const uint8_t zoom) {d.zoom = zoom;}
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	80 83       	st	Z, r24
	setTopMask(0);
	setBottomMask(0);
	setTransform(false);
#endif
	setZoom(1);
	d.orient = Portrait;
     4aa:	81 83       	std	Z+1, r24	; 0x01
	inline uint16_t background(void) const {return d.bgc;}
	void bmp(bool e);
	void setOrient(uint8_t o);
	inline uint8_t orient(void) const {return d.orient;}
	inline void setBGLight(bool e) {_setBGLight(e);}
	inline void setTabSize(uint8_t t) {d.tabSize = t;}
     4ac:	84 e0       	ldi	r24, 0x04	; 4
     4ae:	82 83       	std	Z+2, r24	; 0x02
	inline void all(void) {area(0, 0, width(), height());}
	static inline void start(void) {cmd(0x2C);}	// Memory write
	static inline void write16(uint16_t c) {data(c / 0x0100); data(c % 0x0100);}

private:
	inline void setWidth(const uint16_t w) {d.w = w;}
     4b0:	80 ef       	ldi	r24, 0xF0	; 240
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	90 87       	std	Z+8, r25	; 0x08
     4b6:	87 83       	std	Z+7, r24	; 0x07
	inline void setHeight(const uint16_t h) {d.h = h;}
     4b8:	80 e4       	ldi	r24, 0x40	; 64
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	92 87       	std	Z+10, r25	; 0x0a
     4be:	81 87       	std	Z+9, r24	; 0x09
	inline uint16_t y(void) const {return d.y;}
	inline uint16_t width(void) const {return d.w;}
	inline uint16_t height(void) const {return d.h;}
	inline void setZoom(const uint8_t zoom) {d.zoom = zoom;}
	inline uint8_t zoom(void) const {return d.zoom;}
	inline void setForeground(uint16_t c) {d.fgc = c;}
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	9f ef       	ldi	r25, 0xFF	; 255
     4c4:	94 87       	std	Z+12, r25	; 0x0c
     4c6:	83 87       	std	Z+11, r24	; 0x0b
	inline void setBackground(uint16_t c) {d.bgc = c;}
     4c8:	16 86       	std	Z+14, r1	; 0x0e
     4ca:	15 86       	std	Z+13, r1	; 0x0d
     4cc:	08 95       	ret

000004ce <_ZN5tft_t9rectangleEjjjjj>:
					(y0 > y1 ? -1 : 1), c);
	}
}

void tft_t::rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	fb 01       	movw	r30, r22
     4e0:	ba 01       	movw	r22, r20
     4e2:	e9 01       	movw	r28, r18
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
     4e4:	1c 16       	cp	r1, r28
     4e6:	1d 06       	cpc	r1, r29
     4e8:	0c f0       	brlt	.+2      	; 0x4ec <_ZN5tft_t9rectangleEjjjjj+0x1e>
     4ea:	51 c0       	rjmp	.+162    	; 0x58e <_ZN5tft_t9rectangleEjjjjj+0xc0>
     4ec:	10 16       	cp	r1, r16
     4ee:	11 06       	cpc	r1, r17
     4f0:	0c f0       	brlt	.+2      	; 0x4f4 <_ZN5tft_t9rectangleEjjjjj+0x26>
     4f2:	4d c0       	rjmp	.+154    	; 0x58e <_ZN5tft_t9rectangleEjjjjj+0xc0>
		goto draw;
	}

disp:
#endif
	if ((int16_t)x < 0) {
     4f4:	f7 ff       	sbrs	r31, 7
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <_ZN5tft_t9rectangleEjjjjj+0x32>
		w -= -(int16_t)x;
     4f8:	ce 0f       	add	r28, r30
     4fa:	df 1f       	adc	r29, r31
		x = 0;
     4fc:	e0 e0       	ldi	r30, 0x00	; 0
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
	}
	if ((int16_t)y < 0) {
     500:	77 ff       	sbrs	r23, 7
     502:	04 c0       	rjmp	.+8      	; 0x50c <_ZN5tft_t9rectangleEjjjjj+0x3e>
		h -= -(int16_t)y;
     504:	06 0f       	add	r16, r22
     506:	17 1f       	adc	r17, r23
		y = 0;
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	70 e0       	ldi	r23, 0x00	; 0
	}
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
     50c:	1c 16       	cp	r1, r28
     50e:	1d 06       	cpc	r1, r29
     510:	f4 f5       	brge	.+124    	; 0x58e <_ZN5tft_t9rectangleEjjjjj+0xc0>
     512:	10 16       	cp	r1, r16
     514:	11 06       	cpc	r1, r17
     516:	dc f5       	brge	.+118    	; 0x58e <_ZN5tft_t9rectangleEjjjjj+0xc0>
	static FILE *out = NULL;
	tft = hw;
	if (out == NULL)
		out = fdevopen(tftputch, NULL);
	return out;
}
     518:	dc 01       	movw	r26, r24
     51a:	17 96       	adiw	r26, 0x07	; 7
     51c:	2d 91       	ld	r18, X+
     51e:	3c 91       	ld	r19, X
     520:	18 97       	sbiw	r26, 0x08	; 8
		h -= -(int16_t)y;
		y = 0;
	}
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
		return;
	if (x + w > width())
     522:	af 01       	movw	r20, r30
     524:	4c 0f       	add	r20, r28
     526:	5d 1f       	adc	r21, r29
     528:	24 17       	cp	r18, r20
     52a:	35 07       	cpc	r19, r21
     52c:	18 f4       	brcc	.+6      	; 0x534 <_ZN5tft_t9rectangleEjjjjj+0x66>
		w = width() - x;
     52e:	e9 01       	movw	r28, r18
     530:	ce 1b       	sub	r28, r30
     532:	df 0b       	sbc	r29, r31
	static FILE *out = NULL;
	tft = hw;
	if (out == NULL)
		out = fdevopen(tftputch, NULL);
	return out;
}
     534:	dc 01       	movw	r26, r24
     536:	19 96       	adiw	r26, 0x09	; 9
     538:	8d 91       	ld	r24, X+
     53a:	9c 91       	ld	r25, X
     53c:	1a 97       	sbiw	r26, 0x0a	; 10
	}
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
		return;
	if (x + w > width())
		w = width() - x;
	if (y + h > height())
     53e:	9b 01       	movw	r18, r22
     540:	20 0f       	add	r18, r16
     542:	31 1f       	adc	r19, r17
     544:	82 17       	cp	r24, r18
     546:	93 07       	cpc	r25, r19
     548:	18 f4       	brcc	.+6      	; 0x550 <_ZN5tft_t9rectangleEjjjjj+0x82>
		h = height() - y;
     54a:	8c 01       	movw	r16, r24
     54c:	06 1b       	sub	r16, r22
     54e:	17 0b       	sbc	r17, r23
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
     550:	1c 16       	cp	r1, r28
     552:	1d 06       	cpc	r1, r29
     554:	e4 f4       	brge	.+56     	; 0x58e <_ZN5tft_t9rectangleEjjjjj+0xc0>
     556:	10 16       	cp	r1, r16
     558:	11 06       	cpc	r1, r17
     55a:	cc f4       	brge	.+50     	; 0x58e <_ZN5tft_t9rectangleEjjjjj+0xc0>
		return;

	area(x, y, w, h);
     55c:	98 01       	movw	r18, r16
     55e:	ae 01       	movw	r20, r28
     560:	cf 01       	movw	r24, r30
     562:	0e 94 22 02 	call	0x444	; 0x444 <_ZN5tft_t4areaEjjjj.isra.17>
#ifdef TFT_VERTICALSCROLLING
draw:
#endif
	start();
     566:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN5tft_t5startEv>
     56a:	0e c0       	rjmp	.+28     	; 0x588 <_ZN5tft_t9rectangleEjjjjj+0xba>
	while (h--)
		for (uint16_t xx = 0; xx < w; xx++)
			write16(c);
     56c:	c7 01       	movw	r24, r14
     56e:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
#ifdef TFT_VERTICALSCROLLING
draw:
#endif
	start();
	while (h--)
		for (uint16_t xx = 0; xx < w; xx++)
     572:	bf ef       	ldi	r27, 0xFF	; 255
     574:	cb 1a       	sub	r12, r27
     576:	db 0a       	sbc	r13, r27
     578:	02 c0       	rjmp	.+4      	; 0x57e <_ZN5tft_t9rectangleEjjjjj+0xb0>
	area(x, y, w, h);
#ifdef TFT_VERTICALSCROLLING
draw:
#endif
	start();
	while (h--)
     57a:	c1 2c       	mov	r12, r1
     57c:	d1 2c       	mov	r13, r1
		for (uint16_t xx = 0; xx < w; xx++)
     57e:	cc 16       	cp	r12, r28
     580:	dd 06       	cpc	r13, r29
     582:	a1 f7       	brne	.-24     	; 0x56c <_ZN5tft_t9rectangleEjjjjj+0x9e>
     584:	01 50       	subi	r16, 0x01	; 1
     586:	11 09       	sbc	r17, r1
	area(x, y, w, h);
#ifdef TFT_VERTICALSCROLLING
draw:
#endif
	start();
	while (h--)
     588:	01 15       	cp	r16, r1
     58a:	11 05       	cpc	r17, r1
     58c:	b1 f7       	brne	.-20     	; 0x57a <_ZN5tft_t9rectangleEjjjjj+0xac>
		for (uint16_t xx = 0; xx < w; xx++)
			write16(c);
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	df 90       	pop	r13
     59c:	cf 90       	pop	r12
     59e:	08 95       	ret

000005a0 <_ZN5tft_t4lineEjjjjj>:
	rectangle(x + s, y + h - s, w - s, s, c);
}

void tft_t::line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, \
		uint16_t c)
{
     5a0:	2f 92       	push	r2
     5a2:	3f 92       	push	r3
     5a4:	4f 92       	push	r4
     5a6:	5f 92       	push	r5
     5a8:	6f 92       	push	r6
     5aa:	7f 92       	push	r7
     5ac:	8f 92       	push	r8
     5ae:	9f 92       	push	r9
     5b0:	af 92       	push	r10
     5b2:	bf 92       	push	r11
     5b4:	cf 92       	push	r12
     5b6:	df 92       	push	r13
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	4c 01       	movw	r8, r24
     5c6:	5b 01       	movw	r10, r22
     5c8:	6a 01       	movw	r12, r20
     5ca:	e9 01       	movw	r28, r18
	static FILE *out = NULL;
	tft = hw;
	if (out == NULL)
		out = fdevopen(tftputch, NULL);
	return out;
}
     5cc:	fc 01       	movw	r30, r24
     5ce:	87 81       	ldd	r24, Z+7	; 0x07
     5d0:	90 85       	ldd	r25, Z+8	; 0x08
}

void tft_t::line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, \
		uint16_t c)
{
	if (x0 > width())
     5d2:	86 17       	cp	r24, r22
     5d4:	97 07       	cpc	r25, r23
     5d6:	20 f4       	brcc	.+8      	; 0x5e0 <_ZN5tft_t4lineEjjjjj+0x40>
		x0 = width() - 1;
     5d8:	5c 01       	movw	r10, r24
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	af 1a       	sub	r10, r31
     5de:	b1 08       	sbc	r11, r1
	if (x1 > width())
     5e0:	8c 17       	cp	r24, r28
     5e2:	9d 07       	cpc	r25, r29
     5e4:	10 f4       	brcc	.+4      	; 0x5ea <_ZN5tft_t4lineEjjjjj+0x4a>
		x1 = width() - 1;
     5e6:	ec 01       	movw	r28, r24
     5e8:	21 97       	sbiw	r28, 0x01	; 1
	static FILE *out = NULL;
	tft = hw;
	if (out == NULL)
		out = fdevopen(tftputch, NULL);
	return out;
}
     5ea:	f4 01       	movw	r30, r8
     5ec:	81 85       	ldd	r24, Z+9	; 0x09
     5ee:	92 85       	ldd	r25, Z+10	; 0x0a
{
	if (x0 > width())
		x0 = width() - 1;
	if (x1 > width())
		x1 = width() - 1;
	if (y0 > height())
     5f0:	8c 15       	cp	r24, r12
     5f2:	9d 05       	cpc	r25, r13
     5f4:	20 f4       	brcc	.+8      	; 0x5fe <_ZN5tft_t4lineEjjjjj+0x5e>
		y0 = height() - 1;
     5f6:	6c 01       	movw	r12, r24
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	cf 1a       	sub	r12, r31
     5fc:	d1 08       	sbc	r13, r1
	if (y1 > height())
     5fe:	80 17       	cp	r24, r16
     600:	91 07       	cpc	r25, r17
     602:	18 f4       	brcc	.+6      	; 0x60a <_ZN5tft_t4lineEjjjjj+0x6a>
		y1 = height() - 1;
     604:	8c 01       	movw	r16, r24
     606:	01 50       	subi	r16, 0x01	; 1
     608:	11 09       	sbc	r17, r1
	if (x0 == x1) {
     60a:	ac 16       	cp	r10, r28
     60c:	bd 06       	cpc	r11, r29
     60e:	71 f4       	brne	.+28     	; 0x62c <_ZN5tft_t4lineEjjjjj+0x8c>
		if (y0 > y1)
     610:	0c 15       	cp	r16, r12
     612:	1d 05       	cpc	r17, r13
     614:	30 f4       	brcc	.+12     	; 0x622 <_ZN5tft_t4lineEjjjjj+0x82>
			SWAP(y0, y1);
     616:	c0 26       	eor	r12, r16
     618:	d1 26       	eor	r13, r17
     61a:	0c 25       	eor	r16, r12
     61c:	1d 25       	eor	r17, r13
     61e:	c0 26       	eor	r12, r16
     620:	d1 26       	eor	r13, r17
		rectangle(x0, y0, 1, y1 - y0, c);
     622:	0c 19       	sub	r16, r12
     624:	1d 09       	sbc	r17, r13
     626:	21 e0       	ldi	r18, 0x01	; 1
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	11 c0       	rjmp	.+34     	; 0x64e <_ZN5tft_t4lineEjjjjj+0xae>
		return;
	}
	if (y0 == y1) {
     62c:	c0 16       	cp	r12, r16
     62e:	d1 06       	cpc	r13, r17
     630:	a1 f4       	brne	.+40     	; 0x65a <_ZN5tft_t4lineEjjjjj+0xba>
		if (x0 > x1)
     632:	ca 15       	cp	r28, r10
     634:	db 05       	cpc	r29, r11
     636:	30 f4       	brcc	.+12     	; 0x644 <_ZN5tft_t4lineEjjjjj+0xa4>
			SWAP(x0, x1);
     638:	ac 26       	eor	r10, r28
     63a:	bd 26       	eor	r11, r29
     63c:	ca 25       	eor	r28, r10
     63e:	db 25       	eor	r29, r11
     640:	ac 26       	eor	r10, r28
     642:	bd 26       	eor	r11, r29
		rectangle(x0, y0, x1 - x0, 1, c);
     644:	9e 01       	movw	r18, r28
     646:	2a 19       	sub	r18, r10
     648:	3b 09       	sbc	r19, r11
     64a:	01 e0       	ldi	r16, 0x01	; 1
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	a6 01       	movw	r20, r12
     650:	b5 01       	movw	r22, r10
     652:	c4 01       	movw	r24, r8
     654:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN5tft_t9rectangleEjjjjj>
		return;
     658:	a5 c0       	rjmp	.+330    	; 0x7a4 <_ZN5tft_t4lineEjjjjj+0x204>
	}
	uint16_t dx = abs(x1 - x0), dy = abs(y1 - y0);
     65a:	2e 01       	movw	r4, r28
     65c:	4a 18       	sub	r4, r10
     65e:	5b 08       	sbc	r5, r11
     660:	57 fe       	sbrs	r5, 7
     662:	03 c0       	rjmp	.+6      	; 0x66a <_ZN5tft_t4lineEjjjjj+0xca>
     664:	51 94       	neg	r5
     666:	41 94       	neg	r4
     668:	51 08       	sbc	r5, r1
     66a:	38 01       	movw	r6, r16
     66c:	6c 18       	sub	r6, r12
     66e:	7d 08       	sbc	r7, r13
     670:	77 fe       	sbrs	r7, 7
     672:	03 c0       	rjmp	.+6      	; 0x67a <_ZN5tft_t4lineEjjjjj+0xda>
     674:	71 94       	neg	r7
     676:	61 94       	neg	r6
     678:	71 08       	sbc	r7, r1
	if (dx < dy) {
     67a:	46 14       	cp	r4, r6
     67c:	57 04       	cpc	r5, r7
     67e:	e0 f5       	brcc	.+120    	; 0x6f8 <_ZN5tft_t4lineEjjjjj+0x158>
		if (y0 > y1) {
     680:	0c 15       	cp	r16, r12
     682:	1d 05       	cpc	r17, r13
     684:	60 f4       	brcc	.+24     	; 0x69e <_ZN5tft_t4lineEjjjjj+0xfe>
			SWAP(x0, x1);
     686:	ac 26       	eor	r10, r28
     688:	bd 26       	eor	r11, r29
     68a:	ca 25       	eor	r28, r10
     68c:	db 25       	eor	r29, r11
     68e:	ac 26       	eor	r10, r28
     690:	bd 26       	eor	r11, r29
			SWAP(y0, y1);
     692:	c0 26       	eor	r12, r16
     694:	d1 26       	eor	r13, r17
     696:	0c 25       	eor	r16, r12
     698:	1d 25       	eor	r17, r13
     69a:	c0 26       	eor	r12, r16
     69c:	d1 26       	eor	r13, r17
		}
		for (uint16_t y = y0; y <= y1; y++)
     69e:	21 2c       	mov	r2, r1
     6a0:	31 2c       	mov	r3, r1
     6a2:	26 c0       	rjmp	.+76     	; 0x6f0 <_ZN5tft_t4lineEjjjjj+0x150>
			point(x0 + dx * (y - y0) / dy * \
					(x0 > x1 ? -1 : 1), y, c);
     6a4:	c1 01       	movw	r24, r2
     6a6:	b3 01       	movw	r22, r6
     6a8:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__udivmodhi4>
     6ac:	ca 15       	cp	r28, r10
     6ae:	db 05       	cpc	r29, r11
     6b0:	18 f4       	brcc	.+6      	; 0x6b8 <_ZN5tft_t4lineEjjjjj+0x118>
     6b2:	2f ef       	ldi	r18, 0xFF	; 255
     6b4:	3f ef       	ldi	r19, 0xFF	; 255
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <_ZN5tft_t4lineEjjjjj+0x11c>
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	26 9f       	mul	r18, r22
     6be:	c0 01       	movw	r24, r0
     6c0:	27 9f       	mul	r18, r23
     6c2:	90 0d       	add	r25, r0
     6c4:	36 9f       	mul	r19, r22
     6c6:	90 0d       	add	r25, r0
     6c8:	11 24       	eor	r1, r1
     6ca:	8a 0d       	add	r24, r10
     6cc:	9b 1d       	adc	r25, r11
	return *this;
}

inline void tft_t::point(uint16_t x, uint16_t y, uint16_t c)
{
	if (x >= width() || y >= height())
     6ce:	f4 01       	movw	r30, r8
     6d0:	27 81       	ldd	r18, Z+7	; 0x07
     6d2:	30 85       	ldd	r19, Z+8	; 0x08
     6d4:	82 17       	cp	r24, r18
     6d6:	93 07       	cpc	r25, r19
     6d8:	30 f4       	brcc	.+12     	; 0x6e6 <_ZN5tft_t4lineEjjjjj+0x146>
     6da:	21 85       	ldd	r18, Z+9	; 0x09
     6dc:	32 85       	ldd	r19, Z+10	; 0x0a
     6de:	c2 16       	cp	r12, r18
     6e0:	d3 06       	cpc	r13, r19
     6e2:	08 f4       	brcc	.+2      	; 0x6e6 <_ZN5tft_t4lineEjjjjj+0x146>
     6e4:	44 c0       	rjmp	.+136    	; 0x76e <_ZN5tft_t4lineEjjjjj+0x1ce>
	if (dx < dy) {
		if (y0 > y1) {
			SWAP(x0, x1);
			SWAP(y0, y1);
		}
		for (uint16_t y = y0; y <= y1; y++)
     6e6:	ff ef       	ldi	r31, 0xFF	; 255
     6e8:	cf 1a       	sub	r12, r31
     6ea:	df 0a       	sbc	r13, r31
     6ec:	24 0c       	add	r2, r4
     6ee:	35 1c       	adc	r3, r5
     6f0:	0c 15       	cp	r16, r12
     6f2:	1d 05       	cpc	r17, r13
     6f4:	b8 f6       	brcc	.-82     	; 0x6a4 <_ZN5tft_t4lineEjjjjj+0x104>
     6f6:	56 c0       	rjmp	.+172    	; 0x7a4 <_ZN5tft_t4lineEjjjjj+0x204>
			point(x0 + dx * (y - y0) / dy * \
					(x0 > x1 ? -1 : 1), y, c);
	} else {
		if (x0 > x1) {
     6f8:	ca 15       	cp	r28, r10
     6fa:	db 05       	cpc	r29, r11
     6fc:	60 f4       	brcc	.+24     	; 0x716 <_ZN5tft_t4lineEjjjjj+0x176>
			SWAP(x0, x1);
     6fe:	ac 26       	eor	r10, r28
     700:	bd 26       	eor	r11, r29
     702:	ca 25       	eor	r28, r10
     704:	db 25       	eor	r29, r11
     706:	ac 26       	eor	r10, r28
     708:	bd 26       	eor	r11, r29
			SWAP(y0, y1);
     70a:	c0 26       	eor	r12, r16
     70c:	d1 26       	eor	r13, r17
     70e:	0c 25       	eor	r16, r12
     710:	1d 25       	eor	r17, r13
     712:	c0 26       	eor	r12, r16
     714:	d1 26       	eor	r13, r17
		}
		for (uint16_t x = x0; x <= x1; x++)
     716:	21 2c       	mov	r2, r1
     718:	31 2c       	mov	r3, r1
     71a:	25 c0       	rjmp	.+74     	; 0x766 <_ZN5tft_t4lineEjjjjj+0x1c6>
			point(x, y0 + dy * (x - x0) / dx * \
					(y0 > y1 ? -1 : 1), c);
     71c:	0c 15       	cp	r16, r12
     71e:	1d 05       	cpc	r17, r13
     720:	18 f4       	brcc	.+6      	; 0x728 <_ZN5tft_t4lineEjjjjj+0x188>
     722:	2f ef       	ldi	r18, 0xFF	; 255
     724:	3f ef       	ldi	r19, 0xFF	; 255
     726:	02 c0       	rjmp	.+4      	; 0x72c <_ZN5tft_t4lineEjjjjj+0x18c>
     728:	21 e0       	ldi	r18, 0x01	; 1
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	f4 01       	movw	r30, r8
     72e:	87 81       	ldd	r24, Z+7	; 0x07
     730:	90 85       	ldd	r25, Z+8	; 0x08
     732:	a8 16       	cp	r10, r24
     734:	b9 06       	cpc	r11, r25
     736:	90 f4       	brcc	.+36     	; 0x75c <_ZN5tft_t4lineEjjjjj+0x1bc>
     738:	c1 01       	movw	r24, r2
     73a:	b2 01       	movw	r22, r4
     73c:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__udivmodhi4>
     740:	26 9f       	mul	r18, r22
     742:	c0 01       	movw	r24, r0
     744:	27 9f       	mul	r18, r23
     746:	90 0d       	add	r25, r0
     748:	36 9f       	mul	r19, r22
     74a:	90 0d       	add	r25, r0
     74c:	11 24       	eor	r1, r1
     74e:	8c 0d       	add	r24, r12
     750:	9d 1d       	adc	r25, r13
     752:	21 85       	ldd	r18, Z+9	; 0x09
     754:	32 85       	ldd	r19, Z+10	; 0x0a
     756:	82 17       	cp	r24, r18
     758:	93 07       	cpc	r25, r19
     75a:	b0 f0       	brcs	.+44     	; 0x788 <_ZN5tft_t4lineEjjjjj+0x1e8>
	} else {
		if (x0 > x1) {
			SWAP(x0, x1);
			SWAP(y0, y1);
		}
		for (uint16_t x = x0; x <= x1; x++)
     75c:	ff ef       	ldi	r31, 0xFF	; 255
     75e:	af 1a       	sub	r10, r31
     760:	bf 0a       	sbc	r11, r31
     762:	26 0c       	add	r2, r6
     764:	37 1c       	adc	r3, r7
     766:	ca 15       	cp	r28, r10
     768:	db 05       	cpc	r29, r11
     76a:	c0 f6       	brcc	.-80     	; 0x71c <_ZN5tft_t4lineEjjjjj+0x17c>
     76c:	1b c0       	rjmp	.+54     	; 0x7a4 <_ZN5tft_t4lineEjjjjj+0x204>
		return;
	area(x, y, 1, 1);
     76e:	21 e0       	ldi	r18, 0x01	; 1
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	41 e0       	ldi	r20, 0x01	; 1
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	b6 01       	movw	r22, r12
     778:	0e 94 22 02 	call	0x444	; 0x444 <_ZN5tft_t4areaEjjjj.isra.17>
	start();
     77c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN5tft_t5startEv>
	write16(c);
     780:	c7 01       	movw	r24, r14
     782:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
     786:	af cf       	rjmp	.-162    	; 0x6e6 <_ZN5tft_t4lineEjjjjj+0x146>

inline void tft_t::point(uint16_t x, uint16_t y, uint16_t c)
{
	if (x >= width() || y >= height())
		return;
	area(x, y, 1, 1);
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	41 e0       	ldi	r20, 0x01	; 1
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	bc 01       	movw	r22, r24
     792:	c5 01       	movw	r24, r10
     794:	0e 94 22 02 	call	0x444	; 0x444 <_ZN5tft_t4areaEjjjj.isra.17>
	start();
     798:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN5tft_t5startEv>
	write16(c);
     79c:	c7 01       	movw	r24, r14
     79e:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
     7a2:	dc cf       	rjmp	.-72     	; 0x75c <_ZN5tft_t4lineEjjjjj+0x1bc>
			point(x, y0 + dy * (x - x0) / dx * \
					(y0 > y1 ? -1 : 1), c);
	}
}
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	cf 90       	pop	r12
     7b4:	bf 90       	pop	r11
     7b6:	af 90       	pop	r10
     7b8:	9f 90       	pop	r9
     7ba:	8f 90       	pop	r8
     7bc:	7f 90       	pop	r7
     7be:	6f 90       	pop	r6
     7c0:	5f 90       	pop	r5
     7c2:	4f 90       	pop	r4
     7c4:	3f 90       	pop	r3
     7c6:	2f 90       	pop	r2
     7c8:	08 95       	ret

000007ca <_ZN5tft_t5frameEjjjjhj>:
	}
}

void tft_t::frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, \
		uint8_t s, uint16_t c)
{
     7ca:	2f 92       	push	r2
     7cc:	3f 92       	push	r3
     7ce:	4f 92       	push	r4
     7d0:	5f 92       	push	r5
     7d2:	6f 92       	push	r6
     7d4:	7f 92       	push	r7
     7d6:	8f 92       	push	r8
     7d8:	9f 92       	push	r9
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <_ZN5tft_t5frameEjjjjhj+0x26>
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <_ZN5tft_t5frameEjjjjhj+0x28>
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <_ZN5tft_t5frameEjjjjhj+0x2a>
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	9e 83       	std	Y+6, r25	; 0x06
     7fa:	8d 83       	std	Y+5, r24	; 0x05
     7fc:	5b 01       	movw	r10, r22
     7fe:	4a 01       	movw	r8, r20
     800:	3a 83       	std	Y+2, r19	; 0x02
     802:	29 83       	std	Y+1, r18	; 0x01
     804:	1c 83       	std	Y+4, r17	; 0x04
     806:	0b 83       	std	Y+3, r16	; 0x03
	rectangle(x, y, w - s, s, c);
     808:	6e 2c       	mov	r6, r14
     80a:	71 2c       	mov	r7, r1
     80c:	19 01       	movw	r2, r18
     80e:	26 18       	sub	r2, r6
     810:	37 08       	sbc	r3, r7
     812:	76 01       	movw	r14, r12
     814:	83 01       	movw	r16, r6
     816:	91 01       	movw	r18, r2
     818:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN5tft_t9rectangleEjjjjj>
	rectangle(x + w - s, y, s, h - s, c);
     81c:	4b 80       	ldd	r4, Y+3	; 0x03
     81e:	5c 80       	ldd	r5, Y+4	; 0x04
     820:	46 18       	sub	r4, r6
     822:	57 08       	sbc	r5, r7
     824:	69 81       	ldd	r22, Y+1	; 0x01
     826:	7a 81       	ldd	r23, Y+2	; 0x02
     828:	6a 0d       	add	r22, r10
     82a:	7b 1d       	adc	r23, r11
     82c:	66 19       	sub	r22, r6
     82e:	77 09       	sbc	r23, r7
     830:	82 01       	movw	r16, r4
     832:	93 01       	movw	r18, r6
     834:	a4 01       	movw	r20, r8
     836:	8d 81       	ldd	r24, Y+5	; 0x05
     838:	9e 81       	ldd	r25, Y+6	; 0x06
     83a:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN5tft_t9rectangleEjjjjj>
	rectangle(x, y + s, s, h - s, c);
     83e:	a3 01       	movw	r20, r6
     840:	48 0d       	add	r20, r8
     842:	59 1d       	adc	r21, r9
     844:	93 01       	movw	r18, r6
     846:	b5 01       	movw	r22, r10
     848:	8d 81       	ldd	r24, Y+5	; 0x05
     84a:	9e 81       	ldd	r25, Y+6	; 0x06
     84c:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN5tft_t9rectangleEjjjjj>
	rectangle(x + s, y + h - s, w - s, s, c);
     850:	4b 81       	ldd	r20, Y+3	; 0x03
     852:	5c 81       	ldd	r21, Y+4	; 0x04
     854:	48 0d       	add	r20, r8
     856:	59 1d       	adc	r21, r9
     858:	46 19       	sub	r20, r6
     85a:	57 09       	sbc	r21, r7
     85c:	b3 01       	movw	r22, r6
     85e:	6a 0d       	add	r22, r10
     860:	7b 1d       	adc	r23, r11
     862:	83 01       	movw	r16, r6
     864:	91 01       	movw	r18, r2
     866:	8d 81       	ldd	r24, Y+5	; 0x05
     868:	9e 81       	ldd	r25, Y+6	; 0x06
     86a:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN5tft_t9rectangleEjjjjj>
}
     86e:	26 96       	adiw	r28, 0x06	; 6
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	bf 90       	pop	r11
     88c:	af 90       	pop	r10
     88e:	9f 90       	pop	r9
     890:	8f 90       	pop	r8
     892:	7f 90       	pop	r7
     894:	6f 90       	pop	r6
     896:	5f 90       	pop	r5
     898:	4f 90       	pop	r4
     89a:	3f 90       	pop	r3
     89c:	2f 90       	pop	r2
     89e:	08 95       	ret

000008a0 <_ZN5tft_t9setOrientEh>:
		for (uint16_t xx = 0; xx < w; xx++)
			write16(c);
}

void tft_t::setOrient(uint8_t o)
{
     8a0:	fc 01       	movw	r30, r24
     8a2:	86 2f       	mov	r24, r22
	switch (o) {
     8a4:	61 30       	cpi	r22, 0x01	; 1
     8a6:	69 f0       	breq	.+26     	; 0x8c2 <_ZN5tft_t9setOrientEh+0x22>
     8a8:	28 f0       	brcs	.+10     	; 0x8b4 <_ZN5tft_t9setOrientEh+0x14>
     8aa:	62 30       	cpi	r22, 0x02	; 2
     8ac:	19 f0       	breq	.+6      	; 0x8b4 <_ZN5tft_t9setOrientEh+0x14>
     8ae:	63 30       	cpi	r22, 0x03	; 3
     8b0:	81 f4       	brne	.+32     	; 0x8d2 <_ZN5tft_t9setOrientEh+0x32>
     8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <_ZN5tft_t9setOrientEh+0x22>
	inline void all(void) {area(0, 0, width(), height());}
	static inline void start(void) {cmd(0x2C);}	// Memory write
	static inline void write16(uint16_t c) {data(c / 0x0100); data(c % 0x0100);}

private:
	inline void setWidth(const uint16_t w) {d.w = w;}
     8b4:	20 e4       	ldi	r18, 0x40	; 64
     8b6:	31 e0       	ldi	r19, 0x01	; 1
     8b8:	30 87       	std	Z+8, r19	; 0x08
     8ba:	27 83       	std	Z+7, r18	; 0x07
	inline void setHeight(const uint16_t h) {d.h = h;}
     8bc:	20 ef       	ldi	r18, 0xF0	; 240
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	06 c0       	rjmp	.+12     	; 0x8ce <_ZN5tft_t9setOrientEh+0x2e>
	inline void all(void) {area(0, 0, width(), height());}
	static inline void start(void) {cmd(0x2C);}	// Memory write
	static inline void write16(uint16_t c) {data(c / 0x0100); data(c % 0x0100);}

private:
	inline void setWidth(const uint16_t w) {d.w = w;}
     8c2:	20 ef       	ldi	r18, 0xF0	; 240
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	30 87       	std	Z+8, r19	; 0x08
     8c8:	27 83       	std	Z+7, r18	; 0x07
	inline void setHeight(const uint16_t h) {d.h = h;}
     8ca:	20 e4       	ldi	r18, 0x40	; 64
     8cc:	31 e0       	ldi	r19, 0x01	; 1
     8ce:	32 87       	std	Z+10, r19	; 0x0a
     8d0:	21 87       	std	Z+9, r18	; 0x09
	tft_t(void);

	inline class tft_t& operator<<(const char c);
	inline class tft_t& operator<<(const char *str);

	inline void setX(uint16_t x) {d.x = x;}
     8d2:	14 82       	std	Z+4, r1	; 0x04
     8d4:	13 82       	std	Z+3, r1	; 0x03
	inline void setY(uint16_t y) {d.y = y;}
     8d6:	16 82       	std	Z+6, r1	; 0x06
     8d8:	15 82       	std	Z+5, r1	; 0x05
		setWidth(SIZE_W);
		setHeight(SIZE_H);
	}
	setX(0);
	setY(0);
	d.orient = o;
     8da:	81 83       	std	Z+1, r24	; 0x01
	_setOrient(o);
     8dc:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <_ZN7ili934110_setOrientEh>

000008e0 <_ZN5tft_t3bmpEb>:
#endif

void tft_t::bmp(bool e)
{
	if (e)
		_setOrient(orient() + BMPLandscape);
     8e0:	fc 01       	movw	r30, r24
     8e2:	81 81       	ldd	r24, Z+1	; 0x01
}
#endif

void tft_t::bmp(bool e)
{
	if (e)
     8e4:	61 11       	cpse	r22, r1
		_setOrient(orient() + BMPLandscape);
     8e6:	8c 5f       	subi	r24, 0xFC	; 252
	else
		_setOrient(orient());
     8e8:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <_ZN7ili934110_setOrientEh>

000008ec <_ZN5tft_t5putchEc>:
	d.bfa = bfa;
}
#endif

void tft_t::putch(char ch)
{
     8ec:	af 92       	push	r10
     8ee:	bf 92       	push	r11
     8f0:	cf 92       	push	r12
     8f2:	df 92       	push	r13
     8f4:	ef 92       	push	r14
     8f6:	ff 92       	push	r15
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ec 01       	movw	r28, r24
     902:	06 2f       	mov	r16, r22
	static FILE *out = NULL;
	tft = hw;
	if (out == NULL)
		out = fdevopen(tftputch, NULL);
	return out;
}
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	9c 81       	ldd	r25, Y+4	; 0x04
     908:	48 81       	ld	r20, Y
{
#ifdef TFT_CHECKING
	if ((int16_t)x() >= (int16_t)width() || (int16_t)y() >= (int16_t)height())
		return;
#endif
	if ((int16_t)(x() + FONT_WIDTH * zoom()) < 0)
     90a:	9c 01       	movw	r18, r24
     90c:	56 e0       	ldi	r21, 0x06	; 6
     90e:	45 9f       	mul	r20, r21
     910:	20 0d       	add	r18, r0
     912:	31 1d       	adc	r19, r1
     914:	11 24       	eor	r1, r1
     916:	37 fd       	sbrc	r19, 7
     918:	47 c0       	rjmp	.+142    	; 0x9a8 <_ZN5tft_t5putchEc+0xbc>
		return;
	uint8_t h = FONT_HEIGHT * zoom(), w = FONT_WIDTH * zoom();
     91a:	b4 2e       	mov	r11, r20
     91c:	bb 0c       	add	r11, r11
     91e:	bb 0c       	add	r11, r11
     920:	bb 0c       	add	r11, r11
     922:	d4 2e       	mov	r13, r20
     924:	dd 0c       	add	r13, r13
     926:	d4 0e       	add	r13, r20
     928:	dd 0c       	add	r13, r13
	bool yTransform = transform() && portrait() && yy < bottomEdge() && yy + yStop - yStart > bottomEdge();
	uint8_t xEnd = xTransform ? bottomEdge() - xx : xStop;
draw:
	area(xx, yy, xEnd - xStart, h);
#else
	area(x(), y(), w, h);
     92a:	6d 81       	ldd	r22, Y+5	; 0x05
     92c:	7e 81       	ldd	r23, Y+6	; 0x06
     92e:	2b 2d       	mov	r18, r11
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	4d 2d       	mov	r20, r13
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	0e 94 22 02 	call	0x444	; 0x444 <_ZN5tft_t4areaEjjjj.isra.17>
#endif
	start();
     93a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN5tft_t5startEv>
			area(x(), topEdge(), w, h);
			start();
			yTransform = false;
		}
#else
	for (uint8_t yi = 0; yi < h; yi++) {
     93e:	c1 2c       	mov	r12, r1
		unsigned char c;
#ifdef TFT_VERTICALSCROLLING
		c = pgm_read_byte(&(ascii[ch - ' '][yi / zoom()])) << (xStart / zoom());
		for (uint8_t xi = xStart; xi < xEnd; xi++) {
#else
		c = pgm_read_byte(&(ascii[ch - ' '][yi / zoom()]));
     940:	11 27       	eor	r17, r17
     942:	07 fd       	sbrc	r16, 7
     944:	10 95       	com	r17
     946:	00 52       	subi	r16, 0x20	; 32
     948:	11 09       	sbc	r17, r1
     94a:	93 e0       	ldi	r25, 0x03	; 3
     94c:	00 0f       	add	r16, r16
     94e:	11 1f       	adc	r17, r17
     950:	9a 95       	dec	r25
     952:	e1 f7       	brne	.-8      	; 0x94c <_ZN5tft_t5putchEc+0x60>
			area(x(), topEdge(), w, h);
			start();
			yTransform = false;
		}
#else
	for (uint8_t yi = 0; yi < h; yi++) {
     954:	27 c0       	rjmp	.+78     	; 0x9a4 <_ZN5tft_t5putchEc+0xb8>
		unsigned char c;
#ifdef TFT_VERTICALSCROLLING
		c = pgm_read_byte(&(ascii[ch - ' '][yi / zoom()])) << (xStart / zoom());
		for (uint8_t xi = xStart; xi < xEnd; xi++) {
#else
		c = pgm_read_byte(&(ascii[ch - ' '][yi / zoom()]));
     956:	68 81       	ld	r22, Y
     958:	8c 2d       	mov	r24, r12
     95a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__udivmodqi4>
     95e:	f8 01       	movw	r30, r16
     960:	e8 0f       	add	r30, r24
     962:	f1 1d       	adc	r31, r1
     964:	e4 58       	subi	r30, 0x84	; 132
     966:	ff 4f       	sbci	r31, 0xFF	; 255
     968:	a4 90       	lpm	r10, Z+
		for (uint8_t xi = 0; xi < w; xi++) {
     96a:	ee 24       	eor	r14, r14
     96c:	e3 94       	inc	r14
     96e:	f1 2c       	mov	r15, r1
     970:	14 c0       	rjmp	.+40     	; 0x99a <_ZN5tft_t5putchEc+0xae>
#endif
			if (c & 0x80)
     972:	a7 fe       	sbrs	r10, 7
     974:	03 c0       	rjmp	.+6      	; 0x97c <_ZN5tft_t5putchEc+0x90>
				write16(foreground());
     976:	8b 85       	ldd	r24, Y+11	; 0x0b
     978:	9c 85       	ldd	r25, Y+12	; 0x0c
     97a:	02 c0       	rjmp	.+4      	; 0x980 <_ZN5tft_t5putchEc+0x94>
			else
				write16(background());
     97c:	8d 85       	ldd	r24, Y+13	; 0x0d
     97e:	9e 85       	ldd	r25, Y+14	; 0x0e
     980:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
			if ((xi + 1) % zoom() == 0)
     984:	68 81       	ld	r22, Y
     986:	c7 01       	movw	r24, r14
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divmodhi4>
     98e:	89 2b       	or	r24, r25
     990:	09 f4       	brne	.+2      	; 0x994 <_ZN5tft_t5putchEc+0xa8>
				c <<= 1;
     992:	aa 0c       	add	r10, r10
     994:	8f ef       	ldi	r24, 0xFF	; 255
     996:	e8 1a       	sub	r14, r24
     998:	f8 0a       	sbc	r15, r24
#ifdef TFT_VERTICALSCROLLING
		c = pgm_read_byte(&(ascii[ch - ' '][yi / zoom()])) << (xStart / zoom());
		for (uint8_t xi = xStart; xi < xEnd; xi++) {
#else
		c = pgm_read_byte(&(ascii[ch - ' '][yi / zoom()]));
		for (uint8_t xi = 0; xi < w; xi++) {
     99a:	8e 2d       	mov	r24, r14
     99c:	81 50       	subi	r24, 0x01	; 1
     99e:	8d 15       	cp	r24, r13
     9a0:	40 f3       	brcs	.-48     	; 0x972 <_ZN5tft_t5putchEc+0x86>
			area(x(), topEdge(), w, h);
			start();
			yTransform = false;
		}
#else
	for (uint8_t yi = 0; yi < h; yi++) {
     9a2:	c3 94       	inc	r12
     9a4:	cb 10       	cpse	r12, r11
     9a6:	d7 cf       	rjmp	.-82     	; 0x956 <_ZN5tft_t5putchEc+0x6a>
		xEnd = xStop;
		xTransform = false;
		goto draw;
	}
#endif
}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	cf 90       	pop	r12
     9b8:	bf 90       	pop	r11
     9ba:	af 90       	pop	r10
     9bc:	08 95       	ret

000009be <_ZN5tft_t9putStringEPKcb>:
	setForeground(DEF_FGC);
	setBackground(DEF_BGC);
}

void tft_t::putString(const char *str, bool progMem)
{
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	1f 92       	push	r1
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	8c 01       	movw	r16, r24
     9d2:	7b 01       	movw	r14, r22
		clip = xt < bottomEdge();
	}
#endif

	char c;
	while ((c = progMem ? pgm_read_byte(str++) : *str++) != '\0') {
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <_ZN5tft_t9putStringEPKcb+0x22>
		*this << c;
     9d6:	c8 01       	movw	r24, r16
     9d8:	49 83       	std	Y+1, r20	; 0x01
     9da:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <_ZN5tft_tlsEc>
     9de:	49 81       	ldd	r20, Y+1	; 0x01
		clip = xt < bottomEdge();
	}
#endif

	char c;
	while ((c = progMem ? pgm_read_byte(str++) : *str++) != '\0') {
     9e0:	f7 01       	movw	r30, r14
     9e2:	44 23       	and	r20, r20
     9e4:	11 f0       	breq	.+4      	; 0x9ea <_ZN5tft_t9putStringEPKcb+0x2c>
     9e6:	64 91       	lpm	r22, Z+
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <_ZN5tft_t9putStringEPKcb+0x2e>
     9ea:	60 81       	ld	r22, Z
     9ec:	ff ef       	ldi	r31, 0xFF	; 255
     9ee:	ef 1a       	sub	r14, r31
     9f0:	ff 0a       	sbc	r15, r31
     9f2:	61 11       	cpse	r22, r1
     9f4:	f0 cf       	rjmp	.-32     	; 0x9d6 <_ZN5tft_t9putStringEPKcb+0x18>
			if (xt >= bottomEdge())
				break;
		}
#endif
	}
}
     9f6:	0f 90       	pop	r0
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	08 95       	ret

00000a06 <_ZN5tft_t10drawImage2EPKhjjjjb>:
	}
#endif
}

void tft_t::drawImage2(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
{
     a06:	7f 92       	push	r7
     a08:	8f 92       	push	r8
     a0a:	9f 92       	push	r9
     a0c:	af 92       	push	r10
     a0e:	bf 92       	push	r11
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	5c 01       	movw	r10, r24
     a22:	eb 01       	movw	r28, r22
     a24:	ca 01       	movw	r24, r20
     a26:	b9 01       	movw	r22, r18
#endif

#ifdef TFT_VERTICALSCROLLING
disp:
#endif
	area(x, y, w, h);
     a28:	97 01       	movw	r18, r14
     a2a:	a8 01       	movw	r20, r16
     a2c:	0e 94 22 02 	call	0x444	; 0x444 <_ZN5tft_t4areaEjjjj.isra.17>
	start();
     a30:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN5tft_t5startEv>
#ifdef TFT_VERTICALSCROLLING
	//bool xTransform = transform() && !portrait() && x < bottomEdge() && x + w - xs - xe > bottomEdge();
	bool yTransform = transform() && portrait() && y < bottomEdge() && y + h > bottomEdge();
#endif
	for (uint8_t yy = 0; yy < h; yy++) {
     a34:	91 2c       	mov	r9, r1
#endif
}

void tft_t::drawImage2(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
{
	uint8_t i = 0, c = 0;
     a36:	d1 2c       	mov	r13, r1
     a38:	20 e0       	ldi	r18, 0x00	; 0
	start();
#ifdef TFT_VERTICALSCROLLING
	//bool xTransform = transform() && !portrait() && x < bottomEdge() && x + w - xs - xe > bottomEdge();
	bool yTransform = transform() && portrait() && y < bottomEdge() && y + h > bottomEdge();
#endif
	for (uint8_t yy = 0; yy < h; yy++) {
     a3a:	28 c0       	rjmp	.+80     	; 0xa8c <_ZN5tft_t10drawImage2EPKhjjjjb+0x86>
			if (i)
				c <<= i;
		}
#endif
		for (uint8_t xx = 0; xx < w; xx++) {
			if (i++ == 0)
     a3c:	72 2e       	mov	r7, r18
     a3e:	73 94       	inc	r7
     a40:	21 11       	cpse	r18, r1
     a42:	0a c0       	rjmp	.+20     	; 0xa58 <_ZN5tft_t10drawImage2EPKhjjjjb+0x52>
     a44:	ce 01       	movw	r24, r28
     a46:	01 96       	adiw	r24, 0x01	; 1
				c = progMem ? pgm_read_byte(ptr++) : *ptr++;
     a48:	cc 20       	and	r12, r12
     a4a:	21 f0       	breq	.+8      	; 0xa54 <_ZN5tft_t10drawImage2EPKhjjjjb+0x4e>
     a4c:	fe 01       	movw	r30, r28
     a4e:	ec 01       	movw	r28, r24
     a50:	d4 90       	lpm	r13, Z+
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <_ZN5tft_t10drawImage2EPKhjjjjb+0x52>
     a54:	d8 80       	ld	r13, Y
     a56:	ec 01       	movw	r28, r24
			if (c & 0x80)
				write16(foreground());
     a58:	f5 01       	movw	r30, r10
		}
#endif
		for (uint8_t xx = 0; xx < w; xx++) {
			if (i++ == 0)
				c = progMem ? pgm_read_byte(ptr++) : *ptr++;
			if (c & 0x80)
     a5a:	d7 fe       	sbrs	r13, 7
     a5c:	03 c0       	rjmp	.+6      	; 0xa64 <_ZN5tft_t10drawImage2EPKhjjjjb+0x5e>
				write16(foreground());
     a5e:	83 85       	ldd	r24, Z+11	; 0x0b
     a60:	94 85       	ldd	r25, Z+12	; 0x0c
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <_ZN5tft_t10drawImage2EPKhjjjjb+0x62>
			else
				write16(background());
     a64:	85 85       	ldd	r24, Z+13	; 0x0d
     a66:	96 85       	ldd	r25, Z+14	; 0x0e
     a68:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
			if (i == 8)
     a6c:	f8 e0       	ldi	r31, 0x08	; 8
     a6e:	7f 16       	cp	r7, r31
     a70:	11 f0       	breq	.+4      	; 0xa76 <_ZN5tft_t10drawImage2EPKhjjjjb+0x70>
				i = 0;
			else
				c <<= 1;
     a72:	dd 0c       	add	r13, r13
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <_ZN5tft_t10drawImage2EPKhjjjjb+0x72>
			if (c & 0x80)
				write16(foreground());
			else
				write16(background());
			if (i == 8)
				i = 0;
     a76:	71 2c       	mov	r7, r1
			i %= 8;
			if (i)
				c <<= i;
		}
#endif
		for (uint8_t xx = 0; xx < w; xx++) {
     a78:	83 94       	inc	r8
     a7a:	27 2d       	mov	r18, r7
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <_ZN5tft_t10drawImage2EPKhjjjjb+0x7a>
	start();
#ifdef TFT_VERTICALSCROLLING
	//bool xTransform = transform() && !portrait() && x < bottomEdge() && x + w - xs - xe > bottomEdge();
	bool yTransform = transform() && portrait() && y < bottomEdge() && y + h > bottomEdge();
#endif
	for (uint8_t yy = 0; yy < h; yy++) {
     a7e:	81 2c       	mov	r8, r1
			i %= 8;
			if (i)
				c <<= i;
		}
#endif
		for (uint8_t xx = 0; xx < w; xx++) {
     a80:	88 2d       	mov	r24, r8
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	80 17       	cp	r24, r16
     a86:	91 07       	cpc	r25, r17
     a88:	c8 f2       	brcs	.-78     	; 0xa3c <_ZN5tft_t10drawImage2EPKhjjjjb+0x36>
	start();
#ifdef TFT_VERTICALSCROLLING
	//bool xTransform = transform() && !portrait() && x < bottomEdge() && x + w - xs - xe > bottomEdge();
	bool yTransform = transform() && portrait() && y < bottomEdge() && y + h > bottomEdge();
#endif
	for (uint8_t yy = 0; yy < h; yy++) {
     a8a:	93 94       	inc	r9
     a8c:	89 2d       	mov	r24, r9
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	8e 15       	cp	r24, r14
     a92:	9f 05       	cpc	r25, r15
     a94:	a0 f3       	brcs	.-24     	; 0xa7e <_ZN5tft_t10drawImage2EPKhjjjjb+0x78>
				i = 0;
			else
				c <<= 1;
		}
	}
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	bf 90       	pop	r11
     aa8:	af 90       	pop	r10
     aaa:	9f 90       	pop	r9
     aac:	8f 90       	pop	r8
     aae:	7f 90       	pop	r7
     ab0:	08 95       	ret

00000ab2 <_Z6tftoutP5tft_t>:
}

FILE *tftout(tft_t *hw)
{
	static FILE *out = NULL;
	tft = hw;
     ab2:	90 93 6f 01 	sts	0x016F, r25
     ab6:	80 93 6e 01 	sts	0x016E, r24
	if (out == NULL)
     aba:	80 91 70 01 	lds	r24, 0x0170
     abe:	90 91 71 01 	lds	r25, 0x0171
     ac2:	89 2b       	or	r24, r25
     ac4:	51 f4       	brne	.+20     	; 0xada <_Z6tftoutP5tft_t+0x28>
		out = fdevopen(tftputch, NULL);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	88 e5       	ldi	r24, 0x58	; 88
     acc:	97 e1       	ldi	r25, 0x17	; 23
     ace:	0e 94 92 19 	call	0x3324	; 0x3324 <fdevopen>
     ad2:	90 93 71 01 	sts	0x0171, r25
     ad6:	80 93 70 01 	sts	0x0170, r24
	return out;
}
     ada:	80 91 70 01 	lds	r24, 0x0170
     ade:	90 91 71 01 	lds	r25, 0x0171
     ae2:	08 95       	ret

00000ae4 <_ZL10rTouchMode9Functions>:
}

// For FAST operation, Detection -> ReadY -> ReadX -> Detection ONLY!
static inline void rTouchMode(Functions func)
{
	switch (func) {
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	91 05       	cpc	r25, r1
     ae8:	91 f0       	breq	.+36     	; 0xb0e <_ZL10rTouchMode9Functions+0x2a>
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	91 05       	cpc	r25, r1
     aee:	59 f0       	breq	.+22     	; 0xb06 <_ZL10rTouchMode9Functions+0x22>
     af0:	89 2b       	or	r24, r25
     af2:	99 f4       	brne	.+38     	; 0xb1a <_ZL10rTouchMode9Functions+0x36>
	case Detection:
		RTOUCH_DDRM &= ~RTOUCH_XM;//pin 5 as output
     af4:	25 98       	cbi	0x04, 5	; 4
		RTOUCH_DDRM |= RTOUCH_YM;//pin 4 as input
     af6:	24 9a       	sbi	0x04, 4	; 4
		RTOUCH_PORTM &= ~(RTOUCH_XM | RTOUCH_YM);//PORTB,pin5 high z, pin4 GND. 
     af8:	85 b1       	in	r24, 0x05	; 5
     afa:	8f 7c       	andi	r24, 0xCF	; 207
     afc:	85 b9       	out	0x05, r24	; 5
		RTOUCH_DDRP &= ~(RTOUCH_XP | RTOUCH_YP);//PORTA,pin6 pin7 as input
     afe:	81 b1       	in	r24, 0x01	; 1
     b00:	8f 73       	andi	r24, 0x3F	; 63
     b02:	81 b9       	out	0x01, r24	; 1
     b04:	08 c0       	rjmp	.+16     	; 0xb16 <_ZL10rTouchMode9Functions+0x32>
		RTOUCH_DDRM &= ~RTOUCH_XM;//pin5 input
		RTOUCH_DDRM |= RTOUCH_YM;//pin4 output
		RTOUCH_PORTM &= ~(RTOUCH_XM | RTOUCH_YM);//PORTB pin5 pin4 0 
		RTOUCH_DDRP &= ~RTOUCH_XP;//PORTA  pin6 input 
#endif
		RTOUCH_DDRP |= RTOUCH_YP;//on portA pin7 as output
     b06:	0f 9a       	sbi	0x01, 7	; 1
		RTOUCH_PORTP &= ~RTOUCH_XP;// on portA pin6 ADC 
     b08:	16 98       	cbi	0x02, 6	; 2
		RTOUCH_PORTP |= RTOUCH_YP;// on portA pin7 Vcc
     b0a:	17 9a       	sbi	0x02, 7	; 2
		//DIDR0 &= ~RTOUCH_YP;
		//DIDR0 |= RTOUCH_XP;
		break;
     b0c:	08 95       	ret
	case ReadX:
		RTOUCH_DDRM |= RTOUCH_XM;//PORTB pin5 output
     b0e:	25 9a       	sbi	0x04, 5	; 4
		RTOUCH_DDRM &= ~RTOUCH_YM;//PORTB pin4 input
     b10:	24 98       	cbi	0x04, 4	; 4
#ifdef RTOUCH_SAFE
		RTOUCH_PORTM &= ~(RTOUCH_XM | RTOUCH_YM);
#endif
		RTOUCH_DDRP |= RTOUCH_XP;//PORTA pin6 as output
     b12:	0e 9a       	sbi	0x01, 6	; 1
		RTOUCH_DDRP &= ~RTOUCH_YP;//PORTA pin7 as input
     b14:	0f 98       	cbi	0x01, 7	; 1
		RTOUCH_PORTP |= RTOUCH_XP;//PORTA pin6 Vcc
     b16:	16 9a       	sbi	0x02, 6	; 2
		RTOUCH_PORTP &= ~RTOUCH_YP;//PORTA pin7 input ADC
     b18:	17 98       	cbi	0x02, 7	; 2
     b1a:	08 95       	ret

00000b1c <_ZL12rTouchADCISRhj>:
	return true;
}

// Detection -> ReadY -> ReadX -> Detection
static void rTouchADCISR(uint8_t channel, uint16_t result)
{
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	eb 01       	movw	r28, r22
	//PINB |= _BV(7);
	if (channel == RTOUCH_YC) {
     b22:	86 30       	cpi	r24, 0x06	; 6
     b24:	51 f4       	brne	.+20     	; 0xb3a <_ZL12rTouchADCISRhj+0x1e>
		ts.postmp.y = result;
     b26:	70 93 76 01 	sts	0x0176, r23
     b2a:	60 93 75 01 	sts	0x0175, r22
		rTouchMode(ReadX);
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZL10rTouchMode9Functions>
		adc_request(RTOUCH_XC);
     b36:	87 e0       	ldi	r24, 0x07	; 7
     b38:	82 c0       	rjmp	.+260    	; 0xc3e <_ZL12rTouchADCISRhj+0x122>
	} else if (channel == RTOUCH_XC) {
     b3a:	87 30       	cpi	r24, 0x07	; 7
     b3c:	09 f0       	breq	.+2      	; 0xb40 <_ZL12rTouchADCISRhj+0x24>
     b3e:	8c c0       	rjmp	.+280    	; 0xc58 <_ZL12rTouchADCISRhj+0x13c>
		ts.postmp.x = result;
     b40:	70 93 74 01 	sts	0x0174, r23
     b44:	60 93 73 01 	sts	0x0173, r22
		rTouchMode(Detection);
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZL10rTouchMode9Functions>
		if (RTOUCH_DETECT()) {
     b50:	06 99       	sbic	0x00, 6	; 0
     b52:	79 c0       	rjmp	.+242    	; 0xc46 <_ZL12rTouchADCISRhj+0x12a>
			if (rTouchAverager(ts.postmp.x, ts.postmp.y))
     b54:	80 91 75 01 	lds	r24, 0x0175
     b58:	90 91 76 01 	lds	r25, 0x0176
	};
}

static bool rTouchAverager(uint16_t x, uint16_t y)
{
	if (!averager.level || abs(x - averager.x[averager.current]) + abs(y - averager.y[averager.current]) >= RTOUCH_DELTA) {
     b5c:	60 91 77 01 	lds	r22, 0x0177
     b60:	66 23       	and	r22, r22
     b62:	39 f1       	breq	.+78     	; 0xbb2 <_ZL12rTouchADCISRhj+0x96>
     b64:	70 91 78 01 	lds	r23, 0x0178
     b68:	e7 2f       	mov	r30, r23
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	df 01       	movw	r26, r30
     b6e:	aa 0f       	add	r26, r26
     b70:	bb 1f       	adc	r27, r27
     b72:	a7 58       	subi	r26, 0x87	; 135
     b74:	be 4f       	sbci	r27, 0xFE	; 254
     b76:	2d 91       	ld	r18, X+
     b78:	3c 91       	ld	r19, X
     b7a:	ae 01       	movw	r20, r28
     b7c:	42 1b       	sub	r20, r18
     b7e:	53 0b       	sbc	r21, r19
     b80:	57 ff       	sbrs	r21, 7
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <_ZL12rTouchADCISRhj+0x6e>
     b84:	51 95       	neg	r21
     b86:	41 95       	neg	r20
     b88:	51 09       	sbc	r21, r1
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	e7 56       	subi	r30, 0x67	; 103
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	20 81       	ld	r18, Z
     b94:	31 81       	ldd	r19, Z+1	; 0x01
     b96:	fc 01       	movw	r30, r24
     b98:	e2 1b       	sub	r30, r18
     b9a:	f3 0b       	sbc	r31, r19
     b9c:	9f 01       	movw	r18, r30
     b9e:	f7 ff       	sbrs	r31, 7
     ba0:	03 c0       	rjmp	.+6      	; 0xba8 <_ZL12rTouchADCISRhj+0x8c>
     ba2:	31 95       	neg	r19
     ba4:	21 95       	neg	r18
     ba6:	31 09       	sbc	r19, r1
     ba8:	24 0f       	add	r18, r20
     baa:	35 1f       	adc	r19, r21
     bac:	28 31       	cpi	r18, 0x18	; 24
     bae:	31 05       	cpc	r19, r1
     bb0:	74 f0       	brlt	.+28     	; 0xbce <_ZL12rTouchADCISRhj+0xb2>
		averager.level = 1;
     bb2:	21 e0       	ldi	r18, 0x01	; 1
     bb4:	20 93 77 01 	sts	0x0177, r18
		averager.current = 0;
     bb8:	10 92 78 01 	sts	0x0178, r1
		averager.x[0] = x;
     bbc:	d0 93 7a 01 	sts	0x017A, r29
     bc0:	c0 93 79 01 	sts	0x0179, r28
		averager.y[0] = y;
     bc4:	90 93 9a 01 	sts	0x019A, r25
     bc8:	80 93 99 01 	sts	0x0199, r24
     bcc:	33 c0       	rjmp	.+102    	; 0xc34 <_ZL12rTouchADCISRhj+0x118>
		return false;
	}
	if (averager.level < RTOUCH_AVERAGER) {
     bce:	60 31       	cpi	r22, 0x10	; 16
     bd0:	a8 f4       	brcc	.+42     	; 0xbfc <_ZL12rTouchADCISRhj+0xe0>
		averager.x[averager.level] = x;
     bd2:	e6 2f       	mov	r30, r22
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	df 01       	movw	r26, r30
     bd8:	aa 0f       	add	r26, r26
     bda:	bb 1f       	adc	r27, r27
     bdc:	a7 58       	subi	r26, 0x87	; 135
     bde:	be 4f       	sbci	r27, 0xFE	; 254
     be0:	cd 93       	st	X+, r28
     be2:	dc 93       	st	X, r29
		averager.y[averager.level] = y;
     be4:	ee 0f       	add	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	e7 56       	subi	r30, 0x67	; 103
     bea:	fe 4f       	sbci	r31, 0xFE	; 254
     bec:	91 83       	std	Z+1, r25	; 0x01
     bee:	80 83       	st	Z, r24
		averager.current = averager.level++;
     bf0:	60 93 78 01 	sts	0x0178, r22
     bf4:	6f 5f       	subi	r22, 0xFF	; 255
     bf6:	60 93 77 01 	sts	0x0177, r22
     bfa:	1c c0       	rjmp	.+56     	; 0xc34 <_ZL12rTouchADCISRhj+0x118>
		return false;
	}
	if (++averager.current == RTOUCH_AVERAGER)
     bfc:	27 2f       	mov	r18, r23
     bfe:	2f 5f       	subi	r18, 0xFF	; 255
     c00:	20 31       	cpi	r18, 0x10	; 16
     c02:	19 f0       	breq	.+6      	; 0xc0a <_ZL12rTouchADCISRhj+0xee>
     c04:	20 93 78 01 	sts	0x0178, r18
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <_ZL12rTouchADCISRhj+0xf2>
		averager.current = 0;
     c0a:	10 92 78 01 	sts	0x0178, r1
	averager.x[averager.current] = x;
     c0e:	e0 91 78 01 	lds	r30, 0x0178
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	df 01       	movw	r26, r30
     c16:	aa 0f       	add	r26, r26
     c18:	bb 1f       	adc	r27, r27
     c1a:	a7 58       	subi	r26, 0x87	; 135
     c1c:	be 4f       	sbci	r27, 0xFE	; 254
     c1e:	cd 93       	st	X+, r28
     c20:	dc 93       	st	X, r29
	averager.y[averager.current] = y;
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	e7 56       	subi	r30, 0x67	; 103
     c28:	fe 4f       	sbci	r31, 0xFE	; 254
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	80 83       	st	Z, r24
	} else if (channel == RTOUCH_XC) {
		ts.postmp.x = result;
		rTouchMode(Detection);
		if (RTOUCH_DETECT()) {
			if (rTouchAverager(ts.postmp.x, ts.postmp.y))
				ts.pressed = true;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	80 93 72 01 	sts	0x0172, r24
			rTouchMode(ReadY);
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZL10rTouchMode9Functions>
			adc_request(RTOUCH_YC);
     c3c:	86 e0       	ldi	r24, 0x06	; 6
			averager.level = 0;
			ts.pressed = false;
			pcint_enable(RTOUCH_PCMSK);
		}
	}
}
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
		rTouchMode(Detection);
		if (RTOUCH_DETECT()) {
			if (rTouchAverager(ts.postmp.x, ts.postmp.y))
				ts.pressed = true;
			rTouchMode(ReadY);
			adc_request(RTOUCH_YC);
     c42:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <adc_request>
		} else {
			averager.level = 0;
     c46:	10 92 77 01 	sts	0x0177, r1
			ts.pressed = false;
     c4a:	10 92 72 01 	sts	0x0172, r1
			pcint_enable(RTOUCH_PCMSK);
     c4e:	80 91 68 00 	lds	r24, 0x0068
     c52:	81 60       	ori	r24, 0x01	; 1
     c54:	80 93 68 00 	sts	0x0068, r24
		}
	}
}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <_ZN6rTouchC1EP5tft_t>:
} averager;

static inline void rTouchMode(Functions func);
static void rTouchADCISR(uint8_t channel, uint16_t result);

rTouch::rTouch(tft_t *tft)
     c5e:	fc 01       	movw	r30, r24
{
	this->tft = tft;
     c60:	74 a3       	std	Z+36, r23	; 0x24
     c62:	63 a3       	std	Z+35, r22	; 0x23
	calibrated = false;
     c64:	16 82       	std	Z+6, r1	; 0x06
	stat.prev.x = 0;
     c66:	13 82       	std	Z+3, r1	; 0x03
     c68:	12 82       	std	Z+2, r1	; 0x02
	stat.prev.y = 0;
     c6a:	15 82       	std	Z+5, r1	; 0x05
     c6c:	14 82       	std	Z+4, r1	; 0x04
	stat.moved = false;
     c6e:	11 82       	std	Z+1, r1	; 0x01
	stat.pressed = false;
     c70:	10 82       	st	Z, r1
     c72:	08 95       	ret

00000c74 <_ZN6rTouch4initEv>:
}

void rTouch::init(void)
{
	ts.pressed = false;
     c74:	10 92 72 01 	sts	0x0172, r1
	rTouchMode(Detection);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZL10rTouchMode9Functions>
	pcint_set(RTOUCH_PCMSK, RTOUCH_XP);
     c80:	60 e4       	ldi	r22, 0x40	; 64
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <pcint_set>
	pcint_enable(RTOUCH_PCMSK);
     c88:	80 91 68 00 	lds	r24, 0x0068
     c8c:	81 60       	ori	r24, 0x01	; 1
     c8e:	80 93 68 00 	sts	0x0068, r24
	adc_register_ISR(rTouchADCISR);
     c92:	8e e8       	ldi	r24, 0x8E	; 142
     c94:	95 e0       	ldi	r25, 0x05	; 5
     c96:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <adc_register_ISR>

	// First pressed detection
	if (RTOUCH_DETECT()) {
     c9a:	06 99       	sbic	0x00, 6	; 0
     c9c:	0c c0       	rjmp	.+24     	; 0xcb6 <_ZN6rTouch4initEv+0x42>
		pcint_disable(RTOUCH_PCMSK);
     c9e:	80 91 68 00 	lds	r24, 0x0068
     ca2:	8e 7f       	andi	r24, 0xFE	; 254
     ca4:	80 93 68 00 	sts	0x0068, r24
		rTouchMode(ReadY);
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZL10rTouchMode9Functions>
		adc_request(RTOUCH_YC);
     cb0:	86 e0       	ldi	r24, 0x06	; 6
     cb2:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <adc_request>
     cb6:	08 95       	ret

00000cb8 <_ZNK6rTouch14coordTranslateENS_7coord_tE>:
	}
}

const rTouch::coord_t rTouch::coordTranslate(coord_t pos) const
{
     cb8:	4f 92       	push	r4
     cba:	5f 92       	push	r5
     cbc:	6f 92       	push	r6
     cbe:	7f 92       	push	r7
     cc0:	8f 92       	push	r8
     cc2:	9f 92       	push	r9
     cc4:	af 92       	push	r10
     cc6:	bf 92       	push	r11
     cc8:	cf 92       	push	r12
     cca:	df 92       	push	r13
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	ec 01       	movw	r28, r24
	pos.x = (cal[0] * (int32_t)pos.x + \
		cal[1] * (int32_t)pos.y + cal[2]) / cal[6];
     cd6:	2b 01       	movw	r4, r22
     cd8:	66 24       	eor	r6, r6
     cda:	57 fc       	sbrc	r5, 7
     cdc:	60 94       	com	r6
     cde:	76 2c       	mov	r7, r6
     ce0:	8f 8c       	ldd	r8, Y+31	; 0x1f
     ce2:	98 a0       	ldd	r9, Y+32	; 0x20
     ce4:	a9 a0       	ldd	r10, Y+33	; 0x21
     ce6:	ba a0       	ldd	r11, Y+34	; 0x22
     ce8:	cf 80       	ldd	r12, Y+7	; 0x07
     cea:	d8 84       	ldd	r13, Y+8	; 0x08
     cec:	e9 84       	ldd	r14, Y+9	; 0x09
     cee:	fa 84       	ldd	r15, Y+10	; 0x0a
     cf0:	da 01       	movw	r26, r20
     cf2:	a7 01       	movw	r20, r14
     cf4:	96 01       	movw	r18, r12
     cf6:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__mulshisi3>
     cfa:	6b 01       	movw	r12, r22
     cfc:	7c 01       	movw	r14, r24
     cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
     d00:	7c 85       	ldd	r23, Y+12	; 0x0c
     d02:	8d 85       	ldd	r24, Y+13	; 0x0d
     d04:	9e 85       	ldd	r25, Y+14	; 0x0e
     d06:	a3 01       	movw	r20, r6
     d08:	92 01       	movw	r18, r4
     d0a:	0e 94 76 17 	call	0x2eec	; 0x2eec <__mulsi3>
     d0e:	c6 0e       	add	r12, r22
     d10:	d7 1e       	adc	r13, r23
     d12:	e8 1e       	adc	r14, r24
     d14:	f9 1e       	adc	r15, r25
     d16:	8f 85       	ldd	r24, Y+15	; 0x0f
     d18:	98 89       	ldd	r25, Y+16	; 0x10
     d1a:	a9 89       	ldd	r26, Y+17	; 0x11
     d1c:	ba 89       	ldd	r27, Y+18	; 0x12
     d1e:	c8 0e       	add	r12, r24
     d20:	d9 1e       	adc	r13, r25
     d22:	ea 1e       	adc	r14, r26
     d24:	fb 1e       	adc	r15, r27
     d26:	c7 01       	movw	r24, r14
     d28:	b6 01       	movw	r22, r12
     d2a:	a5 01       	movw	r20, r10
     d2c:	94 01       	movw	r18, r8
     d2e:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__divmodsi4>
     d32:	c3 2e       	mov	r12, r19
     d34:	f2 2e       	mov	r15, r18
     d36:	d2 2e       	mov	r13, r18
     d38:	e3 2e       	mov	r14, r19
	pos.y = (cal[3] * (int32_t)pos.y + \
		cal[4] * (int32_t)pos.y + cal[5]) / cal[6];
     d3a:	2b 89       	ldd	r18, Y+19	; 0x13
     d3c:	3c 89       	ldd	r19, Y+20	; 0x14
     d3e:	4d 89       	ldd	r20, Y+21	; 0x15
     d40:	5e 89       	ldd	r21, Y+22	; 0x16
     d42:	8f 89       	ldd	r24, Y+23	; 0x17
     d44:	98 8d       	ldd	r25, Y+24	; 0x18
     d46:	a9 8d       	ldd	r26, Y+25	; 0x19
     d48:	ba 8d       	ldd	r27, Y+26	; 0x1a
     d4a:	28 0f       	add	r18, r24
     d4c:	39 1f       	adc	r19, r25
     d4e:	4a 1f       	adc	r20, r26
     d50:	5b 1f       	adc	r21, r27
     d52:	c3 01       	movw	r24, r6
     d54:	b2 01       	movw	r22, r4
     d56:	0e 94 76 17 	call	0x2eec	; 0x2eec <__mulsi3>
     d5a:	4b 8c       	ldd	r4, Y+27	; 0x1b
     d5c:	5c 8c       	ldd	r5, Y+28	; 0x1c
     d5e:	6d 8c       	ldd	r6, Y+29	; 0x1d
     d60:	7e 8c       	ldd	r7, Y+30	; 0x1e
     d62:	64 0d       	add	r22, r4
     d64:	75 1d       	adc	r23, r5
     d66:	86 1d       	adc	r24, r6
     d68:	97 1d       	adc	r25, r7
     d6a:	a5 01       	movw	r20, r10
     d6c:	94 01       	movw	r18, r8
     d6e:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__divmodsi4>
#ifndef RTOUCH_SWAPXY
	if (tft->portrait()) {
     d72:	eb a1       	ldd	r30, Y+35	; 0x23
     d74:	fc a1       	ldd	r31, Y+36	; 0x24
	if (RTOUCH_DETECT()) {
		pcint_disable(RTOUCH_PCMSK);
		rTouchMode(ReadY);
		adc_request(RTOUCH_YC);
	}
}
     d76:	61 81       	ldd	r22, Z+1	; 0x01
	inline uint8_t orient(void) const {return d.orient;}
	inline void setBGLight(bool e) {_setBGLight(e);}
	inline void setTabSize(uint8_t t) {d.tabSize = t;}
	inline uint8_t tabSize(void) const {return d.tabSize;}
	inline bool flipped(void) const {return orient() == FlipPortrait || orient() == FlipLandscape;}
	inline bool portrait(void) const {return orient() == Portrait || orient() == FlipPortrait;}
     d78:	61 30       	cpi	r22, 0x01	; 1
     d7a:	39 f0       	breq	.+14     	; 0xd8a <_ZNK6rTouch14coordTranslateENS_7coord_tE+0xd2>
     d7c:	63 30       	cpi	r22, 0x03	; 3
     d7e:	29 f0       	breq	.+10     	; 0xd8a <_ZNK6rTouch14coordTranslateENS_7coord_tE+0xd2>
}

const rTouch::coord_t rTouch::coordTranslate(coord_t pos) const
{
	pos.x = (cal[0] * (int32_t)pos.x + \
		cal[1] * (int32_t)pos.y + cal[2]) / cal[6];
     d80:	8f 2d       	mov	r24, r15
     d82:	9c 2d       	mov	r25, r12
	void setOrient(uint8_t o);
	inline uint8_t orient(void) const {return d.orient;}
	inline void setBGLight(bool e) {_setBGLight(e);}
	inline void setTabSize(uint8_t t) {d.tabSize = t;}
	inline uint8_t tabSize(void) const {return d.tabSize;}
	inline bool flipped(void) const {return orient() == FlipPortrait || orient() == FlipLandscape;}
     d84:	62 30       	cpi	r22, 0x02	; 2
     d86:	a9 f4       	brne	.+42     	; 0xdb2 <_ZNK6rTouch14coordTranslateENS_7coord_tE+0xfa>
     d88:	08 c0       	rjmp	.+16     	; 0xd9a <_ZNK6rTouch14coordTranslateENS_7coord_tE+0xe2>
#else
	if (!tft->portrait()) {
#endif
		int16_t tmp = pos.x;
#ifndef RTOUCH_SWAPXY
		pos.x = tft->width() - pos.y;
     d8a:	87 81       	ldd	r24, Z+7	; 0x07
     d8c:	90 85       	ldd	r25, Z+8	; 0x08
     d8e:	82 1b       	sub	r24, r18
     d90:	93 0b       	sbc	r25, r19
		pos.y = tmp;
     d92:	2d 2d       	mov	r18, r13
     d94:	3e 2d       	mov	r19, r14
     d96:	63 30       	cpi	r22, 0x03	; 3
     d98:	a9 f7       	brne	.-22     	; 0xd84 <_ZNK6rTouch14coordTranslateENS_7coord_tE+0xcc>
		pos.x = pos.y;
		pos.y = tft->height() - tmp;
#endif
	}
	if (tft->flipped()) {
		pos.x = (int16_t)tft->width() - pos.x;
     d9a:	47 81       	ldd	r20, Z+7	; 0x07
     d9c:	50 85       	ldd	r21, Z+8	; 0x08
     d9e:	ba 01       	movw	r22, r20
     da0:	68 1b       	sub	r22, r24
     da2:	79 0b       	sbc	r23, r25
     da4:	cb 01       	movw	r24, r22
		pos.y = (int16_t)tft->height() - pos.y;
     da6:	41 85       	ldd	r20, Z+9	; 0x09
     da8:	52 85       	ldd	r21, Z+10	; 0x0a
     daa:	ba 01       	movw	r22, r20
     dac:	62 1b       	sub	r22, r18
     dae:	73 0b       	sbc	r23, r19
     db0:	9b 01       	movw	r18, r22
	}
	return pos;
}
     db2:	bc 01       	movw	r22, r24
     db4:	c9 01       	movw	r24, r18
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	df 90       	pop	r13
     dc0:	cf 90       	pop	r12
     dc2:	bf 90       	pop	r11
     dc4:	af 90       	pop	r10
     dc6:	9f 90       	pop	r9
     dc8:	8f 90       	pop	r8
     dca:	7f 90       	pop	r7
     dcc:	6f 90       	pop	r6
     dce:	5f 90       	pop	r5
     dd0:	4f 90       	pop	r4
     dd2:	08 95       	ret

00000dd4 <_ZN6rTouch8positionEv>:

const rTouch::coord_t rTouch::position(void)
{
     dd4:	cf 92       	push	r12
     dd6:	df 92       	push	r13
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	e9 e7       	ldi	r30, 0x79	; 121
     de2:	f1 e0       	ldi	r31, 0x01	; 1
	uint32_t x = 0, y = 0;
     de4:	00 e0       	ldi	r16, 0x00	; 0
     de6:	10 e0       	ldi	r17, 0x00	; 0
     de8:	98 01       	movw	r18, r16
     dea:	c1 2c       	mov	r12, r1
     dec:	d1 2c       	mov	r13, r1
     dee:	76 01       	movw	r14, r12
	for (uint8_t i = 0; i < RTOUCH_AVERAGER; i++) {
		x += averager.x[i];
     df0:	41 91       	ld	r20, Z+
     df2:	51 91       	ld	r21, Z+
     df4:	c4 0e       	add	r12, r20
     df6:	d5 1e       	adc	r13, r21
     df8:	e1 1c       	adc	r14, r1
     dfa:	f1 1c       	adc	r15, r1
		y += averager.y[i];
     dfc:	46 8d       	ldd	r20, Z+30	; 0x1e
     dfe:	57 8d       	ldd	r21, Z+31	; 0x1f
     e00:	04 0f       	add	r16, r20
     e02:	15 1f       	adc	r17, r21
     e04:	21 1d       	adc	r18, r1
     e06:	31 1d       	adc	r19, r1
}

const rTouch::coord_t rTouch::position(void)
{
	uint32_t x = 0, y = 0;
	for (uint8_t i = 0; i < RTOUCH_AVERAGER; i++) {
     e08:	41 e0       	ldi	r20, 0x01	; 1
     e0a:	e9 39       	cpi	r30, 0x99	; 153
     e0c:	f4 07       	cpc	r31, r20
     e0e:	81 f7       	brne	.-32     	; 0xdf0 <_ZN6rTouch8positionEv+0x1c>
		x += averager.x[i];
		y += averager.y[i];
	}
	coord_t res = {(int16_t)(x / RTOUCH_AVERAGER), (int16_t)(y / RTOUCH_AVERAGER)};
     e10:	44 e0       	ldi	r20, 0x04	; 4
     e12:	f6 94       	lsr	r15
     e14:	e7 94       	ror	r14
     e16:	d7 94       	ror	r13
     e18:	c7 94       	ror	r12
     e1a:	4a 95       	dec	r20
     e1c:	d1 f7       	brne	.-12     	; 0xe12 <_ZN6rTouch8positionEv+0x3e>
     e1e:	b6 01       	movw	r22, r12
     e20:	54 e0       	ldi	r21, 0x04	; 4
     e22:	36 95       	lsr	r19
     e24:	27 95       	ror	r18
     e26:	17 95       	ror	r17
     e28:	07 95       	ror	r16
     e2a:	5a 95       	dec	r21
     e2c:	d1 f7       	brne	.-12     	; 0xe22 <_ZN6rTouch8positionEv+0x4e>
	return calibrated ? coordTranslate(res) : res;
     e2e:	dc 01       	movw	r26, r24
     e30:	16 96       	adiw	r26, 0x06	; 6
     e32:	ec 91       	ld	r30, X
     e34:	ee 23       	and	r30, r30
     e36:	29 f0       	breq	.+10     	; 0xe42 <_ZN6rTouch8positionEv+0x6e>
     e38:	a6 01       	movw	r20, r12
     e3a:	b8 01       	movw	r22, r16
     e3c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZNK6rTouch14coordTranslateENS_7coord_tE>
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <_ZN6rTouch8positionEv+0x72>
     e42:	80 2f       	mov	r24, r16
     e44:	91 2f       	mov	r25, r17
}
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	08 95       	ret

00000e54 <_ZN6rTouch9drawCrossENS_7coord_tEj>:

void rTouch::drawCross(const coord_t pos, uint16_t c)
{
     e54:	4f 92       	push	r4
     e56:	5f 92       	push	r5
     e58:	6f 92       	push	r6
     e5a:	7f 92       	push	r7
     e5c:	af 92       	push	r10
     e5e:	bf 92       	push	r11
     e60:	cf 92       	push	r12
     e62:	df 92       	push	r13
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	ec 01       	movw	r28, r24
     e72:	2a 01       	movw	r4, r20
     e74:	3b 01       	movw	r6, r22
     e76:	ba 01       	movw	r22, r20
	tft->rectangle(pos.x - CALIB_SIZE, pos.y, CALIB_SIZE * 2, 1, c);
     e78:	6a 50       	subi	r22, 0x0A	; 10
     e7a:	71 09       	sbc	r23, r1
     e7c:	79 01       	movw	r14, r18
     e7e:	01 e0       	ldi	r16, 0x01	; 1
     e80:	10 e0       	ldi	r17, 0x00	; 0
     e82:	24 e1       	ldi	r18, 0x14	; 20
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	a3 01       	movw	r20, r6
     e88:	8b a1       	ldd	r24, Y+35	; 0x23
     e8a:	9c a1       	ldd	r25, Y+36	; 0x24
     e8c:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN5tft_t9rectangleEjjjjj>
	tft->rectangle(pos.x, pos.y - CALIB_SIZE, 1, CALIB_SIZE * 2, c);
     e90:	a3 01       	movw	r20, r6
     e92:	4a 50       	subi	r20, 0x0A	; 10
     e94:	51 09       	sbc	r21, r1
     e96:	04 e1       	ldi	r16, 0x14	; 20
     e98:	10 e0       	ldi	r17, 0x00	; 0
     e9a:	21 e0       	ldi	r18, 0x01	; 1
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	b2 01       	movw	r22, r4
     ea0:	8b a1       	ldd	r24, Y+35	; 0x23
     ea2:	9c a1       	ldd	r25, Y+36	; 0x24
     ea4:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN5tft_t9rectangleEjjjjj>
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	bf 90       	pop	r11
     eba:	af 90       	pop	r10
     ebc:	7f 90       	pop	r7
     ebe:	6f 90       	pop	r6
     ec0:	5f 90       	pop	r5
     ec2:	4f 90       	pop	r4
     ec4:	08 95       	ret

00000ec6 <_ZN6rTouch16calibrationPointEh>:

const rTouch::coord_t rTouch::calibrationPoint(const uint8_t index)
{
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	8c 01       	movw	r16, r24
     ed2:	f6 2e       	mov	r15, r22
     ed4:	dc 01       	movw	r26, r24
     ed6:	93 96       	adiw	r26, 0x23	; 35
     ed8:	ed 91       	ld	r30, X+
     eda:	fc 91       	ld	r31, X
     edc:	94 97       	sbiw	r26, 0x24	; 36
	coord_t pos;
	if (index == 0 || index == 2)
     ede:	66 23       	and	r22, r22
     ee0:	19 f0       	breq	.+6      	; 0xee8 <_ZN6rTouch16calibrationPointEh+0x22>
     ee2:	b2 e0       	ldi	r27, 0x02	; 2
     ee4:	6b 13       	cpse	r22, r27
     ee6:	0b c0       	rjmp	.+22     	; 0xefe <_ZN6rTouch16calibrationPointEh+0x38>
		pos.x = tft->width() * 0.2;
     ee8:	67 81       	ldd	r22, Z+7	; 0x07
     eea:	70 85       	ldd	r23, Z+8	; 0x08
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
     ef4:	2d ec       	ldi	r18, 0xCD	; 205
     ef6:	3c ec       	ldi	r19, 0xCC	; 204
     ef8:	4c e4       	ldi	r20, 0x4C	; 76
     efa:	5e e3       	ldi	r21, 0x3E	; 62
     efc:	10 c0       	rjmp	.+32     	; 0xf1e <_ZN6rTouch16calibrationPointEh+0x58>
	else if (index == 1 || index == 3)
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	68 17       	cp	r22, r24
     f02:	19 f0       	breq	.+6      	; 0xf0a <_ZN6rTouch16calibrationPointEh+0x44>
     f04:	a3 e0       	ldi	r26, 0x03	; 3
     f06:	6a 13       	cpse	r22, r26
     f08:	10 c0       	rjmp	.+32     	; 0xf2a <_ZN6rTouch16calibrationPointEh+0x64>
		pos.x = tft->width() * 0.8;
     f0a:	67 81       	ldd	r22, Z+7	; 0x07
     f0c:	70 85       	ldd	r23, Z+8	; 0x08
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
     f16:	2d ec       	ldi	r18, 0xCD	; 205
     f18:	3c ec       	ldi	r19, 0xCC	; 204
     f1a:	4c e4       	ldi	r20, 0x4C	; 76
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
     f22:	0e 94 42 13 	call	0x2684	; 0x2684 <__fixsfsi>
     f26:	eb 01       	movw	r28, r22
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <_ZN6rTouch16calibrationPointEh+0x6c>
	else
		pos.x = tft->width() / 2;
     f2a:	c7 81       	ldd	r28, Z+7	; 0x07
     f2c:	d0 85       	ldd	r29, Z+8	; 0x08
     f2e:	d6 95       	lsr	r29
     f30:	c7 95       	ror	r28
     f32:	d8 01       	movw	r26, r16
     f34:	93 96       	adiw	r26, 0x23	; 35
     f36:	ed 91       	ld	r30, X+
     f38:	fc 91       	ld	r31, X
     f3a:	94 97       	sbiw	r26, 0x24	; 36
	if (index == 0 || index == 1)
     f3c:	b1 e0       	ldi	r27, 0x01	; 1
     f3e:	bf 15       	cp	r27, r15
     f40:	58 f0       	brcs	.+22     	; 0xf58 <_ZN6rTouch16calibrationPointEh+0x92>
		pos.y = tft->height() * 0.2;
     f42:	61 85       	ldd	r22, Z+9	; 0x09
     f44:	72 85       	ldd	r23, Z+10	; 0x0a
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
     f4e:	2d ec       	ldi	r18, 0xCD	; 205
     f50:	3c ec       	ldi	r19, 0xCC	; 204
     f52:	4c e4       	ldi	r20, 0x4C	; 76
     f54:	5e e3       	ldi	r21, 0x3E	; 62
     f56:	0e c0       	rjmp	.+28     	; 0xf74 <_ZN6rTouch16calibrationPointEh+0xae>
	else if (index == 2 || index == 3)
     f58:	8f 2d       	mov	r24, r15
     f5a:	82 50       	subi	r24, 0x02	; 2
     f5c:	82 30       	cpi	r24, 0x02	; 2
     f5e:	80 f4       	brcc	.+32     	; 0xf80 <_ZN6rTouch16calibrationPointEh+0xba>
		pos.y = tft->height() * 0.8;
     f60:	61 85       	ldd	r22, Z+9	; 0x09
     f62:	72 85       	ldd	r23, Z+10	; 0x0a
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
     f6c:	2d ec       	ldi	r18, 0xCD	; 205
     f6e:	3c ec       	ldi	r19, 0xCC	; 204
     f70:	4c e4       	ldi	r20, 0x4C	; 76
     f72:	5f e3       	ldi	r21, 0x3F	; 63
     f74:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
     f78:	0e 94 42 13 	call	0x2684	; 0x2684 <__fixsfsi>
     f7c:	9b 01       	movw	r18, r22
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <_ZN6rTouch16calibrationPointEh+0xc2>
	else
		pos.y = tft->height() / 2;
     f80:	21 85       	ldd	r18, Z+9	; 0x09
     f82:	32 85       	ldd	r19, Z+10	; 0x0a
     f84:	36 95       	lsr	r19
     f86:	27 95       	ror	r18
	return pos;
}
     f88:	be 01       	movw	r22, r28
     f8a:	c9 01       	movw	r24, r18
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	08 95       	ret

00000f98 <_ZN6rTouch7pressedEv>:

bool rTouch::pressed(void)
{
	return ts.pressed;
     f98:	80 91 72 01 	lds	r24, 0x0172
}
     f9c:	08 95       	ret

00000f9e <_ZN6rTouch12waitForPressEv>:
	return pos;
}

bool rTouch::pressed(void)
{
	return ts.pressed;
     f9e:	20 91 72 01 	lds	r18, 0x0172
}

const rTouch::coord_t rTouch::waitForPress(void)
{
	while (!pressed());
     fa2:	22 23       	and	r18, r18
     fa4:	e1 f3       	breq	.-8      	; 0xf9e <_ZN6rTouch12waitForPressEv>
	return pos;
}

bool rTouch::pressed(void)
{
	return ts.pressed;
     fa6:	20 91 72 01 	lds	r18, 0x0172
}

const rTouch::coord_t rTouch::waitForPress(void)
{
	while (!pressed());
	while (pressed());
     faa:	21 11       	cpse	r18, r1
     fac:	fc cf       	rjmp	.-8      	; 0xfa6 <_ZN6rTouch12waitForPressEv+0x8>
	return position();
     fae:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN6rTouch8positionEv>
}
     fb2:	08 95       	ret

00000fb4 <_ZN6rTouch6statusEv>:

rTouch::Status rTouch::status(void)
{
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	ec 01       	movw	r28, r24
	return pos;
}

bool rTouch::pressed(void)
{
	return ts.pressed;
     fba:	80 91 72 01 	lds	r24, 0x0172
	return position();
}

rTouch::Status rTouch::status(void)
{
	if (!pressed()) {
     fbe:	81 11       	cpse	r24, r1
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <_ZN6rTouch6statusEv+0x16>
		stat.pressed = false;
     fc2:	18 82       	st	Y, r1
		return Idle;
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	30 c0       	rjmp	.+96     	; 0x102a <_ZN6rTouch6statusEv+0x76>
	}
	coord_t pos = position();
     fca:	ce 01       	movw	r24, r28
     fcc:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN6rTouch8positionEv>
     fd0:	fb 01       	movw	r30, r22
     fd2:	ac 01       	movw	r20, r24
	if (!stat.pressed) {
     fd4:	28 81       	ld	r18, Y
     fd6:	21 11       	cpse	r18, r1
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <_ZN6rTouch6statusEv+0x36>
		stat.prev.x = pos.x;
     fda:	7b 83       	std	Y+3, r23	; 0x03
     fdc:	6a 83       	std	Y+2, r22	; 0x02
		stat.prev.y = pos.y;
     fde:	9d 83       	std	Y+5, r25	; 0x05
     fe0:	8c 83       	std	Y+4, r24	; 0x04
		stat.moved = false;
     fe2:	19 82       	std	Y+1, r1	; 0x01
		stat.pressed = true;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	88 83       	st	Y, r24
     fe8:	1e c0       	rjmp	.+60     	; 0x1026 <_ZN6rTouch6statusEv+0x72>
		return Pressed;
	}
	if (!stat.moved && abs(stat.prev.x - pos.x) + abs(stat.prev.y - pos.y) < RTOUCH_MOVETH)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	81 11       	cpse	r24, r1
     fee:	16 c0       	rjmp	.+44     	; 0x101c <_ZN6rTouch6statusEv+0x68>
     ff0:	2a 81       	ldd	r18, Y+2	; 0x02
     ff2:	3b 81       	ldd	r19, Y+3	; 0x03
     ff4:	2e 1b       	sub	r18, r30
     ff6:	3f 0b       	sbc	r19, r31
     ff8:	37 ff       	sbrs	r19, 7
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <_ZN6rTouch6statusEv+0x4e>
     ffc:	31 95       	neg	r19
     ffe:	21 95       	neg	r18
    1000:	31 09       	sbc	r19, r1
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	84 1b       	sub	r24, r20
    1008:	95 0b       	sbc	r25, r21
    100a:	97 ff       	sbrs	r25, 7
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <_ZN6rTouch6statusEv+0x60>
    100e:	91 95       	neg	r25
    1010:	81 95       	neg	r24
    1012:	91 09       	sbc	r25, r1
    1014:	82 0f       	add	r24, r18
    1016:	93 1f       	adc	r25, r19
    1018:	40 97       	sbiw	r24, 0x10	; 16
    101a:	2c f0       	brlt	.+10     	; 0x1026 <_ZN6rTouch6statusEv+0x72>
		return Pressed;
	stat.moved = true;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	89 83       	std	Y+1, r24	; 0x01
	return Moved;
    1020:	22 e0       	ldi	r18, 0x02	; 2
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	02 c0       	rjmp	.+4      	; 0x102a <_ZN6rTouch6statusEv+0x76>
		stat.moved = false;
		stat.pressed = true;
		return Pressed;
	}
	if (!stat.moved && abs(stat.prev.x - pos.x) + abs(stat.prev.y - pos.y) < RTOUCH_MOVETH)
		return Pressed;
    1026:	21 e0       	ldi	r18, 0x01	; 1
    1028:	30 e0       	ldi	r19, 0x00	; 0
	stat.moved = true;
	return Moved;
}
    102a:	c9 01       	movw	r24, r18
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <_ZN6rTouch9calibrateEb>:

void rTouch::calibrate(bool reset)
{
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	c4 54       	subi	r28, 0x44	; 68
    104c:	d1 09       	sbc	r29, r1
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	8c 01       	movw	r16, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    105a:	87 e9       	ldi	r24, 0x97	; 151
    105c:	9a e3       	ldi	r25, 0x3A	; 58
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <_ZN6rTouch9calibrateEb+0x2c>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <_ZN6rTouch9calibrateEb+0x32>
    1064:	00 00       	nop
	_delay_ms(5);
	if (!reset && !eeprom_first() && !pressed()) {
    1066:	61 11       	cpse	r22, r1
    1068:	0a c1       	rjmp	.+532    	; 0x127e <__stack+0x17f>
    106a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <eeprom_first>
    106e:	81 11       	cpse	r24, r1
    1070:	06 c1       	rjmp	.+524    	; 0x127e <__stack+0x17f>
	return pos;
}

bool rTouch::pressed(void)
{
	return ts.pressed;
    1072:	80 91 72 01 	lds	r24, 0x0172
}

void rTouch::calibrate(bool reset)
{
	_delay_ms(5);
	if (!reset && !eeprom_first() && !pressed()) {
    1076:	81 11       	cpse	r24, r1
    1078:	02 c1       	rjmp	.+516    	; 0x127e <__stack+0x17f>
    107a:	f4 c0       	rjmp	.+488    	; 0x1264 <__stack+0x165>
	if (RTOUCH_DETECT()) {
		pcint_disable(RTOUCH_PCMSK);
		rTouchMode(ReadY);
		adc_request(RTOUCH_YC);
	}
}
    107c:	19 96       	adiw	r26, 0x09	; 9
    107e:	ad 90       	ld	r10, X+
    1080:	bc 90       	ld	r11, X
    1082:	1a 97       	sbiw	r26, 0x0a	; 10
    1084:	09 c0       	rjmp	.+18     	; 0x1098 <_ZN6rTouch9calibrateEb+0x66>
	uint16_t x = width(), y;
	all();
	start();
	while (x--) {
		y = height();
		while (y--) {
    1086:	b1 e0       	ldi	r27, 0x01	; 1
    1088:	ab 1a       	sub	r10, r27
    108a:	b1 08       	sbc	r11, r1
			data(ch);
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
			data(cl);
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
	uint16_t x = width(), y;
	all();
	start();
	while (x--) {
		y = height();
		while (y--) {
    1098:	a1 14       	cp	r10, r1
    109a:	b1 04       	cpc	r11, r1
    109c:	a1 f7       	brne	.-24     	; 0x1086 <_ZN6rTouch9calibrateEb+0x54>
    109e:	e1 e0       	ldi	r30, 0x01	; 1
    10a0:	ce 1a       	sub	r12, r30
    10a2:	d1 08       	sbc	r13, r1
    10a4:	d7 01       	movw	r26, r14
{
	uint8_t ch = clr / 0x0100, cl = clr % 0x0100;
	uint16_t x = width(), y;
	all();
	start();
	while (x--) {
    10a6:	c1 14       	cp	r12, r1
    10a8:	d1 04       	cpc	r13, r1
    10aa:	41 f7       	brne	.-48     	; 0x107c <_ZN6rTouch9calibrateEb+0x4a>
	tft_t(void);

	inline class tft_t& operator<<(const char c);
	inline class tft_t& operator<<(const char *str);

	inline void setX(uint16_t x) {d.x = x;}
    10ac:	14 96       	adiw	r26, 0x04	; 4
    10ae:	1c 92       	st	X, r1
    10b0:	1e 92       	st	-X, r1
    10b2:	13 97       	sbiw	r26, 0x03	; 3
	inline void setY(uint16_t y) {d.y = y;}
    10b4:	16 96       	adiw	r26, 0x06	; 6
    10b6:	1c 92       	st	X, r1
    10b8:	1e 92       	st	-X, r1
    10ba:	15 97       	sbiw	r26, 0x05	; 5
		return;
	}
	tft->setBackground(0x0000);
	tft->setForeground(0x667F);
	tft->clean();
	tft->setZoom(2);
    10bc:	d8 01       	movw	r26, r16
    10be:	93 96       	adiw	r26, 0x23	; 35
    10c0:	ed 91       	ld	r30, X+
    10c2:	fc 91       	ld	r31, X
    10c4:	94 97       	sbiw	r26, 0x24	; 36
	inline void setXY(uint16_t x, uint16_t y) {setX(x); setY(y);}
	inline uint16_t x(void) const {return d.x;}
	inline uint16_t y(void) const {return d.y;}
	inline uint16_t width(void) const {return d.w;}
	inline uint16_t height(void) const {return d.h;}
	inline void setZoom(const uint8_t zoom) {d.zoom = zoom;}
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	80 83       	st	Z, r24
	uint8_t orient = tft->orient();
    10ca:	93 96       	adiw	r26, 0x23	; 35
    10cc:	ed 91       	ld	r30, X+
    10ce:	fc 91       	ld	r31, X
    10d0:	94 97       	sbiw	r26, 0x24	; 36
	if (RTOUCH_DETECT()) {
		pcint_disable(RTOUCH_PCMSK);
		rTouchMode(ReadY);
		adc_request(RTOUCH_YC);
	}
}
    10d2:	b1 80       	ldd	r11, Z+1	; 0x01
	tft->setForeground(0x667F);
	tft->clean();
	tft->setZoom(2);
	uint8_t orient = tft->orient();
	tft->setXY((tft->width() - FONT_WIDTH * tft->zoom() * 11) / 2, \
		   (tft->height() - FONT_HEIGHT * tft->zoom() ) / 3);
    10d4:	20 81       	ld	r18, Z
    10d6:	81 85       	ldd	r24, Z+9	; 0x09
    10d8:	92 85       	ldd	r25, Z+10	; 0x0a
    10da:	b8 e0       	ldi	r27, 0x08	; 8
    10dc:	2b 9f       	mul	r18, r27
    10de:	80 19       	sub	r24, r0
    10e0:	91 09       	sbc	r25, r1
    10e2:	11 24       	eor	r1, r1
    10e4:	63 e0       	ldi	r22, 0x03	; 3
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__udivmodhi4>
    10ec:	87 81       	ldd	r24, Z+7	; 0x07
    10ee:	90 85       	ldd	r25, Z+8	; 0x08
    10f0:	32 e4       	ldi	r19, 0x42	; 66
    10f2:	23 9f       	mul	r18, r19
    10f4:	80 19       	sub	r24, r0
    10f6:	91 09       	sbc	r25, r1
    10f8:	11 24       	eor	r1, r1
    10fa:	96 95       	lsr	r25
    10fc:	87 95       	ror	r24
	tft_t(void);

	inline class tft_t& operator<<(const char c);
	inline class tft_t& operator<<(const char *str);

	inline void setX(uint16_t x) {d.x = x;}
    10fe:	94 83       	std	Z+4, r25	; 0x04
    1100:	83 83       	std	Z+3, r24	; 0x03
	inline void setY(uint16_t y) {d.y = y;}
    1102:	65 83       	std	Z+5, r22	; 0x05
    1104:	76 83       	std	Z+6, r23	; 0x06
	return *this;
}

inline class tft_t& tft_t::operator<<(const char *str)
{
	putString(str);
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	6d e2       	ldi	r22, 0x2D	; 45
    110a:	71 e0       	ldi	r23, 0x01	; 1
    110c:	cf 01       	movw	r24, r30
    110e:	0e 94 df 04 	call	0x9be	; 0x9be <_ZN5tft_t9putStringEPKcb>
	(*tft) << "Calibration";
#ifndef RTOUCH_SWAPXY
	tft->setOrient(tft_t::Landscape);
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	d8 01       	movw	r26, r16
    1116:	93 96       	adiw	r26, 0x23	; 35
    1118:	8d 91       	ld	r24, X+
    111a:	9c 91       	ld	r25, X
    111c:	94 97       	sbiw	r26, 0x24	; 36
    111e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN5tft_t9setOrientEh>
#else
	tft->setOrient(tft_t::Portrait);
#endif

	calibration caldata;
	calibrated = false;
    1122:	f8 01       	movw	r30, r16
    1124:	16 82       	std	Z+6, r1	; 0x06
	return pos;
}

bool rTouch::pressed(void)
{
	return ts.pressed;
    1126:	80 91 72 01 	lds	r24, 0x0172
	tft->setOrient(tft_t::Portrait);
#endif

	calibration caldata;
	calibrated = false;
	while (pressed());
    112a:	81 11       	cpse	r24, r1
    112c:	fc cf       	rjmp	.-8      	; 0x1126 <__stack+0x27>
    112e:	a1 2c       	mov	r10, r1
    1130:	3f c0       	rjmp	.+126    	; 0x11b0 <__stack+0xb1>
recalibrate:
	for (uint8_t i = 0; i < 5; i++) {
		const coord_t pos = calibrationPoint(i);
    1132:	6a 2d       	mov	r22, r10
    1134:	c8 01       	movw	r24, r16
    1136:	0e 94 63 07 	call	0xec6	; 0xec6 <_ZN6rTouch16calibrationPointEh>
    113a:	6b 01       	movw	r12, r22
    113c:	7c 01       	movw	r14, r24
		drawCross(pos, 0xFFFF);
    113e:	2f ef       	ldi	r18, 0xFF	; 255
    1140:	3f ef       	ldi	r19, 0xFF	; 255
    1142:	ab 01       	movw	r20, r22
    1144:	bc 01       	movw	r22, r24
    1146:	c8 01       	movw	r24, r16
    1148:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN6rTouch9drawCrossENS_7coord_tEj>
		const coord_t ts = waitForPress();
    114c:	c8 01       	movw	r24, r16
    114e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <_ZN6rTouch12waitForPressEv>
		caldata.x[i] = ts.x;
    1152:	ea 2d       	mov	r30, r10
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	df 01       	movw	r26, r30
    1158:	aa 0f       	add	r26, r26
    115a:	bb 1f       	adc	r27, r27
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	2c 0f       	add	r18, r28
    1162:	3d 1f       	adc	r19, r29
    1164:	a2 0f       	add	r26, r18
    1166:	b3 1f       	adc	r27, r19
    1168:	6d 93       	st	X+, r22
    116a:	7c 93       	st	X, r23
		caldata.xfb[i] = pos.x;
    116c:	df 01       	movw	r26, r30
    116e:	15 96       	adiw	r26, 0x05	; 5
    1170:	aa 0f       	add	r26, r26
    1172:	bb 1f       	adc	r27, r27
    1174:	a2 0f       	add	r26, r18
    1176:	b3 1f       	adc	r27, r19
    1178:	cd 92       	st	X+, r12
    117a:	dc 92       	st	X, r13
		caldata.y[i] = ts.y;
    117c:	df 01       	movw	r26, r30
    117e:	1a 96       	adiw	r26, 0x0a	; 10
    1180:	aa 0f       	add	r26, r26
    1182:	bb 1f       	adc	r27, r27
    1184:	a2 0f       	add	r26, r18
    1186:	b3 1f       	adc	r27, r19
    1188:	8d 93       	st	X+, r24
    118a:	9c 93       	st	X, r25
		caldata.yfb[i] = pos.y;
    118c:	3f 96       	adiw	r30, 0x0f	; 15
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	e2 0f       	add	r30, r18
    1194:	f3 1f       	adc	r31, r19
    1196:	f1 82       	std	Z+1, r15	; 0x01
    1198:	e0 82       	st	Z, r14
		drawCross(pos, 0x0000);
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	b7 01       	movw	r22, r14
    11a0:	a6 01       	movw	r20, r12
    11a2:	c8 01       	movw	r24, r16
    11a4:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN6rTouch9drawCrossENS_7coord_tEj>

	calibration caldata;
	calibrated = false;
	while (pressed());
recalibrate:
	for (uint8_t i = 0; i < 5; i++) {
    11a8:	a3 94       	inc	r10
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <__stack+0xb1>
    11ac:	a1 2c       	mov	r10, r1
    11ae:	c1 cf       	rjmp	.-126    	; 0x1132 <__stack+0x33>
    11b0:	34 e0       	ldi	r19, 0x04	; 4
    11b2:	3a 15       	cp	r19, r10
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <__stack+0xb9>
    11b6:	bd cf       	rjmp	.-134    	; 0x1132 <__stack+0x33>
		caldata.y[i] = ts.y;
		caldata.yfb[i] = pos.y;
		drawCross(pos, 0x0000);
	}

	if (!perform_calibration(&caldata))
    11b8:	ce 01       	movw	r24, r28
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	0e 94 b1 09 	call	0x1362	; 0x1362 <perform_calibration>
    11c0:	88 23       	and	r24, r24
    11c2:	a1 f3       	breq	.-24     	; 0x11ac <__stack+0xad>
		goto recalibrate;

	tft->setOrient(orient);
    11c4:	6b 2d       	mov	r22, r11
    11c6:	d8 01       	movw	r26, r16
    11c8:	93 96       	adiw	r26, 0x23	; 35
    11ca:	8d 91       	ld	r24, X+
    11cc:	9c 91       	ld	r25, X
    11ce:	94 97       	sbiw	r26, 0x24	; 36
    11d0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN5tft_t9setOrientEh>

	cal[0] = caldata.a[1];	// xscale
    11d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    11d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    11d8:	af a5       	ldd	r26, Y+47	; 0x2f
    11da:	b8 a9       	ldd	r27, Y+48	; 0x30
    11dc:	f8 01       	movw	r30, r16
    11de:	87 83       	std	Z+7, r24	; 0x07
    11e0:	90 87       	std	Z+8, r25	; 0x08
    11e2:	a1 87       	std	Z+9, r26	; 0x09
    11e4:	b2 87       	std	Z+10, r27	; 0x0a
	cal[1] = caldata.a[2];	// xymix
    11e6:	89 a9       	ldd	r24, Y+49	; 0x31
    11e8:	9a a9       	ldd	r25, Y+50	; 0x32
    11ea:	ab a9       	ldd	r26, Y+51	; 0x33
    11ec:	bc a9       	ldd	r27, Y+52	; 0x34
    11ee:	83 87       	std	Z+11, r24	; 0x0b
    11f0:	94 87       	std	Z+12, r25	; 0x0c
    11f2:	a5 87       	std	Z+13, r26	; 0x0d
    11f4:	b6 87       	std	Z+14, r27	; 0x0e
	cal[2] = caldata.a[0];	// xoffset
    11f6:	89 a5       	ldd	r24, Y+41	; 0x29
    11f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    11fa:	ab a5       	ldd	r26, Y+43	; 0x2b
    11fc:	bc a5       	ldd	r27, Y+44	; 0x2c
    11fe:	87 87       	std	Z+15, r24	; 0x0f
    1200:	90 8b       	std	Z+16, r25	; 0x10
    1202:	a1 8b       	std	Z+17, r26	; 0x11
    1204:	b2 8b       	std	Z+18, r27	; 0x12
	cal[3] = caldata.a[4];	// yxmix
    1206:	89 ad       	ldd	r24, Y+57	; 0x39
    1208:	9a ad       	ldd	r25, Y+58	; 0x3a
    120a:	ab ad       	ldd	r26, Y+59	; 0x3b
    120c:	bc ad       	ldd	r27, Y+60	; 0x3c
    120e:	83 8b       	std	Z+19, r24	; 0x13
    1210:	94 8b       	std	Z+20, r25	; 0x14
    1212:	a5 8b       	std	Z+21, r26	; 0x15
    1214:	b6 8b       	std	Z+22, r27	; 0x16
	cal[4] = caldata.a[5];	// yscale
    1216:	21 96       	adiw	r28, 0x01	; 1
    1218:	8c ad       	ldd	r24, Y+60	; 0x3c
    121a:	9d ad       	ldd	r25, Y+61	; 0x3d
    121c:	ae ad       	ldd	r26, Y+62	; 0x3e
    121e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1220:	21 97       	sbiw	r28, 0x01	; 1
    1222:	87 8b       	std	Z+23, r24	; 0x17
    1224:	90 8f       	std	Z+24, r25	; 0x18
    1226:	a1 8f       	std	Z+25, r26	; 0x19
    1228:	b2 8f       	std	Z+26, r27	; 0x1a
	cal[5] = caldata.a[3];	// yoffset
    122a:	8d a9       	ldd	r24, Y+53	; 0x35
    122c:	9e a9       	ldd	r25, Y+54	; 0x36
    122e:	af a9       	ldd	r26, Y+55	; 0x37
    1230:	b8 ad       	ldd	r27, Y+56	; 0x38
    1232:	83 8f       	std	Z+27, r24	; 0x1b
    1234:	94 8f       	std	Z+28, r25	; 0x1c
    1236:	a5 8f       	std	Z+29, r26	; 0x1d
    1238:	b6 8f       	std	Z+30, r27	; 0x1e
	cal[6] = caldata.a[6];	// scale
    123a:	25 96       	adiw	r28, 0x05	; 5
    123c:	8c ad       	ldd	r24, Y+60	; 0x3c
    123e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1240:	ae ad       	ldd	r26, Y+62	; 0x3e
    1242:	bf ad       	ldd	r27, Y+63	; 0x3f
    1244:	25 97       	sbiw	r28, 0x05	; 5
    1246:	87 8f       	std	Z+31, r24	; 0x1f
    1248:	90 a3       	std	Z+32, r25	; 0x20
    124a:	a1 a3       	std	Z+33, r26	; 0x21
    124c:	b2 a3       	std	Z+34, r27	; 0x22
	calibrated = true;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	86 83       	std	Z+6, r24	; 0x06

	eeprom_update_block(cal, NVcal, sizeof(NVcal));
    1252:	4c e1       	ldi	r20, 0x1C	; 28
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	c8 01       	movw	r24, r16
    125c:	07 96       	adiw	r24, 0x07	; 7
    125e:	0e 94 18 1c 	call	0x3830	; 0x3830 <__eeupd_block_m644p>
    1262:	3d c0       	rjmp	.+122    	; 0x12de <__stack+0x1df>

void rTouch::calibrate(bool reset)
{
	_delay_ms(5);
	if (!reset && !eeprom_first() && !pressed()) {
		eeprom_read_block(cal, NVcal, sizeof(NVcal));
    1264:	4c e1       	ldi	r20, 0x1C	; 28
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	c8 01       	movw	r24, r16
    126e:	07 96       	adiw	r24, 0x07	; 7
    1270:	0e 94 00 1c 	call	0x3800	; 0x3800 <__eerd_block_m644p>
		calibrated = true;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	d8 01       	movw	r26, r16
    1278:	16 96       	adiw	r26, 0x06	; 6
    127a:	8c 93       	st	X, r24
    127c:	30 c0       	rjmp	.+96     	; 0x12de <__stack+0x1df>
		return;
	}
	tft->setBackground(0x0000);
    127e:	f8 01       	movw	r30, r16
    1280:	e3 a0       	ldd	r14, Z+35	; 0x23
    1282:	f4 a0       	ldd	r15, Z+36	; 0x24
	inline uint16_t width(void) const {return d.w;}
	inline uint16_t height(void) const {return d.h;}
	inline void setZoom(const uint8_t zoom) {d.zoom = zoom;}
	inline uint8_t zoom(void) const {return d.zoom;}
	inline void setForeground(uint16_t c) {d.fgc = c;}
	inline void setBackground(uint16_t c) {d.bgc = c;}
    1284:	d7 01       	movw	r26, r14
    1286:	1e 96       	adiw	r26, 0x0e	; 14
    1288:	1c 92       	st	X, r1
    128a:	1e 92       	st	-X, r1
    128c:	1d 97       	sbiw	r26, 0x0d	; 13
	inline uint16_t y(void) const {return d.y;}
	inline uint16_t width(void) const {return d.w;}
	inline uint16_t height(void) const {return d.h;}
	inline void setZoom(const uint8_t zoom) {d.zoom = zoom;}
	inline uint8_t zoom(void) const {return d.zoom;}
	inline void setForeground(uint16_t c) {d.fgc = c;}
    128e:	8f e7       	ldi	r24, 0x7F	; 127
    1290:	96 e6       	ldi	r25, 0x66	; 102
    1292:	1c 96       	adiw	r26, 0x0c	; 12
    1294:	9c 93       	st	X, r25
    1296:	8e 93       	st	-X, r24
    1298:	1b 97       	sbiw	r26, 0x0b	; 11
	if (RTOUCH_DETECT()) {
		pcint_disable(RTOUCH_PCMSK);
		rTouchMode(ReadY);
		adc_request(RTOUCH_YC);
	}
}
    129a:	17 96       	adiw	r26, 0x07	; 7
    129c:	cd 90       	ld	r12, X+
    129e:	dc 90       	ld	r13, X
    12a0:	18 97       	sbiw	r26, 0x08	; 8
    12a2:	19 96       	adiw	r26, 0x09	; 9
    12a4:	ad 90       	ld	r10, X+
    12a6:	bc 90       	ld	r11, X
    12a8:	1a 97       	sbiw	r26, 0x0a	; 10
	}
}

inline void tft_t::area(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
	cmd(0x2A);			// Column Address Set
    12aa:	8a e2       	ldi	r24, 0x2A	; 42
    12ac:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	write16(x);
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
	write16(x + w - 1);
    12b8:	c6 01       	movw	r24, r12
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
	cmd(0x2B);			// Page Address Set
    12c0:	8b e2       	ldi	r24, 0x2B	; 43
    12c2:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	write16(y);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
	write16(y + h - 1);
    12ce:	c5 01       	movw	r24, r10
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
	inline void point(uint16_t x, uint16_t y, uint16_t c);
	inline void shiftUp(const uint16_t l);

	inline void area(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
	inline void all(void) {area(0, 0, width(), height());}
	static inline void start(void) {cmd(0x2C);}	// Memory write
    12d6:	8c e2       	ldi	r24, 0x2C	; 44
    12d8:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
    12dc:	e3 ce       	rjmp	.-570    	; 0x10a4 <_ZN6rTouch9calibrateEb+0x72>
	cal[5] = caldata.a[3];	// yoffset
	cal[6] = caldata.a[6];	// scale
	calibrated = true;

	eeprom_update_block(cal, NVcal, sizeof(NVcal));
}
    12de:	cc 5b       	subi	r28, 0xBC	; 188
    12e0:	df 4f       	sbci	r29, 0xFF	; 255
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	df 90       	pop	r13
    12fa:	cf 90       	pop	r12
    12fc:	bf 90       	pop	r11
    12fe:	af 90       	pop	r10
    1300:	08 95       	ret

00001302 <__vector_4>:
		}
	}
}

ISR(RTOUCH_PCMSKV)
{
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	0f 92       	push	r0
    130a:	11 24       	eor	r1, r1
    130c:	2f 93       	push	r18
    130e:	3f 93       	push	r19
    1310:	4f 93       	push	r20
    1312:	5f 93       	push	r21
    1314:	6f 93       	push	r22
    1316:	7f 93       	push	r23
    1318:	8f 93       	push	r24
    131a:	9f 93       	push	r25
    131c:	af 93       	push	r26
    131e:	bf 93       	push	r27
    1320:	ef 93       	push	r30
    1322:	ff 93       	push	r31
	if (RTOUCH_DETECT()) {
    1324:	06 99       	sbic	0x00, 6	; 0
    1326:	0c c0       	rjmp	.+24     	; 0x1340 <__vector_4+0x3e>
		pcint_disable(RTOUCH_PCMSK);
    1328:	80 91 68 00 	lds	r24, 0x0068
    132c:	8e 7f       	andi	r24, 0xFE	; 254
    132e:	80 93 68 00 	sts	0x0068, r24
		rTouchMode(ReadY);
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZL10rTouchMode9Functions>
		adc_request(RTOUCH_YC);
    133a:	86 e0       	ldi	r24, 0x06	; 6
    133c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <adc_request>
	}
}
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	bf 91       	pop	r27
    1346:	af 91       	pop	r26
    1348:	9f 91       	pop	r25
    134a:	8f 91       	pop	r24
    134c:	7f 91       	pop	r23
    134e:	6f 91       	pop	r22
    1350:	5f 91       	pop	r21
    1352:	4f 91       	pop	r20
    1354:	3f 91       	pop	r19
    1356:	2f 91       	pop	r18
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	0f 90       	pop	r0
    135e:	1f 90       	pop	r1
    1360:	18 95       	reti

00001362 <perform_calibration>:
 * Basic test program for touchscreen library.
 */
#include "ts_calibrate.h"

uint8_t perform_calibration(calibration *cal)
{
    1362:	2f 92       	push	r2
    1364:	3f 92       	push	r3
    1366:	4f 92       	push	r4
    1368:	5f 92       	push	r5
    136a:	6f 92       	push	r6
    136c:	7f 92       	push	r7
    136e:	8f 92       	push	r8
    1370:	9f 92       	push	r9
    1372:	af 92       	push	r10
    1374:	bf 92       	push	r11
    1376:	cf 92       	push	r12
    1378:	df 92       	push	r13
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	af 97       	sbiw	r28, 0x2f	; 47
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	8d 83       	std	Y+5, r24	; 0x05
    139a:	9f 8f       	std	Y+31, r25	; 0x1f
    139c:	8e 8f       	std	Y+30, r24	; 0x1e
    139e:	1c 01       	movw	r2, r24
    13a0:	25 e0       	ldi	r18, 0x05	; 5
    13a2:	52 2e       	mov	r5, r18
	float n, x, y, x2, y2, xy, z, zx, zy;
	float det, a, b, c, e, f, i;
	float scaling = 65536.0;

// Get sums for matrix
	n = x = y = x2 = y2 = xy = 0;
    13a4:	00 e0       	ldi	r16, 0x00	; 0
    13a6:	10 e0       	ldi	r17, 0x00	; 0
    13a8:	1f a6       	std	Y+47, r1	; 0x2f
    13aa:	1e a6       	std	Y+46, r1	; 0x2e
    13ac:	61 2c       	mov	r6, r1
    13ae:	71 2c       	mov	r7, r1
    13b0:	81 2c       	mov	r8, r1
    13b2:	91 2c       	mov	r9, r1
    13b4:	1b 86       	std	Y+11, r1	; 0x0b
    13b6:	1c 86       	std	Y+12, r1	; 0x0c
    13b8:	1d 86       	std	Y+13, r1	; 0x0d
    13ba:	1e 86       	std	Y+14, r1	; 0x0e
    13bc:	18 86       	std	Y+8, r1	; 0x08
    13be:	19 86       	std	Y+9, r1	; 0x09
    13c0:	1a 86       	std	Y+10, r1	; 0x0a
    13c2:	41 2c       	mov	r4, r1
    13c4:	a1 2c       	mov	r10, r1
    13c6:	b1 2c       	mov	r11, r1
    13c8:	19 82       	std	Y+1, r1	; 0x01
    13ca:	1f 82       	std	Y+7, r1	; 0x07
    13cc:	1e 8a       	std	Y+22, r1	; 0x16
    13ce:	1f 8a       	std	Y+23, r1	; 0x17
    13d0:	18 8e       	std	Y+24, r1	; 0x18
    13d2:	19 8e       	std	Y+25, r1	; 0x19
	for(j=0;j<5;j++) {
		n += 1.0;
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e8       	ldi	r20, 0x80	; 128
    13da:	5f e3       	ldi	r21, 0x3F	; 63
    13dc:	be 89       	ldd	r27, Y+22	; 0x16
    13de:	af 89       	ldd	r26, Y+23	; 0x17
    13e0:	f8 8c       	ldd	r15, Y+24	; 0x18
    13e2:	e9 8c       	ldd	r14, Y+25	; 0x19
    13e4:	6b 2f       	mov	r22, r27
    13e6:	7a 2f       	mov	r23, r26
    13e8:	8f 2d       	mov	r24, r15
    13ea:	9e 2d       	mov	r25, r14
    13ec:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    13f0:	6a 8b       	std	Y+18, r22	; 0x12
    13f2:	7b 8b       	std	Y+19, r23	; 0x13
    13f4:	8c 8b       	std	Y+20, r24	; 0x14
    13f6:	9d 8b       	std	Y+21, r25	; 0x15
    13f8:	6e 8b       	std	Y+22, r22	; 0x16
    13fa:	7f 8b       	std	Y+23, r23	; 0x17
    13fc:	88 8f       	std	Y+24, r24	; 0x18
    13fe:	99 8f       	std	Y+25, r25	; 0x19
		x += (float)cal->x[j];
    1400:	d1 01       	movw	r26, r2
    1402:	ed 90       	ld	r14, X+
    1404:	fd 90       	ld	r15, X+
    1406:	1d 01       	movw	r2, r26
    1408:	b7 01       	movw	r22, r14
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1412:	9b 01       	movw	r18, r22
    1414:	ac 01       	movw	r20, r24
    1416:	d9 80       	ldd	r13, Y+1	; 0x01
    1418:	cf 80       	ldd	r12, Y+7	; 0x07
    141a:	6a 2d       	mov	r22, r10
    141c:	7b 2d       	mov	r23, r11
    141e:	8d 2d       	mov	r24, r13
    1420:	9c 2d       	mov	r25, r12
    1422:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1426:	68 a3       	std	Y+32, r22	; 0x20
    1428:	79 a3       	std	Y+33, r23	; 0x21
    142a:	8a a3       	std	Y+34, r24	; 0x22
    142c:	9b a3       	std	Y+35, r25	; 0x23
    142e:	5b 01       	movw	r10, r22
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	9f 83       	std	Y+7, r25	; 0x07
		y += (float)cal->y[j];
    1434:	f1 01       	movw	r30, r2
    1436:	c2 88       	ldd	r12, Z+18	; 0x12
    1438:	d3 88       	ldd	r13, Z+19	; 0x13
    143a:	b6 01       	movw	r22, r12
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1444:	9b 01       	movw	r18, r22
    1446:	ac 01       	movw	r20, r24
    1448:	b8 85       	ldd	r27, Y+8	; 0x08
    144a:	a9 85       	ldd	r26, Y+9	; 0x09
    144c:	fa 85       	ldd	r31, Y+10	; 0x0a
    144e:	ff 87       	std	Y+15, r31	; 0x0f
    1450:	6b 2f       	mov	r22, r27
    1452:	7a 2f       	mov	r23, r26
    1454:	8f 2f       	mov	r24, r31
    1456:	94 2d       	mov	r25, r4
    1458:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    145c:	6f 87       	std	Y+15, r22	; 0x0f
    145e:	78 8b       	std	Y+16, r23	; 0x10
    1460:	89 8b       	std	Y+17, r24	; 0x11
    1462:	9c a3       	std	Y+36, r25	; 0x24
    1464:	68 87       	std	Y+8, r22	; 0x08
    1466:	79 87       	std	Y+9, r23	; 0x09
    1468:	8a 87       	std	Y+10, r24	; 0x0a
    146a:	49 2e       	mov	r4, r25
		x2 += (float)((uint32_t)cal->x[j]*(uint32_t)cal->x[j]);
    146c:	97 01       	movw	r18, r14
    146e:	d7 01       	movw	r26, r14
    1470:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__umulhisi3>
    1474:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1478:	9b 01       	movw	r18, r22
    147a:	ac 01       	movw	r20, r24
    147c:	bb 85       	ldd	r27, Y+11	; 0x0b
    147e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1480:	ed 85       	ldd	r30, Y+13	; 0x0d
    1482:	fe 85       	ldd	r31, Y+14	; 0x0e
    1484:	6b 2f       	mov	r22, r27
    1486:	7a 2f       	mov	r23, r26
    1488:	cf 01       	movw	r24, r30
    148a:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    148e:	6d a3       	std	Y+37, r22	; 0x25
    1490:	7e a3       	std	Y+38, r23	; 0x26
    1492:	8f a3       	std	Y+39, r24	; 0x27
    1494:	98 a7       	std	Y+40, r25	; 0x28
    1496:	6b 87       	std	Y+11, r22	; 0x0b
    1498:	7c 87       	std	Y+12, r23	; 0x0c
    149a:	8d 87       	std	Y+13, r24	; 0x0d
    149c:	9e 87       	std	Y+14, r25	; 0x0e
		y2 += (float)((uint32_t)cal->y[j]*(uint32_t)cal->y[j]);
    149e:	96 01       	movw	r18, r12
    14a0:	d6 01       	movw	r26, r12
    14a2:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__umulhisi3>
    14a6:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	66 2d       	mov	r22, r6
    14b0:	77 2d       	mov	r23, r7
    14b2:	88 2d       	mov	r24, r8
    14b4:	99 2d       	mov	r25, r9
    14b6:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    14ba:	6a 8f       	std	Y+26, r22	; 0x1a
    14bc:	7b 8f       	std	Y+27, r23	; 0x1b
    14be:	8c 8f       	std	Y+28, r24	; 0x1c
    14c0:	9d 8f       	std	Y+29, r25	; 0x1d
    14c2:	3b 01       	movw	r6, r22
    14c4:	4c 01       	movw	r8, r24
		xy += (float)((uint32_t)cal->x[j]*(uint32_t)cal->y[j]);
    14c6:	96 01       	movw	r18, r12
    14c8:	d7 01       	movw	r26, r14
    14ca:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__umulhisi3>
    14ce:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    14d2:	9b 01       	movw	r18, r22
    14d4:	ac 01       	movw	r20, r24
    14d6:	ff a5       	ldd	r31, Y+47	; 0x2f
    14d8:	ee a5       	ldd	r30, Y+46	; 0x2e
    14da:	60 2f       	mov	r22, r16
    14dc:	71 2f       	mov	r23, r17
    14de:	8f 2f       	mov	r24, r31
    14e0:	9e 2f       	mov	r25, r30
    14e2:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    14e6:	69 a7       	std	Y+41, r22	; 0x29
    14e8:	7a a7       	std	Y+42, r23	; 0x2a
    14ea:	8b a7       	std	Y+43, r24	; 0x2b
    14ec:	9c a7       	std	Y+44, r25	; 0x2c
    14ee:	8b 01       	movw	r16, r22
    14f0:	8f a7       	std	Y+47, r24	; 0x2f
    14f2:	9e a7       	std	Y+46, r25	; 0x2e
    14f4:	5a 94       	dec	r5
	float det, a, b, c, e, f, i;
	float scaling = 65536.0;

// Get sums for matrix
	n = x = y = x2 = y2 = xy = 0;
	for(j=0;j<5;j++) {
    14f6:	09 f0       	breq	.+2      	; 0x14fa <perform_calibration+0x198>
    14f8:	6d cf       	rjmp	.-294    	; 0x13d4 <perform_calibration+0x72>
		y2 += (float)((uint32_t)cal->y[j]*(uint32_t)cal->y[j]);
		xy += (float)((uint32_t)cal->x[j]*(uint32_t)cal->y[j]);
	}

// Get determinant of matrix -- check if determinant is too small
	det = n*(x2*y2 - xy*xy) + x*(xy*y - x*y2) + y*(x*xy - y*x2);
    14fa:	26 2d       	mov	r18, r6
    14fc:	37 2d       	mov	r19, r7
    14fe:	48 2d       	mov	r20, r8
    1500:	59 2d       	mov	r21, r9
    1502:	bb 85       	ldd	r27, Y+11	; 0x0b
    1504:	ac 85       	ldd	r26, Y+12	; 0x0c
    1506:	fd 84       	ldd	r15, Y+13	; 0x0d
    1508:	ee 84       	ldd	r14, Y+14	; 0x0e
    150a:	6b 2f       	mov	r22, r27
    150c:	7a 2f       	mov	r23, r26
    150e:	8f 2d       	mov	r24, r15
    1510:	9e 2d       	mov	r25, r14
    1512:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1516:	6b 01       	movw	r12, r22
    1518:	7c 01       	movw	r14, r24
    151a:	9f a5       	ldd	r25, Y+47	; 0x2f
    151c:	8e a5       	ldd	r24, Y+46	; 0x2e
    151e:	20 2f       	mov	r18, r16
    1520:	31 2f       	mov	r19, r17
    1522:	49 2f       	mov	r20, r25
    1524:	58 2f       	mov	r21, r24
    1526:	fc 01       	movw	r30, r24
    1528:	60 2f       	mov	r22, r16
    152a:	71 2f       	mov	r23, r17
    152c:	8f 2f       	mov	r24, r31
    152e:	9e 2f       	mov	r25, r30
    1530:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1534:	9b 01       	movw	r18, r22
    1536:	ac 01       	movw	r20, r24
    1538:	c7 01       	movw	r24, r14
    153a:	b6 01       	movw	r22, r12
    153c:	0e 94 2c 11 	call	0x2258	; 0x2258 <__subsf3>
    1540:	1b 01       	movw	r2, r22
    1542:	8d a7       	std	Y+45, r24	; 0x2d
    1544:	59 2e       	mov	r5, r25
    1546:	78 85       	ldd	r23, Y+8	; 0x08
    1548:	69 85       	ldd	r22, Y+9	; 0x09
    154a:	9a 85       	ldd	r25, Y+10	; 0x0a
    154c:	27 2f       	mov	r18, r23
    154e:	36 2f       	mov	r19, r22
    1550:	49 2f       	mov	r20, r25
    1552:	54 2d       	mov	r21, r4
    1554:	ff a5       	ldd	r31, Y+47	; 0x2f
    1556:	ee a5       	ldd	r30, Y+46	; 0x2e
    1558:	60 2f       	mov	r22, r16
    155a:	71 2f       	mov	r23, r17
    155c:	8f 2f       	mov	r24, r31
    155e:	9e 2f       	mov	r25, r30
    1560:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1564:	6b 01       	movw	r12, r22
    1566:	7c 01       	movw	r14, r24
    1568:	26 2d       	mov	r18, r6
    156a:	37 2d       	mov	r19, r7
    156c:	48 2d       	mov	r20, r8
    156e:	59 2d       	mov	r21, r9
    1570:	99 80       	ldd	r9, Y+1	; 0x01
    1572:	8f 80       	ldd	r8, Y+7	; 0x07
    1574:	6a 2d       	mov	r22, r10
    1576:	7b 2d       	mov	r23, r11
    1578:	89 2d       	mov	r24, r9
    157a:	98 2d       	mov	r25, r8
    157c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1580:	9b 01       	movw	r18, r22
    1582:	ac 01       	movw	r20, r24
    1584:	c7 01       	movw	r24, r14
    1586:	b6 01       	movw	r22, r12
    1588:	0e 94 2c 11 	call	0x2258	; 0x2258 <__subsf3>
    158c:	3b 01       	movw	r6, r22
    158e:	4c 01       	movw	r8, r24
    1590:	9f a5       	ldd	r25, Y+47	; 0x2f
    1592:	8e a5       	ldd	r24, Y+46	; 0x2e
    1594:	20 2f       	mov	r18, r16
    1596:	31 2f       	mov	r19, r17
    1598:	49 2f       	mov	r20, r25
    159a:	58 2f       	mov	r21, r24
    159c:	e9 81       	ldd	r30, Y+1	; 0x01
    159e:	1f 81       	ldd	r17, Y+7	; 0x07
    15a0:	6a 2d       	mov	r22, r10
    15a2:	7b 2d       	mov	r23, r11
    15a4:	8e 2f       	mov	r24, r30
    15a6:	91 2f       	mov	r25, r17
    15a8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    15ac:	6b 01       	movw	r12, r22
    15ae:	7c 01       	movw	r14, r24
    15b0:	7b 85       	ldd	r23, Y+11	; 0x0b
    15b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    15b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    15b8:	27 2f       	mov	r18, r23
    15ba:	36 2f       	mov	r19, r22
    15bc:	49 2f       	mov	r20, r25
    15be:	58 2f       	mov	r21, r24
    15c0:	b8 85       	ldd	r27, Y+8	; 0x08
    15c2:	a9 85       	ldd	r26, Y+9	; 0x09
    15c4:	1a 85       	ldd	r17, Y+10	; 0x0a
    15c6:	6b 2f       	mov	r22, r27
    15c8:	7a 2f       	mov	r23, r26
    15ca:	81 2f       	mov	r24, r17
    15cc:	94 2d       	mov	r25, r4
    15ce:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
    15d6:	c7 01       	movw	r24, r14
    15d8:	b6 01       	movw	r22, r12
    15da:	0e 94 2c 11 	call	0x2258	; 0x2258 <__subsf3>
    15de:	8b 01       	movw	r16, r22
    15e0:	8e 87       	std	Y+14, r24	; 0x0e
    15e2:	9b 87       	std	Y+11, r25	; 0x0b
    15e4:	9d a5       	ldd	r25, Y+45	; 0x2d
    15e6:	22 2d       	mov	r18, r2
    15e8:	33 2d       	mov	r19, r3
    15ea:	49 2f       	mov	r20, r25
    15ec:	55 2d       	mov	r21, r5
    15ee:	be 89       	ldd	r27, Y+22	; 0x16
    15f0:	af 89       	ldd	r26, Y+23	; 0x17
    15f2:	f8 8c       	ldd	r15, Y+24	; 0x18
    15f4:	e9 8c       	ldd	r14, Y+25	; 0x19
    15f6:	6b 2f       	mov	r22, r27
    15f8:	7a 2f       	mov	r23, r26
    15fa:	8f 2d       	mov	r24, r15
    15fc:	9e 2d       	mov	r25, r14
    15fe:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1602:	6b 01       	movw	r12, r22
    1604:	7c 01       	movw	r14, r24
    1606:	26 2d       	mov	r18, r6
    1608:	37 2d       	mov	r19, r7
    160a:	48 2d       	mov	r20, r8
    160c:	59 2d       	mov	r21, r9
    160e:	e9 81       	ldd	r30, Y+1	; 0x01
    1610:	ff 81       	ldd	r31, Y+7	; 0x07
    1612:	6a 2d       	mov	r22, r10
    1614:	7b 2d       	mov	r23, r11
    1616:	cf 01       	movw	r24, r30
    1618:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    161c:	9b 01       	movw	r18, r22
    161e:	ac 01       	movw	r20, r24
    1620:	c7 01       	movw	r24, r14
    1622:	b6 01       	movw	r22, r12
    1624:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1628:	6b 01       	movw	r12, r22
    162a:	7c 01       	movw	r14, r24
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1630:	20 2f       	mov	r18, r16
    1632:	31 2f       	mov	r19, r17
    1634:	49 2f       	mov	r20, r25
    1636:	58 2f       	mov	r21, r24
    1638:	b8 85       	ldd	r27, Y+8	; 0x08
    163a:	a9 85       	ldd	r26, Y+9	; 0x09
    163c:	ba 84       	ldd	r11, Y+10	; 0x0a
    163e:	6b 2f       	mov	r22, r27
    1640:	7a 2f       	mov	r23, r26
    1642:	8b 2d       	mov	r24, r11
    1644:	94 2d       	mov	r25, r4
    1646:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    164a:	9b 01       	movw	r18, r22
    164c:	ac 01       	movw	r20, r24
    164e:	c7 01       	movw	r24, r14
    1650:	b6 01       	movw	r22, r12
    1652:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1656:	6b 01       	movw	r12, r22
    1658:	7c 01       	movw	r14, r24
	if(det < 0.1 && det > -0.1) {
    165a:	2d ec       	ldi	r18, 0xCD	; 205
    165c:	3c ec       	ldi	r19, 0xCC	; 204
    165e:	4c ec       	ldi	r20, 0xCC	; 204
    1660:	5d e3       	ldi	r21, 0x3D	; 61
    1662:	7d 2d       	mov	r23, r13
    1664:	9f 2d       	mov	r25, r15
    1666:	0e 94 13 13 	call	0x2626	; 0x2626 <__ltsf2>
    166a:	87 ff       	sbrs	r24, 7
    166c:	0d c0       	rjmp	.+26     	; 0x1688 <perform_calibration+0x326>
    166e:	2d ec       	ldi	r18, 0xCD	; 205
    1670:	3c ec       	ldi	r19, 0xCC	; 204
    1672:	4c ec       	ldi	r20, 0xCC	; 204
    1674:	5d eb       	ldi	r21, 0xBD	; 189
    1676:	6c 2d       	mov	r22, r12
    1678:	7d 2d       	mov	r23, r13
    167a:	8e 2d       	mov	r24, r14
    167c:	9f 2d       	mov	r25, r15
    167e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	0c f4       	brge	.+2      	; 0x1688 <perform_calibration+0x326>
    1686:	3f c3       	rjmp	.+1662   	; 0x1d06 <perform_calibration+0x9a4>
		//printf("ts_calibrate: determinant is too small -- %f\n",det);
		return 0;
	}

// Get elements of inverse matrix
	a = (x2*y2 - xy*xy)/det;
    1688:	2c 2d       	mov	r18, r12
    168a:	3d 2d       	mov	r19, r13
    168c:	4e 2d       	mov	r20, r14
    168e:	5f 2d       	mov	r21, r15
    1690:	bd a4       	ldd	r11, Y+45	; 0x2d
    1692:	62 2d       	mov	r22, r2
    1694:	73 2d       	mov	r23, r3
    1696:	8b 2d       	mov	r24, r11
    1698:	95 2d       	mov	r25, r5
    169a:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    169e:	6e 8b       	std	Y+22, r22	; 0x16
    16a0:	7f 8b       	std	Y+23, r23	; 0x17
    16a2:	88 8f       	std	Y+24, r24	; 0x18
    16a4:	99 8f       	std	Y+25, r25	; 0x19
	b = (xy*y - x*y2)/det;
    16a6:	2c 2d       	mov	r18, r12
    16a8:	3d 2d       	mov	r19, r13
    16aa:	4e 2d       	mov	r20, r14
    16ac:	5f 2d       	mov	r21, r15
    16ae:	66 2d       	mov	r22, r6
    16b0:	77 2d       	mov	r23, r7
    16b2:	88 2d       	mov	r24, r8
    16b4:	99 2d       	mov	r25, r9
    16b6:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    16ba:	6f 83       	std	Y+7, r22	; 0x07
    16bc:	78 87       	std	Y+8, r23	; 0x08
    16be:	89 87       	std	Y+9, r24	; 0x09
    16c0:	9a 87       	std	Y+10, r25	; 0x0a
	c = (x*xy - y*x2)/det;
    16c2:	2c 2d       	mov	r18, r12
    16c4:	3d 2d       	mov	r19, r13
    16c6:	4e 2d       	mov	r20, r14
    16c8:	5f 2d       	mov	r21, r15
    16ca:	fe 85       	ldd	r31, Y+14	; 0x0e
    16cc:	eb 85       	ldd	r30, Y+11	; 0x0b
    16ce:	60 2f       	mov	r22, r16
    16d0:	71 2f       	mov	r23, r17
    16d2:	8f 2f       	mov	r24, r31
    16d4:	9e 2f       	mov	r25, r30
    16d6:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    16da:	6b 87       	std	Y+11, r22	; 0x0b
    16dc:	7c 87       	std	Y+12, r23	; 0x0c
    16de:	8d 87       	std	Y+13, r24	; 0x0d
    16e0:	9e 87       	std	Y+14, r25	; 0x0e
	e = (n*y2 - y*y)/det;
    16e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    16e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ea:	27 2f       	mov	r18, r23
    16ec:	36 2f       	mov	r19, r22
    16ee:	49 2f       	mov	r20, r25
    16f0:	58 2f       	mov	r21, r24
    16f2:	ba 89       	ldd	r27, Y+18	; 0x12
    16f4:	ab 89       	ldd	r26, Y+19	; 0x13
    16f6:	ec 89       	ldd	r30, Y+20	; 0x14
    16f8:	1d 89       	ldd	r17, Y+21	; 0x15
    16fa:	6b 2f       	mov	r22, r27
    16fc:	7a 2f       	mov	r23, r26
    16fe:	8e 2f       	mov	r24, r30
    1700:	91 2f       	mov	r25, r17
    1702:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1706:	4b 01       	movw	r8, r22
    1708:	5c 01       	movw	r10, r24
    170a:	7f 85       	ldd	r23, Y+15	; 0x0f
    170c:	68 89       	ldd	r22, Y+16	; 0x10
    170e:	99 89       	ldd	r25, Y+17	; 0x11
    1710:	8c a1       	ldd	r24, Y+36	; 0x24
    1712:	27 2f       	mov	r18, r23
    1714:	36 2f       	mov	r19, r22
    1716:	49 2f       	mov	r20, r25
    1718:	58 2f       	mov	r21, r24
    171a:	db 01       	movw	r26, r22
    171c:	18 2f       	mov	r17, r24
    171e:	6b 2f       	mov	r22, r27
    1720:	7a 2f       	mov	r23, r26
    1722:	89 2f       	mov	r24, r25
    1724:	95 2f       	mov	r25, r21
    1726:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    172a:	9b 01       	movw	r18, r22
    172c:	ac 01       	movw	r20, r24
    172e:	c5 01       	movw	r24, r10
    1730:	b4 01       	movw	r22, r8
    1732:	0e 94 2c 11 	call	0x2258	; 0x2258 <__subsf3>
    1736:	2c 2d       	mov	r18, r12
    1738:	3d 2d       	mov	r19, r13
    173a:	4e 2d       	mov	r20, r14
    173c:	5f 2d       	mov	r21, r15
    173e:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    1742:	6a 8f       	std	Y+26, r22	; 0x1a
    1744:	7b 8f       	std	Y+27, r23	; 0x1b
    1746:	8c 8f       	std	Y+28, r24	; 0x1c
    1748:	9d 8f       	std	Y+29, r25	; 0x1d
	f = (x*y - n*xy)/det;
    174a:	7f 85       	ldd	r23, Y+15	; 0x0f
    174c:	68 89       	ldd	r22, Y+16	; 0x10
    174e:	99 89       	ldd	r25, Y+17	; 0x11
    1750:	27 2f       	mov	r18, r23
    1752:	36 2f       	mov	r19, r22
    1754:	49 2f       	mov	r20, r25
    1756:	51 2f       	mov	r21, r17
    1758:	b8 a1       	ldd	r27, Y+32	; 0x20
    175a:	a9 a1       	ldd	r26, Y+33	; 0x21
    175c:	ea a1       	ldd	r30, Y+34	; 0x22
    175e:	1b a1       	ldd	r17, Y+35	; 0x23
    1760:	6b 2f       	mov	r22, r27
    1762:	7a 2f       	mov	r23, r26
    1764:	8e 2f       	mov	r24, r30
    1766:	91 2f       	mov	r25, r17
    1768:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    176c:	4b 01       	movw	r8, r22
    176e:	5c 01       	movw	r10, r24
    1770:	79 a5       	ldd	r23, Y+41	; 0x29
    1772:	6a a5       	ldd	r22, Y+42	; 0x2a
    1774:	9b a5       	ldd	r25, Y+43	; 0x2b
    1776:	8c a5       	ldd	r24, Y+44	; 0x2c
    1778:	27 2f       	mov	r18, r23
    177a:	36 2f       	mov	r19, r22
    177c:	49 2f       	mov	r20, r25
    177e:	58 2f       	mov	r21, r24
    1780:	ba 89       	ldd	r27, Y+18	; 0x12
    1782:	ab 89       	ldd	r26, Y+19	; 0x13
    1784:	ec 89       	ldd	r30, Y+20	; 0x14
    1786:	1d 89       	ldd	r17, Y+21	; 0x15
    1788:	6b 2f       	mov	r22, r27
    178a:	7a 2f       	mov	r23, r26
    178c:	8e 2f       	mov	r24, r30
    178e:	91 2f       	mov	r25, r17
    1790:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1794:	9b 01       	movw	r18, r22
    1796:	ac 01       	movw	r20, r24
    1798:	c5 01       	movw	r24, r10
    179a:	b4 01       	movw	r22, r8
    179c:	0e 94 2c 11 	call	0x2258	; 0x2258 <__subsf3>
    17a0:	2c 2d       	mov	r18, r12
    17a2:	3d 2d       	mov	r19, r13
    17a4:	4e 2d       	mov	r20, r14
    17a6:	5f 2d       	mov	r21, r15
    17a8:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    17ac:	b6 2e       	mov	r11, r22
    17ae:	7f 87       	std	Y+15, r23	; 0x0f
    17b0:	88 8b       	std	Y+16, r24	; 0x10
    17b2:	99 8b       	std	Y+17, r25	; 0x11
	i = (n*x2 - x*x)/det;
    17b4:	7d a1       	ldd	r23, Y+37	; 0x25
    17b6:	6e a1       	ldd	r22, Y+38	; 0x26
    17b8:	9f a1       	ldd	r25, Y+39	; 0x27
    17ba:	88 a5       	ldd	r24, Y+40	; 0x28
    17bc:	27 2f       	mov	r18, r23
    17be:	36 2f       	mov	r19, r22
    17c0:	49 2f       	mov	r20, r25
    17c2:	58 2f       	mov	r21, r24
    17c4:	ba 89       	ldd	r27, Y+18	; 0x12
    17c6:	ab 89       	ldd	r26, Y+19	; 0x13
    17c8:	ec 89       	ldd	r30, Y+20	; 0x14
    17ca:	6b 2f       	mov	r22, r27
    17cc:	7a 2f       	mov	r23, r26
    17ce:	8e 2f       	mov	r24, r30
    17d0:	91 2f       	mov	r25, r17
    17d2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    17d6:	2b 01       	movw	r4, r22
    17d8:	3c 01       	movw	r6, r24
    17da:	78 a1       	ldd	r23, Y+32	; 0x20
    17dc:	69 a1       	ldd	r22, Y+33	; 0x21
    17de:	9a a1       	ldd	r25, Y+34	; 0x22
    17e0:	8b a1       	ldd	r24, Y+35	; 0x23
    17e2:	27 2f       	mov	r18, r23
    17e4:	36 2f       	mov	r19, r22
    17e6:	49 2f       	mov	r20, r25
    17e8:	58 2f       	mov	r21, r24
    17ea:	db 01       	movw	r26, r22
    17ec:	6b 2f       	mov	r22, r27
    17ee:	7a 2f       	mov	r23, r26
    17f0:	89 2f       	mov	r24, r25
    17f2:	95 2f       	mov	r25, r21
    17f4:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    17f8:	9b 01       	movw	r18, r22
    17fa:	ac 01       	movw	r20, r24
    17fc:	c3 01       	movw	r24, r6
    17fe:	b2 01       	movw	r22, r4
    1800:	0e 94 2c 11 	call	0x2258	; 0x2258 <__subsf3>
    1804:	2c 2d       	mov	r18, r12
    1806:	3d 2d       	mov	r19, r13
    1808:	4e 2d       	mov	r20, r14
    180a:	5f 2d       	mov	r21, r15
    180c:	0e 94 41 12 	call	0x2482	; 0x2482 <__divsf3>
    1810:	6a 8b       	std	Y+18, r22	; 0x12
    1812:	7b 8b       	std	Y+19, r23	; 0x13
    1814:	8c 8b       	std	Y+20, r24	; 0x14
    1816:	9d 8b       	std	Y+21, r25	; 0x15
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	9a 83       	std	Y+2, r25	; 0x02
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	95 e0       	ldi	r25, 0x05	; 5
    1822:	29 2e       	mov	r2, r25

// Get sums for x calibration
	z = zx = zy = 0;
    1824:	c1 2c       	mov	r12, r1
    1826:	d1 2c       	mov	r13, r1
    1828:	e1 2c       	mov	r14, r1
    182a:	f1 2c       	mov	r15, r1
    182c:	71 2c       	mov	r7, r1
    182e:	81 2c       	mov	r8, r1
    1830:	91 2c       	mov	r9, r1
    1832:	a1 2c       	mov	r10, r1
    1834:	31 2c       	mov	r3, r1
    1836:	41 2c       	mov	r4, r1
    1838:	51 2c       	mov	r5, r1
    183a:	61 2c       	mov	r6, r1
	for(j=0;j<5;j++) {
		z += (float)cal->xfb[j];
    183c:	a9 81       	ldd	r26, Y+1	; 0x01
    183e:	ba 81       	ldd	r27, Y+2	; 0x02
    1840:	1a 96       	adiw	r26, 0x0a	; 10
    1842:	0d 91       	ld	r16, X+
    1844:	1c 91       	ld	r17, X
    1846:	1b 97       	sbiw	r26, 0x0b	; 11
    1848:	b8 01       	movw	r22, r16
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1852:	9b 01       	movw	r18, r22
    1854:	ac 01       	movw	r20, r24
    1856:	63 2d       	mov	r22, r3
    1858:	74 2d       	mov	r23, r4
    185a:	85 2d       	mov	r24, r5
    185c:	96 2d       	mov	r25, r6
    185e:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1862:	36 2e       	mov	r3, r22
    1864:	47 2e       	mov	r4, r23
    1866:	58 2e       	mov	r5, r24
    1868:	69 2e       	mov	r6, r25
		zx += (float)((uint32_t)cal->xfb[j]*(uint32_t)cal->x[j]);
    186a:	e9 81       	ldd	r30, Y+1	; 0x01
    186c:	fa 81       	ldd	r31, Y+2	; 0x02
    186e:	21 91       	ld	r18, Z+
    1870:	31 91       	ld	r19, Z+
    1872:	fa 83       	std	Y+2, r31	; 0x02
    1874:	e9 83       	std	Y+1, r30	; 0x01
    1876:	d8 01       	movw	r26, r16
    1878:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__umulhisi3>
    187c:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1880:	9b 01       	movw	r18, r22
    1882:	ac 01       	movw	r20, r24
    1884:	67 2d       	mov	r22, r7
    1886:	78 2d       	mov	r23, r8
    1888:	89 2d       	mov	r24, r9
    188a:	9a 2d       	mov	r25, r10
    188c:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1890:	76 2e       	mov	r7, r22
    1892:	87 2e       	mov	r8, r23
    1894:	98 2e       	mov	r9, r24
    1896:	a9 2e       	mov	r10, r25
		zy += (float)((uint32_t)cal->xfb[j]*(uint32_t)cal->y[j]);
    1898:	a9 81       	ldd	r26, Y+1	; 0x01
    189a:	ba 81       	ldd	r27, Y+2	; 0x02
    189c:	52 96       	adiw	r26, 0x12	; 18
    189e:	2d 91       	ld	r18, X+
    18a0:	3c 91       	ld	r19, X
    18a2:	53 97       	sbiw	r26, 0x13	; 19
    18a4:	d8 01       	movw	r26, r16
    18a6:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__umulhisi3>
    18aa:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    18ae:	9b 01       	movw	r18, r22
    18b0:	ac 01       	movw	r20, r24
    18b2:	6c 2d       	mov	r22, r12
    18b4:	7d 2d       	mov	r23, r13
    18b6:	8e 2d       	mov	r24, r14
    18b8:	9f 2d       	mov	r25, r15
    18ba:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    18be:	6b 01       	movw	r12, r22
    18c0:	7c 01       	movw	r14, r24
    18c2:	2a 94       	dec	r2
	f = (x*y - n*xy)/det;
	i = (n*x2 - x*x)/det;

// Get sums for x calibration
	z = zx = zy = 0;
	for(j=0;j<5;j++) {
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <perform_calibration+0x566>
    18c6:	ba cf       	rjmp	.-140    	; 0x183c <perform_calibration+0x4da>
		zx += (float)((uint32_t)cal->xfb[j]*(uint32_t)cal->x[j]);
		zy += (float)((uint32_t)cal->xfb[j]*(uint32_t)cal->y[j]);
	}

// Now multiply out to get the calibration for framebuffer x coord
	cal->a[0] = (int32_t)((a*z + b*zx + c*zy)*(scaling));
    18c8:	23 2d       	mov	r18, r3
    18ca:	34 2d       	mov	r19, r4
    18cc:	45 2d       	mov	r20, r5
    18ce:	56 2d       	mov	r21, r6
    18d0:	be 89       	ldd	r27, Y+22	; 0x16
    18d2:	af 89       	ldd	r26, Y+23	; 0x17
    18d4:	e8 8d       	ldd	r30, Y+24	; 0x18
    18d6:	19 8d       	ldd	r17, Y+25	; 0x19
    18d8:	6b 2f       	mov	r22, r27
    18da:	7a 2f       	mov	r23, r26
    18dc:	8e 2f       	mov	r24, r30
    18de:	91 2f       	mov	r25, r17
    18e0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    18e4:	69 83       	std	Y+1, r22	; 0x01
    18e6:	7a 83       	std	Y+2, r23	; 0x02
    18e8:	8b 83       	std	Y+3, r24	; 0x03
    18ea:	9c 83       	std	Y+4, r25	; 0x04
    18ec:	27 2d       	mov	r18, r7
    18ee:	38 2d       	mov	r19, r8
    18f0:	49 2d       	mov	r20, r9
    18f2:	5a 2d       	mov	r21, r10
    18f4:	bf 81       	ldd	r27, Y+7	; 0x07
    18f6:	a8 85       	ldd	r26, Y+8	; 0x08
    18f8:	e9 85       	ldd	r30, Y+9	; 0x09
    18fa:	1a 85       	ldd	r17, Y+10	; 0x0a
    18fc:	6b 2f       	mov	r22, r27
    18fe:	7a 2f       	mov	r23, r26
    1900:	8e 2f       	mov	r24, r30
    1902:	91 2f       	mov	r25, r17
    1904:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1908:	9b 01       	movw	r18, r22
    190a:	ac 01       	movw	r20, r24
    190c:	69 81       	ldd	r22, Y+1	; 0x01
    190e:	7a 81       	ldd	r23, Y+2	; 0x02
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1918:	69 83       	std	Y+1, r22	; 0x01
    191a:	7a 83       	std	Y+2, r23	; 0x02
    191c:	8b 83       	std	Y+3, r24	; 0x03
    191e:	9c 83       	std	Y+4, r25	; 0x04
    1920:	2c 2d       	mov	r18, r12
    1922:	3d 2d       	mov	r19, r13
    1924:	4e 2d       	mov	r20, r14
    1926:	5f 2d       	mov	r21, r15
    1928:	bb 85       	ldd	r27, Y+11	; 0x0b
    192a:	ac 85       	ldd	r26, Y+12	; 0x0c
    192c:	ed 85       	ldd	r30, Y+13	; 0x0d
    192e:	1e 85       	ldd	r17, Y+14	; 0x0e
    1930:	6b 2f       	mov	r22, r27
    1932:	7a 2f       	mov	r23, r26
    1934:	8e 2f       	mov	r24, r30
    1936:	91 2f       	mov	r25, r17
    1938:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    193c:	9b 01       	movw	r18, r22
    193e:	ac 01       	movw	r20, r24
    1940:	69 81       	ldd	r22, Y+1	; 0x01
    1942:	7a 81       	ldd	r23, Y+2	; 0x02
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	57 e4       	ldi	r21, 0x47	; 71
    1954:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1958:	0e 94 42 13 	call	0x2684	; 0x2684 <__fixsfsi>
    195c:	ed 81       	ldd	r30, Y+5	; 0x05
    195e:	fe 81       	ldd	r31, Y+6	; 0x06
    1960:	60 a7       	std	Z+40, r22	; 0x28
    1962:	71 a7       	std	Z+41, r23	; 0x29
    1964:	82 a7       	std	Z+42, r24	; 0x2a
    1966:	93 a7       	std	Z+43, r25	; 0x2b
	cal->a[1] = (int32_t)((b*z + e*zx + f*zy)*(scaling));
    1968:	23 2d       	mov	r18, r3
    196a:	34 2d       	mov	r19, r4
    196c:	45 2d       	mov	r20, r5
    196e:	56 2d       	mov	r21, r6
    1970:	bf 81       	ldd	r27, Y+7	; 0x07
    1972:	a8 85       	ldd	r26, Y+8	; 0x08
    1974:	e9 85       	ldd	r30, Y+9	; 0x09
    1976:	1a 85       	ldd	r17, Y+10	; 0x0a
    1978:	6b 2f       	mov	r22, r27
    197a:	7a 2f       	mov	r23, r26
    197c:	8e 2f       	mov	r24, r30
    197e:	91 2f       	mov	r25, r17
    1980:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1984:	69 83       	std	Y+1, r22	; 0x01
    1986:	7a 83       	std	Y+2, r23	; 0x02
    1988:	8b 83       	std	Y+3, r24	; 0x03
    198a:	9c 83       	std	Y+4, r25	; 0x04
    198c:	27 2d       	mov	r18, r7
    198e:	38 2d       	mov	r19, r8
    1990:	49 2d       	mov	r20, r9
    1992:	5a 2d       	mov	r21, r10
    1994:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1996:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1998:	ec 8d       	ldd	r30, Y+28	; 0x1c
    199a:	1d 8d       	ldd	r17, Y+29	; 0x1d
    199c:	6b 2f       	mov	r22, r27
    199e:	7a 2f       	mov	r23, r26
    19a0:	8e 2f       	mov	r24, r30
    19a2:	91 2f       	mov	r25, r17
    19a4:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    19a8:	9b 01       	movw	r18, r22
    19aa:	ac 01       	movw	r20, r24
    19ac:	69 81       	ldd	r22, Y+1	; 0x01
    19ae:	7a 81       	ldd	r23, Y+2	; 0x02
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    19b8:	69 83       	std	Y+1, r22	; 0x01
    19ba:	7a 83       	std	Y+2, r23	; 0x02
    19bc:	8b 83       	std	Y+3, r24	; 0x03
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	2c 2d       	mov	r18, r12
    19c2:	3d 2d       	mov	r19, r13
    19c4:	4e 2d       	mov	r20, r14
    19c6:	5f 2d       	mov	r21, r15
    19c8:	af 85       	ldd	r26, Y+15	; 0x0f
    19ca:	e8 89       	ldd	r30, Y+16	; 0x10
    19cc:	19 89       	ldd	r17, Y+17	; 0x11
    19ce:	6b 2d       	mov	r22, r11
    19d0:	7a 2f       	mov	r23, r26
    19d2:	8e 2f       	mov	r24, r30
    19d4:	91 2f       	mov	r25, r17
    19d6:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    19da:	9b 01       	movw	r18, r22
    19dc:	ac 01       	movw	r20, r24
    19de:	69 81       	ldd	r22, Y+1	; 0x01
    19e0:	7a 81       	ldd	r23, Y+2	; 0x02
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	57 e4       	ldi	r21, 0x47	; 71
    19f2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    19f6:	0e 94 42 13 	call	0x2684	; 0x2684 <__fixsfsi>
    19fa:	ad 81       	ldd	r26, Y+5	; 0x05
    19fc:	be 81       	ldd	r27, Y+6	; 0x06
    19fe:	9c 96       	adiw	r26, 0x2c	; 44
    1a00:	6d 93       	st	X+, r22
    1a02:	7d 93       	st	X+, r23
    1a04:	8d 93       	st	X+, r24
    1a06:	9c 93       	st	X, r25
    1a08:	9f 97       	sbiw	r26, 0x2f	; 47
	cal->a[2] = (int32_t)((c*z + f*zx + i*zy)*(scaling));
    1a0a:	23 2d       	mov	r18, r3
    1a0c:	34 2d       	mov	r19, r4
    1a0e:	45 2d       	mov	r20, r5
    1a10:	56 2d       	mov	r21, r6
    1a12:	bb 85       	ldd	r27, Y+11	; 0x0b
    1a14:	ac 85       	ldd	r26, Y+12	; 0x0c
    1a16:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a18:	1e 85       	ldd	r17, Y+14	; 0x0e
    1a1a:	6b 2f       	mov	r22, r27
    1a1c:	7a 2f       	mov	r23, r26
    1a1e:	8e 2f       	mov	r24, r30
    1a20:	91 2f       	mov	r25, r17
    1a22:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1a26:	1b 01       	movw	r2, r22
    1a28:	2c 01       	movw	r4, r24
    1a2a:	27 2d       	mov	r18, r7
    1a2c:	38 2d       	mov	r19, r8
    1a2e:	49 2d       	mov	r20, r9
    1a30:	5a 2d       	mov	r21, r10
    1a32:	af 85       	ldd	r26, Y+15	; 0x0f
    1a34:	e8 89       	ldd	r30, Y+16	; 0x10
    1a36:	19 89       	ldd	r17, Y+17	; 0x11
    1a38:	6b 2d       	mov	r22, r11
    1a3a:	7a 2f       	mov	r23, r26
    1a3c:	8e 2f       	mov	r24, r30
    1a3e:	91 2f       	mov	r25, r17
    1a40:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1a44:	9b 01       	movw	r18, r22
    1a46:	ac 01       	movw	r20, r24
    1a48:	c2 01       	movw	r24, r4
    1a4a:	b1 01       	movw	r22, r2
    1a4c:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1a50:	2b 01       	movw	r4, r22
    1a52:	3c 01       	movw	r6, r24
    1a54:	2c 2d       	mov	r18, r12
    1a56:	3d 2d       	mov	r19, r13
    1a58:	4e 2d       	mov	r20, r14
    1a5a:	5f 2d       	mov	r21, r15
    1a5c:	ba 89       	ldd	r27, Y+18	; 0x12
    1a5e:	ab 89       	ldd	r26, Y+19	; 0x13
    1a60:	ec 89       	ldd	r30, Y+20	; 0x14
    1a62:	1d 89       	ldd	r17, Y+21	; 0x15
    1a64:	6b 2f       	mov	r22, r27
    1a66:	7a 2f       	mov	r23, r26
    1a68:	8e 2f       	mov	r24, r30
    1a6a:	91 2f       	mov	r25, r17
    1a6c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1a70:	9b 01       	movw	r18, r22
    1a72:	ac 01       	movw	r20, r24
    1a74:	c3 01       	movw	r24, r6
    1a76:	b2 01       	movw	r22, r4
    1a78:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e8       	ldi	r20, 0x80	; 128
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1a88:	0e 94 42 13 	call	0x2684	; 0x2684 <__fixsfsi>
    1a8c:	ed 81       	ldd	r30, Y+5	; 0x05
    1a8e:	fe 81       	ldd	r31, Y+6	; 0x06
    1a90:	60 ab       	std	Z+48, r22	; 0x30
    1a92:	71 ab       	std	Z+49, r23	; 0x31
    1a94:	82 ab       	std	Z+50, r24	; 0x32
    1a96:	93 ab       	std	Z+51, r25	; 0x33
    1a98:	85 e0       	ldi	r24, 0x05	; 5
    1a9a:	48 2e       	mov	r4, r24
				(b*z + e*zx + f*zy),
				(c*z + f*zx + i*zy));
#endif

// Get sums for y calibration
	z = zx = zy = 0;
    1a9c:	e1 2c       	mov	r14, r1
    1a9e:	f1 2c       	mov	r15, r1
    1aa0:	00 e0       	ldi	r16, 0x00	; 0
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
    1aa4:	91 2c       	mov	r9, r1
    1aa6:	a1 2c       	mov	r10, r1
    1aa8:	c1 2c       	mov	r12, r1
    1aaa:	d1 2c       	mov	r13, r1
    1aac:	19 82       	std	Y+1, r1	; 0x01
    1aae:	61 2c       	mov	r6, r1
    1ab0:	71 2c       	mov	r7, r1
    1ab2:	81 2c       	mov	r8, r1
	for(j=0;j<5;j++) {
		z += (float)cal->yfb[j];
    1ab4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1ab6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1ab8:	5e 96       	adiw	r26, 0x1e	; 30
    1aba:	2d 90       	ld	r2, X+
    1abc:	3c 90       	ld	r3, X
    1abe:	5f 97       	sbiw	r26, 0x1f	; 31
    1ac0:	b1 01       	movw	r22, r2
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1aca:	9b 01       	movw	r18, r22
    1acc:	ac 01       	movw	r20, r24
    1ace:	b9 81       	ldd	r27, Y+1	; 0x01
    1ad0:	6b 2f       	mov	r22, r27
    1ad2:	76 2d       	mov	r23, r6
    1ad4:	87 2d       	mov	r24, r7
    1ad6:	98 2d       	mov	r25, r8
    1ad8:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1adc:	69 83       	std	Y+1, r22	; 0x01
    1ade:	67 2e       	mov	r6, r23
    1ae0:	78 2e       	mov	r7, r24
    1ae2:	89 2e       	mov	r8, r25
		zx += (float)((uint32_t)cal->yfb[j]*(uint32_t)cal->x[j]);
    1ae4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1ae6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1ae8:	21 91       	ld	r18, Z+
    1aea:	31 91       	ld	r19, Z+
    1aec:	ff 8f       	std	Y+31, r31	; 0x1f
    1aee:	ee 8f       	std	Y+30, r30	; 0x1e
    1af0:	d1 01       	movw	r26, r2
    1af2:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__umulhisi3>
    1af6:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1afa:	9b 01       	movw	r18, r22
    1afc:	ac 01       	movw	r20, r24
    1afe:	69 2d       	mov	r22, r9
    1b00:	7a 2d       	mov	r23, r10
    1b02:	8c 2d       	mov	r24, r12
    1b04:	9d 2d       	mov	r25, r13
    1b06:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1b0a:	96 2e       	mov	r9, r22
    1b0c:	a7 2e       	mov	r10, r23
    1b0e:	6c 01       	movw	r12, r24
		zy += (float)((uint32_t)cal->yfb[j]*(uint32_t)cal->y[j]);
    1b10:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1b12:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1b14:	52 96       	adiw	r26, 0x12	; 18
    1b16:	2d 91       	ld	r18, X+
    1b18:	3c 91       	ld	r19, X
    1b1a:	53 97       	sbiw	r26, 0x13	; 19
    1b1c:	d1 01       	movw	r26, r2
    1b1e:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__umulhisi3>
    1b22:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatunsisf>
    1b26:	9b 01       	movw	r18, r22
    1b28:	ac 01       	movw	r20, r24
    1b2a:	6e 2d       	mov	r22, r14
    1b2c:	7f 2d       	mov	r23, r15
    1b2e:	80 2f       	mov	r24, r16
    1b30:	91 2f       	mov	r25, r17
    1b32:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1b36:	7b 01       	movw	r14, r22
    1b38:	8c 01       	movw	r16, r24
    1b3a:	4a 94       	dec	r4
				(c*z + f*zx + i*zy));
#endif

// Get sums for y calibration
	z = zx = zy = 0;
	for(j=0;j<5;j++) {
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <perform_calibration+0x7de>
    1b3e:	ba cf       	rjmp	.-140    	; 0x1ab4 <perform_calibration+0x752>
		zx += (float)((uint32_t)cal->yfb[j]*(uint32_t)cal->x[j]);
		zy += (float)((uint32_t)cal->yfb[j]*(uint32_t)cal->y[j]);
	}

// Now multiply out to get the calibration for framebuffer y coord
	cal->a[3] = (int32_t)((a*z + b*zx + c*zy)*(scaling));
    1b40:	79 81       	ldd	r23, Y+1	; 0x01
    1b42:	27 2f       	mov	r18, r23
    1b44:	36 2d       	mov	r19, r6
    1b46:	47 2d       	mov	r20, r7
    1b48:	58 2d       	mov	r21, r8
    1b4a:	be 89       	ldd	r27, Y+22	; 0x16
    1b4c:	af 89       	ldd	r26, Y+23	; 0x17
    1b4e:	58 8c       	ldd	r5, Y+24	; 0x18
    1b50:	49 8c       	ldd	r4, Y+25	; 0x19
    1b52:	6b 2f       	mov	r22, r27
    1b54:	7a 2f       	mov	r23, r26
    1b56:	85 2d       	mov	r24, r5
    1b58:	94 2d       	mov	r25, r4
    1b5a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1b5e:	1b 01       	movw	r2, r22
    1b60:	2c 01       	movw	r4, r24
    1b62:	29 2d       	mov	r18, r9
    1b64:	3a 2d       	mov	r19, r10
    1b66:	4c 2d       	mov	r20, r12
    1b68:	5d 2d       	mov	r21, r13
    1b6a:	bf 81       	ldd	r27, Y+7	; 0x07
    1b6c:	a8 85       	ldd	r26, Y+8	; 0x08
    1b6e:	e9 85       	ldd	r30, Y+9	; 0x09
    1b70:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b72:	6b 2f       	mov	r22, r27
    1b74:	7a 2f       	mov	r23, r26
    1b76:	cf 01       	movw	r24, r30
    1b78:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1b7c:	9b 01       	movw	r18, r22
    1b7e:	ac 01       	movw	r20, r24
    1b80:	c2 01       	movw	r24, r4
    1b82:	b1 01       	movw	r22, r2
    1b84:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1b88:	1b 01       	movw	r2, r22
    1b8a:	2c 01       	movw	r4, r24
    1b8c:	2e 2d       	mov	r18, r14
    1b8e:	3f 2d       	mov	r19, r15
    1b90:	40 2f       	mov	r20, r16
    1b92:	51 2f       	mov	r21, r17
    1b94:	bb 85       	ldd	r27, Y+11	; 0x0b
    1b96:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b98:	ed 85       	ldd	r30, Y+13	; 0x0d
    1b9a:	fe 85       	ldd	r31, Y+14	; 0x0e
    1b9c:	6b 2f       	mov	r22, r27
    1b9e:	7a 2f       	mov	r23, r26
    1ba0:	cf 01       	movw	r24, r30
    1ba2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1ba6:	9b 01       	movw	r18, r22
    1ba8:	ac 01       	movw	r20, r24
    1baa:	c2 01       	movw	r24, r4
    1bac:	b1 01       	movw	r22, r2
    1bae:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e8       	ldi	r20, 0x80	; 128
    1bb8:	57 e4       	ldi	r21, 0x47	; 71
    1bba:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1bbe:	0e 94 42 13 	call	0x2684	; 0x2684 <__fixsfsi>
    1bc2:	ed 81       	ldd	r30, Y+5	; 0x05
    1bc4:	fe 81       	ldd	r31, Y+6	; 0x06
    1bc6:	64 ab       	std	Z+52, r22	; 0x34
    1bc8:	75 ab       	std	Z+53, r23	; 0x35
    1bca:	86 ab       	std	Z+54, r24	; 0x36
    1bcc:	97 ab       	std	Z+55, r25	; 0x37
	cal->a[4] = (int32_t)((b*z + e*zx + f*zy)*(scaling));
    1bce:	79 81       	ldd	r23, Y+1	; 0x01
    1bd0:	27 2f       	mov	r18, r23
    1bd2:	36 2d       	mov	r19, r6
    1bd4:	47 2d       	mov	r20, r7
    1bd6:	58 2d       	mov	r21, r8
    1bd8:	bf 81       	ldd	r27, Y+7	; 0x07
    1bda:	a8 85       	ldd	r26, Y+8	; 0x08
    1bdc:	59 84       	ldd	r5, Y+9	; 0x09
    1bde:	4a 84       	ldd	r4, Y+10	; 0x0a
    1be0:	6b 2f       	mov	r22, r27
    1be2:	7a 2f       	mov	r23, r26
    1be4:	85 2d       	mov	r24, r5
    1be6:	94 2d       	mov	r25, r4
    1be8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1bec:	1b 01       	movw	r2, r22
    1bee:	2c 01       	movw	r4, r24
    1bf0:	29 2d       	mov	r18, r9
    1bf2:	3a 2d       	mov	r19, r10
    1bf4:	4c 2d       	mov	r20, r12
    1bf6:	5d 2d       	mov	r21, r13
    1bf8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1bfa:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1bfc:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1bfe:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1c00:	6b 2f       	mov	r22, r27
    1c02:	7a 2f       	mov	r23, r26
    1c04:	cf 01       	movw	r24, r30
    1c06:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1c0a:	9b 01       	movw	r18, r22
    1c0c:	ac 01       	movw	r20, r24
    1c0e:	c2 01       	movw	r24, r4
    1c10:	b1 01       	movw	r22, r2
    1c12:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1c16:	1b 01       	movw	r2, r22
    1c18:	2c 01       	movw	r4, r24
    1c1a:	2e 2d       	mov	r18, r14
    1c1c:	3f 2d       	mov	r19, r15
    1c1e:	40 2f       	mov	r20, r16
    1c20:	51 2f       	mov	r21, r17
    1c22:	af 85       	ldd	r26, Y+15	; 0x0f
    1c24:	e8 89       	ldd	r30, Y+16	; 0x10
    1c26:	f9 89       	ldd	r31, Y+17	; 0x11
    1c28:	6b 2d       	mov	r22, r11
    1c2a:	7a 2f       	mov	r23, r26
    1c2c:	cf 01       	movw	r24, r30
    1c2e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1c32:	9b 01       	movw	r18, r22
    1c34:	ac 01       	movw	r20, r24
    1c36:	c2 01       	movw	r24, r4
    1c38:	b1 01       	movw	r22, r2
    1c3a:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	57 e4       	ldi	r21, 0x47	; 71
    1c46:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1c4a:	0e 94 42 13 	call	0x2684	; 0x2684 <__fixsfsi>
    1c4e:	ad 81       	ldd	r26, Y+5	; 0x05
    1c50:	be 81       	ldd	r27, Y+6	; 0x06
    1c52:	d8 96       	adiw	r26, 0x38	; 56
    1c54:	6d 93       	st	X+, r22
    1c56:	7d 93       	st	X+, r23
    1c58:	8d 93       	st	X+, r24
    1c5a:	9c 93       	st	X, r25
    1c5c:	db 97       	sbiw	r26, 0x3b	; 59
	cal->a[5] = (int32_t)((c*z + f*zx + i*zy)*(scaling));
    1c5e:	79 81       	ldd	r23, Y+1	; 0x01
    1c60:	27 2f       	mov	r18, r23
    1c62:	36 2d       	mov	r19, r6
    1c64:	47 2d       	mov	r20, r7
    1c66:	58 2d       	mov	r21, r8
    1c68:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c6a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c6c:	ed 85       	ldd	r30, Y+13	; 0x0d
    1c6e:	8e 84       	ldd	r8, Y+14	; 0x0e
    1c70:	6b 2f       	mov	r22, r27
    1c72:	7a 2f       	mov	r23, r26
    1c74:	8e 2f       	mov	r24, r30
    1c76:	98 2d       	mov	r25, r8
    1c78:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1c7c:	2b 01       	movw	r4, r22
    1c7e:	3c 01       	movw	r6, r24
    1c80:	29 2d       	mov	r18, r9
    1c82:	3a 2d       	mov	r19, r10
    1c84:	4c 2d       	mov	r20, r12
    1c86:	5d 2d       	mov	r21, r13
    1c88:	af 85       	ldd	r26, Y+15	; 0x0f
    1c8a:	e8 89       	ldd	r30, Y+16	; 0x10
    1c8c:	d9 88       	ldd	r13, Y+17	; 0x11
    1c8e:	6b 2d       	mov	r22, r11
    1c90:	7a 2f       	mov	r23, r26
    1c92:	8e 2f       	mov	r24, r30
    1c94:	9d 2d       	mov	r25, r13
    1c96:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1c9a:	9b 01       	movw	r18, r22
    1c9c:	ac 01       	movw	r20, r24
    1c9e:	c3 01       	movw	r24, r6
    1ca0:	b2 01       	movw	r22, r4
    1ca2:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1ca6:	4b 01       	movw	r8, r22
    1ca8:	5c 01       	movw	r10, r24
    1caa:	2e 2d       	mov	r18, r14
    1cac:	3f 2d       	mov	r19, r15
    1cae:	40 2f       	mov	r20, r16
    1cb0:	51 2f       	mov	r21, r17
    1cb2:	ba 89       	ldd	r27, Y+18	; 0x12
    1cb4:	ab 89       	ldd	r26, Y+19	; 0x13
    1cb6:	ec 89       	ldd	r30, Y+20	; 0x14
    1cb8:	1d 89       	ldd	r17, Y+21	; 0x15
    1cba:	6b 2f       	mov	r22, r27
    1cbc:	7a 2f       	mov	r23, r26
    1cbe:	8e 2f       	mov	r24, r30
    1cc0:	91 2f       	mov	r25, r17
    1cc2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1cc6:	9b 01       	movw	r18, r22
    1cc8:	ac 01       	movw	r20, r24
    1cca:	c5 01       	movw	r24, r10
    1ccc:	b4 01       	movw	r22, r8
    1cce:	0e 94 00 11 	call	0x2200	; 0x2200 <__addsf3>
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__mulsf3>
    1cde:	0e 94 42 13 	call	0x2684	; 0x2684 <__fixsfsi>
    1ce2:	ed 81       	ldd	r30, Y+5	; 0x05
    1ce4:	fe 81       	ldd	r31, Y+6	; 0x06
    1ce6:	64 af       	std	Z+60, r22	; 0x3c
    1ce8:	75 af       	std	Z+61, r23	; 0x3d
    1cea:	86 af       	std	Z+62, r24	; 0x3e
    1cec:	97 af       	std	Z+63, r25	; 0x3f
				(b*z + e*zx + f*zy),
				(c*z + f*zx + i*zy));
#endif

// If we got here, we're OK, so assign scaling to a[6] and return
	cal->a[6] = (int32_t)scaling;
    1cee:	e0 5c       	subi	r30, 0xC0	; 192
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a1 e0       	ldi	r26, 0x01	; 1
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	80 83       	st	Z, r24
    1cfc:	91 83       	std	Z+1, r25	; 0x01
    1cfe:	a2 83       	std	Z+2, r26	; 0x02
    1d00:	b3 83       	std	Z+3, r27	; 0x03
	return 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <perform_calibration+0x9a6>

// Get determinant of matrix -- check if determinant is too small
	det = n*(x2*y2 - xy*xy) + x*(xy*y - x*y2) + y*(x*xy - y*x2);
	if(det < 0.1 && det > -0.1) {
		//printf("ts_calibrate: determinant is too small -- %f\n",det);
		return 0;
    1d06:	80 e0       	ldi	r24, 0x00	; 0
		c->a[j]=0;
	}
	c->a[1] = c->a[5] = c->a[6] = 1;
	return 1;
*/
}
    1d08:	af 96       	adiw	r28, 0x2f	; 47
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	bf 90       	pop	r11
    1d26:	af 90       	pop	r10
    1d28:	9f 90       	pop	r9
    1d2a:	8f 90       	pop	r8
    1d2c:	7f 90       	pop	r7
    1d2e:	6f 90       	pop	r6
    1d30:	5f 90       	pop	r5
    1d32:	4f 90       	pop	r4
    1d34:	3f 90       	pop	r3
    1d36:	2f 90       	pop	r2
    1d38:	08 95       	ret

00001d3a <eeprom_first>:
static uint8_t EEMEM NVfirst;
static uint8_t first = EE_INIT_SPEC;

uint8_t eeprom_first(void)
{
	if (first == EE_INIT_SPEC)
    1d3a:	80 91 00 01 	lds	r24, 0x0100
    1d3e:	8a 3a       	cpi	r24, 0xAA	; 170
    1d40:	51 f4       	brne	.+20     	; 0x1d56 <eeprom_first+0x1c>
		first = eeprom_read_byte(&NVfirst) != EE_INIT_SPEC;
    1d42:	8c e1       	ldi	r24, 0x1C	; 28
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 10 1c 	call	0x3820	; 0x3820 <__eerd_byte_m644p>
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	8a 3a       	cpi	r24, 0xAA	; 170
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <eeprom_first+0x18>
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	90 93 00 01 	sts	0x0100, r25
	return first;
}
    1d56:	80 91 00 01 	lds	r24, 0x0100
    1d5a:	08 95       	ret

00001d5c <eeprom_first_done>:

void eeprom_first_done(void)
{
	if (first)
    1d5c:	80 91 00 01 	lds	r24, 0x0100
    1d60:	88 23       	and	r24, r24
    1d62:	29 f0       	breq	.+10     	; 0x1d6e <eeprom_first_done+0x12>
		eeprom_update_byte(&NVfirst, EE_INIT_SPEC);
    1d64:	6a ea       	ldi	r22, 0xAA	; 170
    1d66:	8c e1       	ldi	r24, 0x1C	; 28
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__eeupd_byte_m644p>
    1d6e:	08 95       	ret

00001d70 <adc_start>:
	uint8_t channel;
} *requests = 0;

static struct request_t *request_dequeue(void)
{
	struct request_t *s = requests;
    1d70:	80 91 bb 01 	lds	r24, 0x01BB
    1d74:	90 91 bc 01 	lds	r25, 0x01BC
	if (s)
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	89 f0       	breq	.+34     	; 0x1d9e <adc_start+0x2e>
		requests = s->next;
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	20 81       	ld	r18, Z
    1d80:	31 81       	ldd	r19, Z+1	; 0x01
    1d82:	30 93 bc 01 	sts	0x01BC, r19
    1d86:	20 93 bb 01 	sts	0x01BB, r18

static void adc_start(void)
{
	struct request_t *req = request_dequeue();
	if (req) {
		ADC_SET_CHANNEL(req->channel);
    1d8a:	22 81       	ldd	r18, Z+2	; 0x02
    1d8c:	20 93 7c 00 	sts	0x007C, r18
		free(req);
    1d90:	0e 94 f6 18 	call	0x31ec	; 0x31ec <free>
		ADCSRA |= _BV(ADSC);
    1d94:	80 91 7a 00 	lds	r24, 0x007A
    1d98:	80 64       	ori	r24, 0x40	; 64
    1d9a:	80 93 7a 00 	sts	0x007A, r24
    1d9e:	08 95       	ret

00001da0 <adc_init>:

void adc_init(void)
{
	// Clear interrupt, Interrupt enable
	// Clock rate F_CPU / 128 ~ 94kHz (< 200kHz)
	ADCSRA = _BV(ADIF) | _BV(ADIE) | 7;
    1da0:	8f e1       	ldi	r24, 0x1F	; 31
    1da2:	80 93 7a 00 	sts	0x007A, r24
	handlers = 0;
    1da6:	10 92 ba 01 	sts	0x01BA, r1
    1daa:	10 92 b9 01 	sts	0x01B9, r1
	requests = 0;
    1dae:	10 92 bc 01 	sts	0x01BC, r1
    1db2:	10 92 bb 01 	sts	0x01BB, r1
    1db6:	08 95       	ret

00001db8 <adc_register_ISR>:
}

void adc_register_ISR(void (*handler)(uint8_t channel, uint16_t result))
{
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	ec 01       	movw	r28, r24
	struct handler_t *s = malloc(sizeof(struct handler_t));
    1dbe:	84 e0       	ldi	r24, 0x04	; 4
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <malloc>
    1dc6:	fc 01       	movw	r30, r24
	s->next = handlers;
    1dc8:	80 91 b9 01 	lds	r24, 0x01B9
    1dcc:	90 91 ba 01 	lds	r25, 0x01BA
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	80 83       	st	Z, r24
	s->handler = handler;
    1dd4:	d3 83       	std	Z+3, r29	; 0x03
    1dd6:	c2 83       	std	Z+2, r28	; 0x02
	handlers = s;
    1dd8:	f0 93 ba 01 	sts	0x01BA, r31
    1ddc:	e0 93 b9 01 	sts	0x01B9, r30
}
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <adc_request>:
		ADCSRA |= _BV(ADSC);
	}
}

void adc_request(uint8_t channel)
{
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	18 2f       	mov	r17, r24
	if (!requests && !ADC_BUSY()) {
    1dee:	c0 91 bb 01 	lds	r28, 0x01BB
    1df2:	d0 91 bc 01 	lds	r29, 0x01BC
    1df6:	20 97       	sbiw	r28, 0x00	; 0
    1df8:	61 f4       	brne	.+24     	; 0x1e12 <adc_request+0x2c>
    1dfa:	80 91 7a 00 	lds	r24, 0x007A
    1dfe:	86 fd       	sbrc	r24, 6
    1e00:	08 c0       	rjmp	.+16     	; 0x1e12 <adc_request+0x2c>
		ADC_SET_CHANNEL(channel);
    1e02:	10 93 7c 00 	sts	0x007C, r17
		ADCSRA |= _BV(ADSC);
    1e06:	80 91 7a 00 	lds	r24, 0x007A
    1e0a:	80 64       	ori	r24, 0x40	; 64
    1e0c:	80 93 7a 00 	sts	0x007A, r24
		return;
    1e10:	1c c0       	rjmp	.+56     	; 0x1e4a <adc_request+0x64>
	}
	struct request_t **p = &requests;
	struct request_t *s = malloc(sizeof(struct request_t));
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <malloc>
    1e1a:	fc 01       	movw	r30, r24
	s->next = 0;
    1e1c:	11 82       	std	Z+1, r1	; 0x01
    1e1e:	10 82       	st	Z, r1
	s->channel = channel;
    1e20:	12 83       	std	Z+2, r17	; 0x02
	if (!requests && !ADC_BUSY()) {
		ADC_SET_CHANNEL(channel);
		ADCSRA |= _BV(ADSC);
		return;
	}
	struct request_t **p = &requests;
    1e22:	ab eb       	ldi	r26, 0xBB	; 187
    1e24:	b1 e0       	ldi	r27, 0x01	; 1
	struct request_t *s = malloc(sizeof(struct request_t));
	s->next = 0;
	s->channel = channel;
	while (*p)
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <adc_request+0x4a>
		p = &(*p)->next;
    1e28:	de 01       	movw	r26, r28
    1e2a:	09 90       	ld	r0, Y+
    1e2c:	d8 81       	ld	r29, Y
    1e2e:	c0 2d       	mov	r28, r0
	}
	struct request_t **p = &requests;
	struct request_t *s = malloc(sizeof(struct request_t));
	s->next = 0;
	s->channel = channel;
	while (*p)
    1e30:	20 97       	sbiw	r28, 0x00	; 0
    1e32:	d1 f7       	brne	.-12     	; 0x1e28 <adc_request+0x42>
		p = &(*p)->next;
	*p = s;
    1e34:	ed 93       	st	X+, r30
    1e36:	fc 93       	st	X, r31
	if (!ADC_BUSY())
    1e38:	80 91 7a 00 	lds	r24, 0x007A
    1e3c:	86 fd       	sbrc	r24, 6
    1e3e:	05 c0       	rjmp	.+10     	; 0x1e4a <adc_request+0x64>
		adc_start();
}
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
	s->channel = channel;
	while (*p)
		p = &(*p)->next;
	*p = s;
	if (!ADC_BUSY())
		adc_start();
    1e46:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <adc_start>
}
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	08 95       	ret

00001e52 <__vector_24>:

ISR(ADC_vect, ISR_NOBLOCK)
{
    1e52:	78 94       	sei
    1e54:	1f 92       	push	r1
    1e56:	0f 92       	push	r0
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	0f 92       	push	r0
    1e5c:	11 24       	eor	r1, r1
    1e5e:	ef 92       	push	r14
    1e60:	ff 92       	push	r15
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	2f 93       	push	r18
    1e68:	3f 93       	push	r19
    1e6a:	4f 93       	push	r20
    1e6c:	5f 93       	push	r21
    1e6e:	6f 93       	push	r22
    1e70:	7f 93       	push	r23
    1e72:	8f 93       	push	r24
    1e74:	9f 93       	push	r25
    1e76:	af 93       	push	r26
    1e78:	bf 93       	push	r27
    1e7a:	ef 93       	push	r30
    1e7c:	ff 93       	push	r31
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	1f 92       	push	r1
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
	adc_start();
    1e88:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <adc_start>
	uint16_t result = ADC;
    1e8c:	00 91 78 00 	lds	r16, 0x0078
    1e90:	10 91 79 00 	lds	r17, 0x0079
	uint8_t ch = ADMUX & 0x1F;//read the last 5 bits of the ADMUX register
    1e94:	90 91 7c 00 	lds	r25, 0x007C
    1e98:	9f 71       	andi	r25, 0x1F	; 31
	struct handler_t *p = handlers;
    1e9a:	e0 90 b9 01 	lds	r14, 0x01B9
    1e9e:	f0 90 ba 01 	lds	r15, 0x01BA
	while (p) {
    1ea2:	0d c0       	rjmp	.+26     	; 0x1ebe <__vector_24+0x6c>
		p->handler(ch, result);
    1ea4:	d7 01       	movw	r26, r14
    1ea6:	12 96       	adiw	r26, 0x02	; 2
    1ea8:	ed 91       	ld	r30, X+
    1eaa:	fc 91       	ld	r31, X
    1eac:	13 97       	sbiw	r26, 0x03	; 3
    1eae:	b8 01       	movw	r22, r16
    1eb0:	89 2f       	mov	r24, r25
    1eb2:	99 83       	std	Y+1, r25	; 0x01
    1eb4:	09 95       	icall
		p = p->next;
    1eb6:	f7 01       	movw	r30, r14
    1eb8:	e0 80       	ld	r14, Z
    1eba:	f1 80       	ldd	r15, Z+1	; 0x01
    1ebc:	99 81       	ldd	r25, Y+1	; 0x01
{
	adc_start();
	uint16_t result = ADC;
	uint8_t ch = ADMUX & 0x1F;//read the last 5 bits of the ADMUX register
	struct handler_t *p = handlers;
	while (p) {
    1ebe:	e1 14       	cp	r14, r1
    1ec0:	f1 04       	cpc	r15, r1
    1ec2:	81 f7       	brne	.-32     	; 0x1ea4 <__vector_24+0x52>
		p->handler(ch, result);
		p = p->next;
	}
}
    1ec4:	0f 90       	pop	r0
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	ff 91       	pop	r31
    1ecc:	ef 91       	pop	r30
    1ece:	bf 91       	pop	r27
    1ed0:	af 91       	pop	r26
    1ed2:	9f 91       	pop	r25
    1ed4:	8f 91       	pop	r24
    1ed6:	7f 91       	pop	r23
    1ed8:	6f 91       	pop	r22
    1eda:	5f 91       	pop	r21
    1edc:	4f 91       	pop	r20
    1ede:	3f 91       	pop	r19
    1ee0:	2f 91       	pop	r18
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	ef 90       	pop	r14
    1eea:	0f 90       	pop	r0
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	0f 90       	pop	r0
    1ef0:	1f 90       	pop	r1
    1ef2:	18 95       	reti

00001ef4 <pcint_set>:
    1ef4:	21 e0       	ldi	r18, 0x01	; 1
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	08 2e       	mov	r0, r24
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <pcint_set+0xa>
    1efc:	22 0f       	add	r18, r18
    1efe:	0a 94       	dec	r0
    1f00:	ea f7       	brpl	.-6      	; 0x1efc <pcint_set+0x8>
    1f02:	32 2f       	mov	r19, r18
    1f04:	90 91 68 00 	lds	r25, 0x0068
    1f08:	20 95       	com	r18
    1f0a:	29 23       	and	r18, r25
    1f0c:	20 93 68 00 	sts	0x0068, r18
    1f10:	9b b3       	in	r25, 0x1b	; 27
    1f12:	93 2b       	or	r25, r19
    1f14:	9b bb       	out	0x1b, r25	; 27
    1f16:	90 91 68 00 	lds	r25, 0x0068
    1f1a:	93 2b       	or	r25, r19
    1f1c:	90 93 68 00 	sts	0x0068, r25
    1f20:	81 11       	cpse	r24, r1
    1f22:	03 c0       	rjmp	.+6      	; 0x1f2a <pcint_set+0x36>
    1f24:	60 93 6b 00 	sts	0x006B, r22
    1f28:	08 95       	ret
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	19 f4       	brne	.+6      	; 0x1f34 <pcint_set+0x40>
    1f2e:	60 93 6c 00 	sts	0x006C, r22
    1f32:	08 95       	ret
    1f34:	82 30       	cpi	r24, 0x02	; 2
    1f36:	19 f4       	brne	.+6      	; 0x1f3e <pcint_set+0x4a>
    1f38:	60 93 6d 00 	sts	0x006D, r22
    1f3c:	08 95       	ret
    1f3e:	83 30       	cpi	r24, 0x03	; 3
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <pcint_set+0x52>
    1f42:	60 93 73 00 	sts	0x0073, r22
    1f46:	08 95       	ret

00001f48 <_fpadd_parts>:
    1f48:	a4 e0       	ldi	r26, 0x04	; 4
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	ea ea       	ldi	r30, 0xAA	; 170
    1f4e:	ff e0       	ldi	r31, 0x0F	; 15
    1f50:	0c 94 05 18 	jmp	0x300a	; 0x300a <__prologue_saves__+0x4>
    1f54:	7c 01       	movw	r14, r24
    1f56:	6a 01       	movw	r12, r20
    1f58:	fc 01       	movw	r30, r24
    1f5a:	80 81       	ld	r24, Z
    1f5c:	82 30       	cpi	r24, 0x02	; 2
    1f5e:	08 f4       	brcc	.+2      	; 0x1f62 <_fpadd_parts+0x1a>
    1f60:	4a c1       	rjmp	.+660    	; 0x21f6 <_fpadd_parts+0x2ae>
    1f62:	fb 01       	movw	r30, r22
    1f64:	90 81       	ld	r25, Z
    1f66:	92 30       	cpi	r25, 0x02	; 2
    1f68:	08 f4       	brcc	.+2      	; 0x1f6c <_fpadd_parts+0x24>
    1f6a:	42 c1       	rjmp	.+644    	; 0x21f0 <_fpadd_parts+0x2a8>
    1f6c:	84 30       	cpi	r24, 0x04	; 4
    1f6e:	79 f4       	brne	.+30     	; 0x1f8e <_fpadd_parts+0x46>
    1f70:	94 30       	cpi	r25, 0x04	; 4
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <_fpadd_parts+0x2e>
    1f74:	40 c1       	rjmp	.+640    	; 0x21f6 <_fpadd_parts+0x2ae>
    1f76:	f7 01       	movw	r30, r14
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	fb 01       	movw	r30, r22
    1f7c:	81 81       	ldd	r24, Z+1	; 0x01
    1f7e:	98 17       	cp	r25, r24
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <_fpadd_parts+0x3c>
    1f82:	39 c1       	rjmp	.+626    	; 0x21f6 <_fpadd_parts+0x2ae>
    1f84:	a7 e0       	ldi	r26, 0x07	; 7
    1f86:	ea 2e       	mov	r14, r26
    1f88:	a1 e0       	ldi	r26, 0x01	; 1
    1f8a:	fa 2e       	mov	r15, r26
    1f8c:	34 c1       	rjmp	.+616    	; 0x21f6 <_fpadd_parts+0x2ae>
    1f8e:	94 30       	cpi	r25, 0x04	; 4
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <_fpadd_parts+0x4c>
    1f92:	2e c1       	rjmp	.+604    	; 0x21f0 <_fpadd_parts+0x2a8>
    1f94:	92 30       	cpi	r25, 0x02	; 2
    1f96:	91 f4       	brne	.+36     	; 0x1fbc <_fpadd_parts+0x74>
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <_fpadd_parts+0x56>
    1f9c:	2c c1       	rjmp	.+600    	; 0x21f6 <_fpadd_parts+0x2ae>
    1f9e:	88 e0       	ldi	r24, 0x08	; 8
    1fa0:	f7 01       	movw	r30, r14
    1fa2:	da 01       	movw	r26, r20
    1fa4:	01 90       	ld	r0, Z+
    1fa6:	0d 92       	st	X+, r0
    1fa8:	8a 95       	dec	r24
    1faa:	e1 f7       	brne	.-8      	; 0x1fa4 <_fpadd_parts+0x5c>
    1fac:	fb 01       	movw	r30, r22
    1fae:	81 81       	ldd	r24, Z+1	; 0x01
    1fb0:	f7 01       	movw	r30, r14
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	89 23       	and	r24, r25
    1fb6:	fa 01       	movw	r30, r20
    1fb8:	81 83       	std	Z+1, r24	; 0x01
    1fba:	1c c1       	rjmp	.+568    	; 0x21f4 <_fpadd_parts+0x2ac>
    1fbc:	82 30       	cpi	r24, 0x02	; 2
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <_fpadd_parts+0x7a>
    1fc0:	17 c1       	rjmp	.+558    	; 0x21f0 <_fpadd_parts+0x2a8>
    1fc2:	f7 01       	movw	r30, r14
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	fb 01       	movw	r30, r22
    1fca:	a2 81       	ldd	r26, Z+2	; 0x02
    1fcc:	b3 81       	ldd	r27, Z+3	; 0x03
    1fce:	f7 01       	movw	r30, r14
    1fd0:	04 81       	ldd	r16, Z+4	; 0x04
    1fd2:	15 81       	ldd	r17, Z+5	; 0x05
    1fd4:	26 81       	ldd	r18, Z+6	; 0x06
    1fd6:	37 81       	ldd	r19, Z+7	; 0x07
    1fd8:	fb 01       	movw	r30, r22
    1fda:	84 80       	ldd	r8, Z+4	; 0x04
    1fdc:	95 80       	ldd	r9, Z+5	; 0x05
    1fde:	a6 80       	ldd	r10, Z+6	; 0x06
    1fe0:	b7 80       	ldd	r11, Z+7	; 0x07
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	ea 1b       	sub	r30, r26
    1fe6:	fb 0b       	sbc	r31, r27
    1fe8:	af 01       	movw	r20, r30
    1fea:	f7 ff       	sbrs	r31, 7
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <_fpadd_parts+0xae>
    1fee:	44 27       	eor	r20, r20
    1ff0:	55 27       	eor	r21, r21
    1ff2:	4e 1b       	sub	r20, r30
    1ff4:	5f 0b       	sbc	r21, r31
    1ff6:	40 32       	cpi	r20, 0x20	; 32
    1ff8:	51 05       	cpc	r21, r1
    1ffa:	0c f0       	brlt	.+2      	; 0x1ffe <_fpadd_parts+0xb6>
    1ffc:	74 c0       	rjmp	.+232    	; 0x20e6 <_fpadd_parts+0x19e>
    1ffe:	1e 16       	cp	r1, r30
    2000:	1f 06       	cpc	r1, r31
    2002:	b4 f5       	brge	.+108    	; 0x2070 <_fpadd_parts+0x128>
    2004:	24 01       	movw	r4, r8
    2006:	35 01       	movw	r6, r10
    2008:	04 2e       	mov	r0, r20
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <_fpadd_parts+0xcc>
    200c:	76 94       	lsr	r7
    200e:	67 94       	ror	r6
    2010:	57 94       	ror	r5
    2012:	47 94       	ror	r4
    2014:	0a 94       	dec	r0
    2016:	d2 f7       	brpl	.-12     	; 0x200c <_fpadd_parts+0xc4>
    2018:	49 82       	std	Y+1, r4	; 0x01
    201a:	5a 82       	std	Y+2, r5	; 0x02
    201c:	6b 82       	std	Y+3, r6	; 0x03
    201e:	7c 82       	std	Y+4, r7	; 0x04
    2020:	41 2c       	mov	r4, r1
    2022:	51 2c       	mov	r5, r1
    2024:	32 01       	movw	r6, r4
    2026:	43 94       	inc	r4
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <_fpadd_parts+0xea>
    202a:	44 0c       	add	r4, r4
    202c:	55 1c       	adc	r5, r5
    202e:	66 1c       	adc	r6, r6
    2030:	77 1c       	adc	r7, r7
    2032:	4a 95       	dec	r20
    2034:	d2 f7       	brpl	.-12     	; 0x202a <_fpadd_parts+0xe2>
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	44 1a       	sub	r4, r20
    203a:	51 08       	sbc	r5, r1
    203c:	61 08       	sbc	r6, r1
    203e:	71 08       	sbc	r7, r1
    2040:	48 20       	and	r4, r8
    2042:	59 20       	and	r5, r9
    2044:	6a 20       	and	r6, r10
    2046:	7b 20       	and	r7, r11
    2048:	81 2c       	mov	r8, r1
    204a:	91 2c       	mov	r9, r1
    204c:	54 01       	movw	r10, r8
    204e:	83 94       	inc	r8
    2050:	45 28       	or	r4, r5
    2052:	46 28       	or	r4, r6
    2054:	47 28       	or	r4, r7
    2056:	19 f4       	brne	.+6      	; 0x205e <_fpadd_parts+0x116>
    2058:	81 2c       	mov	r8, r1
    205a:	91 2c       	mov	r9, r1
    205c:	54 01       	movw	r10, r8
    205e:	49 80       	ldd	r4, Y+1	; 0x01
    2060:	5a 80       	ldd	r5, Y+2	; 0x02
    2062:	6b 80       	ldd	r6, Y+3	; 0x03
    2064:	7c 80       	ldd	r7, Y+4	; 0x04
    2066:	84 28       	or	r8, r4
    2068:	95 28       	or	r9, r5
    206a:	a6 28       	or	r10, r6
    206c:	b7 28       	or	r11, r7
    206e:	46 c0       	rjmp	.+140    	; 0x20fc <_fpadd_parts+0x1b4>
    2070:	ef 2b       	or	r30, r31
    2072:	09 f4       	brne	.+2      	; 0x2076 <_fpadd_parts+0x12e>
    2074:	43 c0       	rjmp	.+134    	; 0x20fc <_fpadd_parts+0x1b4>
    2076:	84 0f       	add	r24, r20
    2078:	95 1f       	adc	r25, r21
    207a:	28 01       	movw	r4, r16
    207c:	39 01       	movw	r6, r18
    207e:	04 2e       	mov	r0, r20
    2080:	04 c0       	rjmp	.+8      	; 0x208a <_fpadd_parts+0x142>
    2082:	76 94       	lsr	r7
    2084:	67 94       	ror	r6
    2086:	57 94       	ror	r5
    2088:	47 94       	ror	r4
    208a:	0a 94       	dec	r0
    208c:	d2 f7       	brpl	.-12     	; 0x2082 <_fpadd_parts+0x13a>
    208e:	49 82       	std	Y+1, r4	; 0x01
    2090:	5a 82       	std	Y+2, r5	; 0x02
    2092:	6b 82       	std	Y+3, r6	; 0x03
    2094:	7c 82       	std	Y+4, r7	; 0x04
    2096:	41 2c       	mov	r4, r1
    2098:	51 2c       	mov	r5, r1
    209a:	32 01       	movw	r6, r4
    209c:	43 94       	inc	r4
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <_fpadd_parts+0x160>
    20a0:	44 0c       	add	r4, r4
    20a2:	55 1c       	adc	r5, r5
    20a4:	66 1c       	adc	r6, r6
    20a6:	77 1c       	adc	r7, r7
    20a8:	4a 95       	dec	r20
    20aa:	d2 f7       	brpl	.-12     	; 0x20a0 <_fpadd_parts+0x158>
    20ac:	41 e0       	ldi	r20, 0x01	; 1
    20ae:	44 1a       	sub	r4, r20
    20b0:	51 08       	sbc	r5, r1
    20b2:	61 08       	sbc	r6, r1
    20b4:	71 08       	sbc	r7, r1
    20b6:	40 22       	and	r4, r16
    20b8:	51 22       	and	r5, r17
    20ba:	62 22       	and	r6, r18
    20bc:	73 22       	and	r7, r19
    20be:	01 e0       	ldi	r16, 0x01	; 1
    20c0:	10 e0       	ldi	r17, 0x00	; 0
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	45 28       	or	r4, r5
    20c8:	46 28       	or	r4, r6
    20ca:	47 28       	or	r4, r7
    20cc:	19 f4       	brne	.+6      	; 0x20d4 <_fpadd_parts+0x18c>
    20ce:	00 e0       	ldi	r16, 0x00	; 0
    20d0:	10 e0       	ldi	r17, 0x00	; 0
    20d2:	98 01       	movw	r18, r16
    20d4:	49 80       	ldd	r4, Y+1	; 0x01
    20d6:	5a 80       	ldd	r5, Y+2	; 0x02
    20d8:	6b 80       	ldd	r6, Y+3	; 0x03
    20da:	7c 80       	ldd	r7, Y+4	; 0x04
    20dc:	04 29       	or	r16, r4
    20de:	15 29       	or	r17, r5
    20e0:	26 29       	or	r18, r6
    20e2:	37 29       	or	r19, r7
    20e4:	0b c0       	rjmp	.+22     	; 0x20fc <_fpadd_parts+0x1b4>
    20e6:	a8 17       	cp	r26, r24
    20e8:	b9 07       	cpc	r27, r25
    20ea:	24 f4       	brge	.+8      	; 0x20f4 <_fpadd_parts+0x1ac>
    20ec:	81 2c       	mov	r8, r1
    20ee:	91 2c       	mov	r9, r1
    20f0:	54 01       	movw	r10, r8
    20f2:	04 c0       	rjmp	.+8      	; 0x20fc <_fpadd_parts+0x1b4>
    20f4:	cd 01       	movw	r24, r26
    20f6:	00 e0       	ldi	r16, 0x00	; 0
    20f8:	10 e0       	ldi	r17, 0x00	; 0
    20fa:	98 01       	movw	r18, r16
    20fc:	f7 01       	movw	r30, r14
    20fe:	41 81       	ldd	r20, Z+1	; 0x01
    2100:	fb 01       	movw	r30, r22
    2102:	51 81       	ldd	r21, Z+1	; 0x01
    2104:	45 17       	cp	r20, r21
    2106:	09 f4       	brne	.+2      	; 0x210a <_fpadd_parts+0x1c2>
    2108:	46 c0       	rjmp	.+140    	; 0x2196 <_fpadd_parts+0x24e>
    210a:	44 23       	and	r20, r20
    210c:	49 f0       	breq	.+18     	; 0x2120 <_fpadd_parts+0x1d8>
    210e:	24 01       	movw	r4, r8
    2110:	35 01       	movw	r6, r10
    2112:	40 1a       	sub	r4, r16
    2114:	51 0a       	sbc	r5, r17
    2116:	62 0a       	sbc	r6, r18
    2118:	73 0a       	sbc	r7, r19
    211a:	93 01       	movw	r18, r6
    211c:	82 01       	movw	r16, r4
    211e:	04 c0       	rjmp	.+8      	; 0x2128 <_fpadd_parts+0x1e0>
    2120:	08 19       	sub	r16, r8
    2122:	19 09       	sbc	r17, r9
    2124:	2a 09       	sbc	r18, r10
    2126:	3b 09       	sbc	r19, r11
    2128:	37 fd       	sbrc	r19, 7
    212a:	05 c0       	rjmp	.+10     	; 0x2136 <_fpadd_parts+0x1ee>
    212c:	f6 01       	movw	r30, r12
    212e:	11 82       	std	Z+1, r1	; 0x01
    2130:	93 83       	std	Z+3, r25	; 0x03
    2132:	82 83       	std	Z+2, r24	; 0x02
    2134:	0c c0       	rjmp	.+24     	; 0x214e <_fpadd_parts+0x206>
    2136:	41 e0       	ldi	r20, 0x01	; 1
    2138:	f6 01       	movw	r30, r12
    213a:	41 83       	std	Z+1, r20	; 0x01
    213c:	93 83       	std	Z+3, r25	; 0x03
    213e:	82 83       	std	Z+2, r24	; 0x02
    2140:	30 95       	com	r19
    2142:	20 95       	com	r18
    2144:	10 95       	com	r17
    2146:	01 95       	neg	r16
    2148:	1f 4f       	sbci	r17, 0xFF	; 255
    214a:	2f 4f       	sbci	r18, 0xFF	; 255
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	04 83       	std	Z+4, r16	; 0x04
    2150:	15 83       	std	Z+5, r17	; 0x05
    2152:	26 83       	std	Z+6, r18	; 0x06
    2154:	37 83       	std	Z+7, r19	; 0x07
    2156:	0e c0       	rjmp	.+28     	; 0x2174 <_fpadd_parts+0x22c>
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	aa 1f       	adc	r26, r26
    215e:	bb 1f       	adc	r27, r27
    2160:	f6 01       	movw	r30, r12
    2162:	84 83       	std	Z+4, r24	; 0x04
    2164:	95 83       	std	Z+5, r25	; 0x05
    2166:	a6 83       	std	Z+6, r26	; 0x06
    2168:	b7 83       	std	Z+7, r27	; 0x07
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	93 83       	std	Z+3, r25	; 0x03
    2172:	82 83       	std	Z+2, r24	; 0x02
    2174:	f6 01       	movw	r30, r12
    2176:	84 81       	ldd	r24, Z+4	; 0x04
    2178:	95 81       	ldd	r25, Z+5	; 0x05
    217a:	a6 81       	ldd	r26, Z+6	; 0x06
    217c:	b7 81       	ldd	r27, Z+7	; 0x07
    217e:	ac 01       	movw	r20, r24
    2180:	bd 01       	movw	r22, r26
    2182:	41 50       	subi	r20, 0x01	; 1
    2184:	51 09       	sbc	r21, r1
    2186:	61 09       	sbc	r22, r1
    2188:	71 09       	sbc	r23, r1
    218a:	4f 3f       	cpi	r20, 0xFF	; 255
    218c:	5f 4f       	sbci	r21, 0xFF	; 255
    218e:	6f 4f       	sbci	r22, 0xFF	; 255
    2190:	7f 43       	sbci	r23, 0x3F	; 63
    2192:	10 f3       	brcs	.-60     	; 0x2158 <_fpadd_parts+0x210>
    2194:	0c c0       	rjmp	.+24     	; 0x21ae <_fpadd_parts+0x266>
    2196:	f6 01       	movw	r30, r12
    2198:	41 83       	std	Z+1, r20	; 0x01
    219a:	93 83       	std	Z+3, r25	; 0x03
    219c:	82 83       	std	Z+2, r24	; 0x02
    219e:	08 0d       	add	r16, r8
    21a0:	19 1d       	adc	r17, r9
    21a2:	2a 1d       	adc	r18, r10
    21a4:	3b 1d       	adc	r19, r11
    21a6:	04 83       	std	Z+4, r16	; 0x04
    21a8:	15 83       	std	Z+5, r17	; 0x05
    21aa:	26 83       	std	Z+6, r18	; 0x06
    21ac:	37 83       	std	Z+7, r19	; 0x07
    21ae:	83 e0       	ldi	r24, 0x03	; 3
    21b0:	f6 01       	movw	r30, r12
    21b2:	80 83       	st	Z, r24
    21b4:	44 81       	ldd	r20, Z+4	; 0x04
    21b6:	55 81       	ldd	r21, Z+5	; 0x05
    21b8:	66 81       	ldd	r22, Z+6	; 0x06
    21ba:	77 81       	ldd	r23, Z+7	; 0x07
    21bc:	77 ff       	sbrs	r23, 7
    21be:	1a c0       	rjmp	.+52     	; 0x21f4 <_fpadd_parts+0x2ac>
    21c0:	db 01       	movw	r26, r22
    21c2:	ca 01       	movw	r24, r20
    21c4:	81 70       	andi	r24, 0x01	; 1
    21c6:	99 27       	eor	r25, r25
    21c8:	aa 27       	eor	r26, r26
    21ca:	bb 27       	eor	r27, r27
    21cc:	76 95       	lsr	r23
    21ce:	67 95       	ror	r22
    21d0:	57 95       	ror	r21
    21d2:	47 95       	ror	r20
    21d4:	84 2b       	or	r24, r20
    21d6:	95 2b       	or	r25, r21
    21d8:	a6 2b       	or	r26, r22
    21da:	b7 2b       	or	r27, r23
    21dc:	84 83       	std	Z+4, r24	; 0x04
    21de:	95 83       	std	Z+5, r25	; 0x05
    21e0:	a6 83       	std	Z+6, r26	; 0x06
    21e2:	b7 83       	std	Z+7, r27	; 0x07
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	01 96       	adiw	r24, 0x01	; 1
    21ea:	93 83       	std	Z+3, r25	; 0x03
    21ec:	82 83       	std	Z+2, r24	; 0x02
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <_fpadd_parts+0x2ac>
    21f0:	7b 01       	movw	r14, r22
    21f2:	01 c0       	rjmp	.+2      	; 0x21f6 <_fpadd_parts+0x2ae>
    21f4:	76 01       	movw	r14, r12
    21f6:	c7 01       	movw	r24, r14
    21f8:	24 96       	adiw	r28, 0x04	; 4
    21fa:	e0 e1       	ldi	r30, 0x10	; 16
    21fc:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__epilogue_restores__+0x4>

00002200 <__addsf3>:
    2200:	a0 e2       	ldi	r26, 0x20	; 32
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e6 e0       	ldi	r30, 0x06	; 6
    2206:	f1 e1       	ldi	r31, 0x11	; 17
    2208:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x20>
    220c:	6d 8f       	std	Y+29, r22	; 0x1d
    220e:	7e 8f       	std	Y+30, r23	; 0x1e
    2210:	8f 8f       	std	Y+31, r24	; 0x1f
    2212:	98 a3       	std	Y+32, r25	; 0x20
    2214:	29 8f       	std	Y+25, r18	; 0x19
    2216:	3a 8f       	std	Y+26, r19	; 0x1a
    2218:	4b 8f       	std	Y+27, r20	; 0x1b
    221a:	5c 8f       	std	Y+28, r21	; 0x1c
    221c:	be 01       	movw	r22, r28
    221e:	6f 5e       	subi	r22, 0xEF	; 239
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	ce 01       	movw	r24, r28
    2224:	4d 96       	adiw	r24, 0x1d	; 29
    2226:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    222a:	be 01       	movw	r22, r28
    222c:	67 5f       	subi	r22, 0xF7	; 247
    222e:	7f 4f       	sbci	r23, 0xFF	; 255
    2230:	ce 01       	movw	r24, r28
    2232:	49 96       	adiw	r24, 0x19	; 25
    2234:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    2238:	ae 01       	movw	r20, r28
    223a:	4f 5f       	subi	r20, 0xFF	; 255
    223c:	5f 4f       	sbci	r21, 0xFF	; 255
    223e:	be 01       	movw	r22, r28
    2240:	67 5f       	subi	r22, 0xF7	; 247
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	ce 01       	movw	r24, r28
    2246:	41 96       	adiw	r24, 0x11	; 17
    2248:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_fpadd_parts>
    224c:	0e 94 07 14 	call	0x280e	; 0x280e <__pack_f>
    2250:	a0 96       	adiw	r28, 0x20	; 32
    2252:	e2 e0       	ldi	r30, 0x02	; 2
    2254:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x20>

00002258 <__subsf3>:
    2258:	a0 e2       	ldi	r26, 0x20	; 32
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e2 e3       	ldi	r30, 0x32	; 50
    225e:	f1 e1       	ldi	r31, 0x11	; 17
    2260:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x20>
    2264:	6d 8f       	std	Y+29, r22	; 0x1d
    2266:	7e 8f       	std	Y+30, r23	; 0x1e
    2268:	8f 8f       	std	Y+31, r24	; 0x1f
    226a:	98 a3       	std	Y+32, r25	; 0x20
    226c:	29 8f       	std	Y+25, r18	; 0x19
    226e:	3a 8f       	std	Y+26, r19	; 0x1a
    2270:	4b 8f       	std	Y+27, r20	; 0x1b
    2272:	5c 8f       	std	Y+28, r21	; 0x1c
    2274:	be 01       	movw	r22, r28
    2276:	6f 5e       	subi	r22, 0xEF	; 239
    2278:	7f 4f       	sbci	r23, 0xFF	; 255
    227a:	ce 01       	movw	r24, r28
    227c:	4d 96       	adiw	r24, 0x1d	; 29
    227e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    2282:	be 01       	movw	r22, r28
    2284:	67 5f       	subi	r22, 0xF7	; 247
    2286:	7f 4f       	sbci	r23, 0xFF	; 255
    2288:	ce 01       	movw	r24, r28
    228a:	49 96       	adiw	r24, 0x19	; 25
    228c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    2290:	8a 85       	ldd	r24, Y+10	; 0x0a
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	89 27       	eor	r24, r25
    2296:	8a 87       	std	Y+10, r24	; 0x0a
    2298:	ae 01       	movw	r20, r28
    229a:	4f 5f       	subi	r20, 0xFF	; 255
    229c:	5f 4f       	sbci	r21, 0xFF	; 255
    229e:	be 01       	movw	r22, r28
    22a0:	67 5f       	subi	r22, 0xF7	; 247
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	ce 01       	movw	r24, r28
    22a6:	41 96       	adiw	r24, 0x11	; 17
    22a8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_fpadd_parts>
    22ac:	0e 94 07 14 	call	0x280e	; 0x280e <__pack_f>
    22b0:	a0 96       	adiw	r28, 0x20	; 32
    22b2:	e2 e0       	ldi	r30, 0x02	; 2
    22b4:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x20>

000022b8 <__mulsf3>:
    22b8:	a0 e2       	ldi	r26, 0x20	; 32
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e2 e6       	ldi	r30, 0x62	; 98
    22be:	f1 e1       	ldi	r31, 0x11	; 17
    22c0:	0c 94 05 18 	jmp	0x300a	; 0x300a <__prologue_saves__+0x4>
    22c4:	6d 8f       	std	Y+29, r22	; 0x1d
    22c6:	7e 8f       	std	Y+30, r23	; 0x1e
    22c8:	8f 8f       	std	Y+31, r24	; 0x1f
    22ca:	98 a3       	std	Y+32, r25	; 0x20
    22cc:	29 8f       	std	Y+25, r18	; 0x19
    22ce:	3a 8f       	std	Y+26, r19	; 0x1a
    22d0:	4b 8f       	std	Y+27, r20	; 0x1b
    22d2:	5c 8f       	std	Y+28, r21	; 0x1c
    22d4:	be 01       	movw	r22, r28
    22d6:	6f 5e       	subi	r22, 0xEF	; 239
    22d8:	7f 4f       	sbci	r23, 0xFF	; 255
    22da:	ce 01       	movw	r24, r28
    22dc:	4d 96       	adiw	r24, 0x1d	; 29
    22de:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    22e2:	be 01       	movw	r22, r28
    22e4:	67 5f       	subi	r22, 0xF7	; 247
    22e6:	7f 4f       	sbci	r23, 0xFF	; 255
    22e8:	ce 01       	movw	r24, r28
    22ea:	49 96       	adiw	r24, 0x19	; 25
    22ec:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    22f0:	99 89       	ldd	r25, Y+17	; 0x11
    22f2:	92 30       	cpi	r25, 0x02	; 2
    22f4:	08 f4       	brcc	.+2      	; 0x22f8 <__mulsf3+0x40>
    22f6:	12 c0       	rjmp	.+36     	; 0x231c <__mulsf3+0x64>
    22f8:	89 85       	ldd	r24, Y+9	; 0x09
    22fa:	82 30       	cpi	r24, 0x02	; 2
    22fc:	08 f4       	brcc	.+2      	; 0x2300 <__mulsf3+0x48>
    22fe:	1a c0       	rjmp	.+52     	; 0x2334 <__mulsf3+0x7c>
    2300:	94 30       	cpi	r25, 0x04	; 4
    2302:	21 f4       	brne	.+8      	; 0x230c <__mulsf3+0x54>
    2304:	82 30       	cpi	r24, 0x02	; 2
    2306:	09 f4       	brne	.+2      	; 0x230a <__mulsf3+0x52>
    2308:	b4 c0       	rjmp	.+360    	; 0x2472 <__mulsf3+0x1ba>
    230a:	08 c0       	rjmp	.+16     	; 0x231c <__mulsf3+0x64>
    230c:	84 30       	cpi	r24, 0x04	; 4
    230e:	21 f4       	brne	.+8      	; 0x2318 <__mulsf3+0x60>
    2310:	92 30       	cpi	r25, 0x02	; 2
    2312:	09 f4       	brne	.+2      	; 0x2316 <__mulsf3+0x5e>
    2314:	ae c0       	rjmp	.+348    	; 0x2472 <__mulsf3+0x1ba>
    2316:	0e c0       	rjmp	.+28     	; 0x2334 <__mulsf3+0x7c>
    2318:	92 30       	cpi	r25, 0x02	; 2
    231a:	51 f4       	brne	.+20     	; 0x2330 <__mulsf3+0x78>
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	2a 89       	ldd	r18, Y+18	; 0x12
    2320:	9a 85       	ldd	r25, Y+10	; 0x0a
    2322:	29 13       	cpse	r18, r25
    2324:	01 c0       	rjmp	.+2      	; 0x2328 <__mulsf3+0x70>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	8a 8b       	std	Y+18, r24	; 0x12
    232a:	ce 01       	movw	r24, r28
    232c:	41 96       	adiw	r24, 0x11	; 17
    232e:	a3 c0       	rjmp	.+326    	; 0x2476 <__mulsf3+0x1be>
    2330:	82 30       	cpi	r24, 0x02	; 2
    2332:	51 f4       	brne	.+20     	; 0x2348 <__mulsf3+0x90>
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	2a 89       	ldd	r18, Y+18	; 0x12
    2338:	9a 85       	ldd	r25, Y+10	; 0x0a
    233a:	29 13       	cpse	r18, r25
    233c:	01 c0       	rjmp	.+2      	; 0x2340 <__mulsf3+0x88>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	8a 87       	std	Y+10, r24	; 0x0a
    2342:	ce 01       	movw	r24, r28
    2344:	09 96       	adiw	r24, 0x09	; 9
    2346:	97 c0       	rjmp	.+302    	; 0x2476 <__mulsf3+0x1be>
    2348:	8d 88       	ldd	r8, Y+21	; 0x15
    234a:	9e 88       	ldd	r9, Y+22	; 0x16
    234c:	af 88       	ldd	r10, Y+23	; 0x17
    234e:	b8 8c       	ldd	r11, Y+24	; 0x18
    2350:	0d 85       	ldd	r16, Y+13	; 0x0d
    2352:	1e 85       	ldd	r17, Y+14	; 0x0e
    2354:	2f 85       	ldd	r18, Y+15	; 0x0f
    2356:	38 89       	ldd	r19, Y+16	; 0x10
    2358:	e0 e2       	ldi	r30, 0x20	; 32
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	dc 01       	movw	r26, r24
    2362:	c1 2c       	mov	r12, r1
    2364:	d1 2c       	mov	r13, r1
    2366:	76 01       	movw	r14, r12
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	ba 01       	movw	r22, r20
    236e:	80 fe       	sbrs	r8, 0
    2370:	18 c0       	rjmp	.+48     	; 0x23a2 <__mulsf3+0xea>
    2372:	40 0f       	add	r20, r16
    2374:	51 1f       	adc	r21, r17
    2376:	62 1f       	adc	r22, r18
    2378:	73 1f       	adc	r23, r19
    237a:	8c 0d       	add	r24, r12
    237c:	9d 1d       	adc	r25, r13
    237e:	ae 1d       	adc	r26, r14
    2380:	bf 1d       	adc	r27, r15
    2382:	41 2c       	mov	r4, r1
    2384:	51 2c       	mov	r5, r1
    2386:	32 01       	movw	r6, r4
    2388:	43 94       	inc	r4
    238a:	40 17       	cp	r20, r16
    238c:	51 07       	cpc	r21, r17
    238e:	62 07       	cpc	r22, r18
    2390:	73 07       	cpc	r23, r19
    2392:	18 f0       	brcs	.+6      	; 0x239a <__mulsf3+0xe2>
    2394:	41 2c       	mov	r4, r1
    2396:	51 2c       	mov	r5, r1
    2398:	32 01       	movw	r6, r4
    239a:	84 0d       	add	r24, r4
    239c:	95 1d       	adc	r25, r5
    239e:	a6 1d       	adc	r26, r6
    23a0:	b7 1d       	adc	r27, r7
    23a2:	cc 0c       	add	r12, r12
    23a4:	dd 1c       	adc	r13, r13
    23a6:	ee 1c       	adc	r14, r14
    23a8:	ff 1c       	adc	r15, r15
    23aa:	37 ff       	sbrs	r19, 7
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <__mulsf3+0xfa>
    23ae:	68 94       	set
    23b0:	c0 f8       	bld	r12, 0
    23b2:	00 0f       	add	r16, r16
    23b4:	11 1f       	adc	r17, r17
    23b6:	22 1f       	adc	r18, r18
    23b8:	33 1f       	adc	r19, r19
    23ba:	b6 94       	lsr	r11
    23bc:	a7 94       	ror	r10
    23be:	97 94       	ror	r9
    23c0:	87 94       	ror	r8
    23c2:	31 97       	sbiw	r30, 0x01	; 1
    23c4:	a1 f6       	brne	.-88     	; 0x236e <__mulsf3+0xb6>
    23c6:	2b 89       	ldd	r18, Y+19	; 0x13
    23c8:	3c 89       	ldd	r19, Y+20	; 0x14
    23ca:	eb 85       	ldd	r30, Y+11	; 0x0b
    23cc:	fc 85       	ldd	r31, Y+12	; 0x0c
    23ce:	2e 0f       	add	r18, r30
    23d0:	3f 1f       	adc	r19, r31
    23d2:	2e 5f       	subi	r18, 0xFE	; 254
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
    23d6:	3c 83       	std	Y+4, r19	; 0x04
    23d8:	2b 83       	std	Y+3, r18	; 0x03
    23da:	21 e0       	ldi	r18, 0x01	; 1
    23dc:	ea 89       	ldd	r30, Y+18	; 0x12
    23de:	3a 85       	ldd	r19, Y+10	; 0x0a
    23e0:	e3 13       	cpse	r30, r19
    23e2:	01 c0       	rjmp	.+2      	; 0x23e6 <__mulsf3+0x12e>
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	2a 83       	std	Y+2, r18	; 0x02
    23e8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ea:	fc 81       	ldd	r31, Y+4	; 0x04
    23ec:	0c c0       	rjmp	.+24     	; 0x2406 <__mulsf3+0x14e>
    23ee:	80 ff       	sbrs	r24, 0
    23f0:	05 c0       	rjmp	.+10     	; 0x23fc <__mulsf3+0x144>
    23f2:	76 95       	lsr	r23
    23f4:	67 95       	ror	r22
    23f6:	57 95       	ror	r21
    23f8:	47 95       	ror	r20
    23fa:	70 68       	ori	r23, 0x80	; 128
    23fc:	b6 95       	lsr	r27
    23fe:	a7 95       	ror	r26
    2400:	97 95       	ror	r25
    2402:	87 95       	ror	r24
    2404:	31 96       	adiw	r30, 0x01	; 1
    2406:	b7 fd       	sbrc	r27, 7
    2408:	f2 cf       	rjmp	.-28     	; 0x23ee <__mulsf3+0x136>
    240a:	9f 01       	movw	r18, r30
    240c:	0c c0       	rjmp	.+24     	; 0x2426 <__mulsf3+0x16e>
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	aa 1f       	adc	r26, r26
    2414:	bb 1f       	adc	r27, r27
    2416:	77 fd       	sbrc	r23, 7
    2418:	81 60       	ori	r24, 0x01	; 1
    241a:	44 0f       	add	r20, r20
    241c:	55 1f       	adc	r21, r21
    241e:	66 1f       	adc	r22, r22
    2420:	77 1f       	adc	r23, r23
    2422:	21 50       	subi	r18, 0x01	; 1
    2424:	31 09       	sbc	r19, r1
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	a1 05       	cpc	r26, r1
    242a:	e0 e4       	ldi	r30, 0x40	; 64
    242c:	be 07       	cpc	r27, r30
    242e:	78 f3       	brcs	.-34     	; 0x240e <__mulsf3+0x156>
    2430:	2b 83       	std	Y+3, r18	; 0x03
    2432:	3c 83       	std	Y+4, r19	; 0x04
    2434:	8c 01       	movw	r16, r24
    2436:	9d 01       	movw	r18, r26
    2438:	0f 77       	andi	r16, 0x7F	; 127
    243a:	11 27       	eor	r17, r17
    243c:	22 27       	eor	r18, r18
    243e:	33 27       	eor	r19, r19
    2440:	00 34       	cpi	r16, 0x40	; 64
    2442:	11 05       	cpc	r17, r1
    2444:	21 05       	cpc	r18, r1
    2446:	31 05       	cpc	r19, r1
    2448:	59 f4       	brne	.+22     	; 0x2460 <__mulsf3+0x1a8>
    244a:	87 fd       	sbrc	r24, 7
    244c:	09 c0       	rjmp	.+18     	; 0x2460 <__mulsf3+0x1a8>
    244e:	45 2b       	or	r20, r21
    2450:	46 2b       	or	r20, r22
    2452:	47 2b       	or	r20, r23
    2454:	29 f0       	breq	.+10     	; 0x2460 <__mulsf3+0x1a8>
    2456:	80 5c       	subi	r24, 0xC0	; 192
    2458:	9f 4f       	sbci	r25, 0xFF	; 255
    245a:	af 4f       	sbci	r26, 0xFF	; 255
    245c:	bf 4f       	sbci	r27, 0xFF	; 255
    245e:	80 78       	andi	r24, 0x80	; 128
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	af 83       	std	Y+7, r26	; 0x07
    2466:	b8 87       	std	Y+8, r27	; 0x08
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	ce 01       	movw	r24, r28
    246e:	01 96       	adiw	r24, 0x01	; 1
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <__mulsf3+0x1be>
    2472:	87 e0       	ldi	r24, 0x07	; 7
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	0e 94 07 14 	call	0x280e	; 0x280e <__pack_f>
    247a:	a0 96       	adiw	r28, 0x20	; 32
    247c:	e0 e1       	ldi	r30, 0x10	; 16
    247e:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__epilogue_restores__+0x4>

00002482 <__divsf3>:
    2482:	a8 e1       	ldi	r26, 0x18	; 24
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e7 e4       	ldi	r30, 0x47	; 71
    2488:	f2 e1       	ldi	r31, 0x12	; 18
    248a:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__prologue_saves__+0x14>
    248e:	6d 8b       	std	Y+21, r22	; 0x15
    2490:	7e 8b       	std	Y+22, r23	; 0x16
    2492:	8f 8b       	std	Y+23, r24	; 0x17
    2494:	98 8f       	std	Y+24, r25	; 0x18
    2496:	29 8b       	std	Y+17, r18	; 0x11
    2498:	3a 8b       	std	Y+18, r19	; 0x12
    249a:	4b 8b       	std	Y+19, r20	; 0x13
    249c:	5c 8b       	std	Y+20, r21	; 0x14
    249e:	be 01       	movw	r22, r28
    24a0:	67 5f       	subi	r22, 0xF7	; 247
    24a2:	7f 4f       	sbci	r23, 0xFF	; 255
    24a4:	ce 01       	movw	r24, r28
    24a6:	45 96       	adiw	r24, 0x15	; 21
    24a8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    24ac:	be 01       	movw	r22, r28
    24ae:	6f 5f       	subi	r22, 0xFF	; 255
    24b0:	7f 4f       	sbci	r23, 0xFF	; 255
    24b2:	ce 01       	movw	r24, r28
    24b4:	41 96       	adiw	r24, 0x11	; 17
    24b6:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    24ba:	99 85       	ldd	r25, Y+9	; 0x09
    24bc:	92 30       	cpi	r25, 0x02	; 2
    24be:	08 f4       	brcc	.+2      	; 0x24c2 <__divsf3+0x40>
    24c0:	75 c0       	rjmp	.+234    	; 0x25ac <__divsf3+0x12a>
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	82 30       	cpi	r24, 0x02	; 2
    24c6:	08 f4       	brcc	.+2      	; 0x24ca <__divsf3+0x48>
    24c8:	74 c0       	rjmp	.+232    	; 0x25b2 <__divsf3+0x130>
    24ca:	2a 85       	ldd	r18, Y+10	; 0x0a
    24cc:	3a 81       	ldd	r19, Y+2	; 0x02
    24ce:	23 27       	eor	r18, r19
    24d0:	2a 87       	std	Y+10, r18	; 0x0a
    24d2:	94 30       	cpi	r25, 0x04	; 4
    24d4:	11 f0       	breq	.+4      	; 0x24da <__divsf3+0x58>
    24d6:	92 30       	cpi	r25, 0x02	; 2
    24d8:	19 f4       	brne	.+6      	; 0x24e0 <__divsf3+0x5e>
    24da:	98 13       	cpse	r25, r24
    24dc:	67 c0       	rjmp	.+206    	; 0x25ac <__divsf3+0x12a>
    24de:	6c c0       	rjmp	.+216    	; 0x25b8 <__divsf3+0x136>
    24e0:	84 30       	cpi	r24, 0x04	; 4
    24e2:	39 f4       	brne	.+14     	; 0x24f2 <__divsf3+0x70>
    24e4:	1d 86       	std	Y+13, r1	; 0x0d
    24e6:	1e 86       	std	Y+14, r1	; 0x0e
    24e8:	1f 86       	std	Y+15, r1	; 0x0f
    24ea:	18 8a       	std	Y+16, r1	; 0x10
    24ec:	1c 86       	std	Y+12, r1	; 0x0c
    24ee:	1b 86       	std	Y+11, r1	; 0x0b
    24f0:	04 c0       	rjmp	.+8      	; 0x24fa <__divsf3+0x78>
    24f2:	82 30       	cpi	r24, 0x02	; 2
    24f4:	29 f4       	brne	.+10     	; 0x2500 <__divsf3+0x7e>
    24f6:	84 e0       	ldi	r24, 0x04	; 4
    24f8:	89 87       	std	Y+9, r24	; 0x09
    24fa:	ce 01       	movw	r24, r28
    24fc:	09 96       	adiw	r24, 0x09	; 9
    24fe:	5e c0       	rjmp	.+188    	; 0x25bc <__divsf3+0x13a>
    2500:	8b 85       	ldd	r24, Y+11	; 0x0b
    2502:	9c 85       	ldd	r25, Y+12	; 0x0c
    2504:	2b 81       	ldd	r18, Y+3	; 0x03
    2506:	3c 81       	ldd	r19, Y+4	; 0x04
    2508:	82 1b       	sub	r24, r18
    250a:	93 0b       	sbc	r25, r19
    250c:	9c 87       	std	Y+12, r25	; 0x0c
    250e:	8b 87       	std	Y+11, r24	; 0x0b
    2510:	4d 85       	ldd	r20, Y+13	; 0x0d
    2512:	5e 85       	ldd	r21, Y+14	; 0x0e
    2514:	6f 85       	ldd	r22, Y+15	; 0x0f
    2516:	78 89       	ldd	r23, Y+16	; 0x10
    2518:	cd 80       	ldd	r12, Y+5	; 0x05
    251a:	de 80       	ldd	r13, Y+6	; 0x06
    251c:	ef 80       	ldd	r14, Y+7	; 0x07
    251e:	f8 84       	ldd	r15, Y+8	; 0x08
    2520:	4c 15       	cp	r20, r12
    2522:	5d 05       	cpc	r21, r13
    2524:	6e 05       	cpc	r22, r14
    2526:	7f 05       	cpc	r23, r15
    2528:	38 f4       	brcc	.+14     	; 0x2538 <__divsf3+0xb6>
    252a:	44 0f       	add	r20, r20
    252c:	55 1f       	adc	r21, r21
    252e:	66 1f       	adc	r22, r22
    2530:	77 1f       	adc	r23, r23
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	9c 87       	std	Y+12, r25	; 0x0c
    2536:	8b 87       	std	Y+11, r24	; 0x0b
    2538:	ef e1       	ldi	r30, 0x1F	; 31
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	00 e0       	ldi	r16, 0x00	; 0
    253e:	10 e0       	ldi	r17, 0x00	; 0
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e4       	ldi	r19, 0x40	; 64
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	dc 01       	movw	r26, r24
    254a:	4c 15       	cp	r20, r12
    254c:	5d 05       	cpc	r21, r13
    254e:	6e 05       	cpc	r22, r14
    2550:	7f 05       	cpc	r23, r15
    2552:	40 f0       	brcs	.+16     	; 0x2564 <__divsf3+0xe2>
    2554:	80 2b       	or	r24, r16
    2556:	91 2b       	or	r25, r17
    2558:	a2 2b       	or	r26, r18
    255a:	b3 2b       	or	r27, r19
    255c:	4c 19       	sub	r20, r12
    255e:	5d 09       	sbc	r21, r13
    2560:	6e 09       	sbc	r22, r14
    2562:	7f 09       	sbc	r23, r15
    2564:	36 95       	lsr	r19
    2566:	27 95       	ror	r18
    2568:	17 95       	ror	r17
    256a:	07 95       	ror	r16
    256c:	44 0f       	add	r20, r20
    256e:	55 1f       	adc	r21, r21
    2570:	66 1f       	adc	r22, r22
    2572:	77 1f       	adc	r23, r23
    2574:	31 97       	sbiw	r30, 0x01	; 1
    2576:	49 f7       	brne	.-46     	; 0x254a <__divsf3+0xc8>
    2578:	8c 01       	movw	r16, r24
    257a:	9d 01       	movw	r18, r26
    257c:	0f 77       	andi	r16, 0x7F	; 127
    257e:	11 27       	eor	r17, r17
    2580:	22 27       	eor	r18, r18
    2582:	33 27       	eor	r19, r19
    2584:	00 34       	cpi	r16, 0x40	; 64
    2586:	11 05       	cpc	r17, r1
    2588:	21 05       	cpc	r18, r1
    258a:	31 05       	cpc	r19, r1
    258c:	59 f4       	brne	.+22     	; 0x25a4 <__divsf3+0x122>
    258e:	87 fd       	sbrc	r24, 7
    2590:	09 c0       	rjmp	.+18     	; 0x25a4 <__divsf3+0x122>
    2592:	45 2b       	or	r20, r21
    2594:	46 2b       	or	r20, r22
    2596:	47 2b       	or	r20, r23
    2598:	29 f0       	breq	.+10     	; 0x25a4 <__divsf3+0x122>
    259a:	80 5c       	subi	r24, 0xC0	; 192
    259c:	9f 4f       	sbci	r25, 0xFF	; 255
    259e:	af 4f       	sbci	r26, 0xFF	; 255
    25a0:	bf 4f       	sbci	r27, 0xFF	; 255
    25a2:	80 78       	andi	r24, 0x80	; 128
    25a4:	8d 87       	std	Y+13, r24	; 0x0d
    25a6:	9e 87       	std	Y+14, r25	; 0x0e
    25a8:	af 87       	std	Y+15, r26	; 0x0f
    25aa:	b8 8b       	std	Y+16, r27	; 0x10
    25ac:	ce 01       	movw	r24, r28
    25ae:	09 96       	adiw	r24, 0x09	; 9
    25b0:	05 c0       	rjmp	.+10     	; 0x25bc <__divsf3+0x13a>
    25b2:	ce 01       	movw	r24, r28
    25b4:	01 96       	adiw	r24, 0x01	; 1
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <__divsf3+0x13a>
    25b8:	87 e0       	ldi	r24, 0x07	; 7
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	0e 94 07 14 	call	0x280e	; 0x280e <__pack_f>
    25c0:	68 96       	adiw	r28, 0x18	; 24
    25c2:	e8 e0       	ldi	r30, 0x08	; 8
    25c4:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__epilogue_restores__+0x14>

000025c8 <__gtsf2>:
    25c8:	a8 e1       	ldi	r26, 0x18	; 24
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	ea ee       	ldi	r30, 0xEA	; 234
    25ce:	f2 e1       	ldi	r31, 0x12	; 18
    25d0:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x20>
    25d4:	6d 8b       	std	Y+21, r22	; 0x15
    25d6:	7e 8b       	std	Y+22, r23	; 0x16
    25d8:	8f 8b       	std	Y+23, r24	; 0x17
    25da:	98 8f       	std	Y+24, r25	; 0x18
    25dc:	29 8b       	std	Y+17, r18	; 0x11
    25de:	3a 8b       	std	Y+18, r19	; 0x12
    25e0:	4b 8b       	std	Y+19, r20	; 0x13
    25e2:	5c 8b       	std	Y+20, r21	; 0x14
    25e4:	be 01       	movw	r22, r28
    25e6:	67 5f       	subi	r22, 0xF7	; 247
    25e8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ea:	ce 01       	movw	r24, r28
    25ec:	45 96       	adiw	r24, 0x15	; 21
    25ee:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    25f2:	be 01       	movw	r22, r28
    25f4:	6f 5f       	subi	r22, 0xFF	; 255
    25f6:	7f 4f       	sbci	r23, 0xFF	; 255
    25f8:	ce 01       	movw	r24, r28
    25fa:	41 96       	adiw	r24, 0x11	; 17
    25fc:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    2600:	89 85       	ldd	r24, Y+9	; 0x09
    2602:	82 30       	cpi	r24, 0x02	; 2
    2604:	58 f0       	brcs	.+22     	; 0x261c <__gtsf2+0x54>
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	82 30       	cpi	r24, 0x02	; 2
    260a:	40 f0       	brcs	.+16     	; 0x261c <__gtsf2+0x54>
    260c:	be 01       	movw	r22, r28
    260e:	6f 5f       	subi	r22, 0xFF	; 255
    2610:	7f 4f       	sbci	r23, 0xFF	; 255
    2612:	ce 01       	movw	r24, r28
    2614:	09 96       	adiw	r24, 0x09	; 9
    2616:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__fpcmp_parts_f>
    261a:	01 c0       	rjmp	.+2      	; 0x261e <__gtsf2+0x56>
    261c:	8f ef       	ldi	r24, 0xFF	; 255
    261e:	68 96       	adiw	r28, 0x18	; 24
    2620:	e2 e0       	ldi	r30, 0x02	; 2
    2622:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x20>

00002626 <__ltsf2>:
    2626:	a8 e1       	ldi	r26, 0x18	; 24
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e9 e1       	ldi	r30, 0x19	; 25
    262c:	f3 e1       	ldi	r31, 0x13	; 19
    262e:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x20>
    2632:	6d 8b       	std	Y+21, r22	; 0x15
    2634:	7e 8b       	std	Y+22, r23	; 0x16
    2636:	8f 8b       	std	Y+23, r24	; 0x17
    2638:	98 8f       	std	Y+24, r25	; 0x18
    263a:	29 8b       	std	Y+17, r18	; 0x11
    263c:	3a 8b       	std	Y+18, r19	; 0x12
    263e:	4b 8b       	std	Y+19, r20	; 0x13
    2640:	5c 8b       	std	Y+20, r21	; 0x14
    2642:	be 01       	movw	r22, r28
    2644:	67 5f       	subi	r22, 0xF7	; 247
    2646:	7f 4f       	sbci	r23, 0xFF	; 255
    2648:	ce 01       	movw	r24, r28
    264a:	45 96       	adiw	r24, 0x15	; 21
    264c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    2650:	be 01       	movw	r22, r28
    2652:	6f 5f       	subi	r22, 0xFF	; 255
    2654:	7f 4f       	sbci	r23, 0xFF	; 255
    2656:	ce 01       	movw	r24, r28
    2658:	41 96       	adiw	r24, 0x11	; 17
    265a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    265e:	89 85       	ldd	r24, Y+9	; 0x09
    2660:	82 30       	cpi	r24, 0x02	; 2
    2662:	58 f0       	brcs	.+22     	; 0x267a <__ltsf2+0x54>
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	82 30       	cpi	r24, 0x02	; 2
    2668:	40 f0       	brcs	.+16     	; 0x267a <__ltsf2+0x54>
    266a:	be 01       	movw	r22, r28
    266c:	6f 5f       	subi	r22, 0xFF	; 255
    266e:	7f 4f       	sbci	r23, 0xFF	; 255
    2670:	ce 01       	movw	r24, r28
    2672:	09 96       	adiw	r24, 0x09	; 9
    2674:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__fpcmp_parts_f>
    2678:	01 c0       	rjmp	.+2      	; 0x267c <__ltsf2+0x56>
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	68 96       	adiw	r28, 0x18	; 24
    267e:	e2 e0       	ldi	r30, 0x02	; 2
    2680:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x20>

00002684 <__fixsfsi>:
    2684:	ac e0       	ldi	r26, 0x0C	; 12
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e8 e4       	ldi	r30, 0x48	; 72
    268a:	f3 e1       	ldi	r31, 0x13	; 19
    268c:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__prologue_saves__+0x1c>
    2690:	69 87       	std	Y+9, r22	; 0x09
    2692:	7a 87       	std	Y+10, r23	; 0x0a
    2694:	8b 87       	std	Y+11, r24	; 0x0b
    2696:	9c 87       	std	Y+12, r25	; 0x0c
    2698:	be 01       	movw	r22, r28
    269a:	6f 5f       	subi	r22, 0xFF	; 255
    269c:	7f 4f       	sbci	r23, 0xFF	; 255
    269e:	ce 01       	movw	r24, r28
    26a0:	09 96       	adiw	r24, 0x09	; 9
    26a2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__unpack_f>
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	82 30       	cpi	r24, 0x02	; 2
    26aa:	91 f1       	breq	.+100    	; 0x2710 <__fixsfsi+0x8c>
    26ac:	82 30       	cpi	r24, 0x02	; 2
    26ae:	80 f1       	brcs	.+96     	; 0x2710 <__fixsfsi+0x8c>
    26b0:	84 30       	cpi	r24, 0x04	; 4
    26b2:	41 f4       	brne	.+16     	; 0x26c4 <__fixsfsi+0x40>
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	88 23       	and	r24, r24
    26b8:	31 f1       	breq	.+76     	; 0x2706 <__fixsfsi+0x82>
    26ba:	00 e0       	ldi	r16, 0x00	; 0
    26bc:	10 e0       	ldi	r17, 0x00	; 0
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e8       	ldi	r19, 0x80	; 128
    26c2:	29 c0       	rjmp	.+82     	; 0x2716 <__fixsfsi+0x92>
    26c4:	2b 81       	ldd	r18, Y+3	; 0x03
    26c6:	3c 81       	ldd	r19, Y+4	; 0x04
    26c8:	37 fd       	sbrc	r19, 7
    26ca:	22 c0       	rjmp	.+68     	; 0x2710 <__fixsfsi+0x8c>
    26cc:	2f 31       	cpi	r18, 0x1F	; 31
    26ce:	31 05       	cpc	r19, r1
    26d0:	8c f7       	brge	.-30     	; 0x26b4 <__fixsfsi+0x30>
    26d2:	8e e1       	ldi	r24, 0x1E	; 30
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	82 1b       	sub	r24, r18
    26d8:	93 0b       	sbc	r25, r19
    26da:	0d 81       	ldd	r16, Y+5	; 0x05
    26dc:	1e 81       	ldd	r17, Y+6	; 0x06
    26de:	2f 81       	ldd	r18, Y+7	; 0x07
    26e0:	38 85       	ldd	r19, Y+8	; 0x08
    26e2:	04 c0       	rjmp	.+8      	; 0x26ec <__fixsfsi+0x68>
    26e4:	36 95       	lsr	r19
    26e6:	27 95       	ror	r18
    26e8:	17 95       	ror	r17
    26ea:	07 95       	ror	r16
    26ec:	8a 95       	dec	r24
    26ee:	d2 f7       	brpl	.-12     	; 0x26e4 <__fixsfsi+0x60>
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	88 23       	and	r24, r24
    26f4:	81 f0       	breq	.+32     	; 0x2716 <__fixsfsi+0x92>
    26f6:	30 95       	com	r19
    26f8:	20 95       	com	r18
    26fa:	10 95       	com	r17
    26fc:	01 95       	neg	r16
    26fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2700:	2f 4f       	sbci	r18, 0xFF	; 255
    2702:	3f 4f       	sbci	r19, 0xFF	; 255
    2704:	08 c0       	rjmp	.+16     	; 0x2716 <__fixsfsi+0x92>
    2706:	0f ef       	ldi	r16, 0xFF	; 255
    2708:	1f ef       	ldi	r17, 0xFF	; 255
    270a:	2f ef       	ldi	r18, 0xFF	; 255
    270c:	3f e7       	ldi	r19, 0x7F	; 127
    270e:	03 c0       	rjmp	.+6      	; 0x2716 <__fixsfsi+0x92>
    2710:	00 e0       	ldi	r16, 0x00	; 0
    2712:	10 e0       	ldi	r17, 0x00	; 0
    2714:	98 01       	movw	r18, r16
    2716:	b8 01       	movw	r22, r16
    2718:	c9 01       	movw	r24, r18
    271a:	2c 96       	adiw	r28, 0x0c	; 12
    271c:	e4 e0       	ldi	r30, 0x04	; 4
    271e:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__epilogue_restores__+0x1c>

00002722 <__floatunsisf>:
    2722:	a8 e0       	ldi	r26, 0x08	; 8
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e7 e9       	ldi	r30, 0x97	; 151
    2728:	f3 e1       	ldi	r31, 0x13	; 19
    272a:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__prologue_saves__+0x14>
    272e:	8b 01       	movw	r16, r22
    2730:	9c 01       	movw	r18, r24
    2732:	1a 82       	std	Y+2, r1	; 0x02
    2734:	61 15       	cp	r22, r1
    2736:	71 05       	cpc	r23, r1
    2738:	81 05       	cpc	r24, r1
    273a:	91 05       	cpc	r25, r1
    273c:	19 f4       	brne	.+6      	; 0x2744 <__floatunsisf+0x22>
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	5d c0       	rjmp	.+186    	; 0x27fe <__floatunsisf+0xdc>
    2744:	83 e0       	ldi	r24, 0x03	; 3
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	4e e1       	ldi	r20, 0x1E	; 30
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	5c 83       	std	Y+4, r21	; 0x04
    274e:	4b 83       	std	Y+3, r20	; 0x03
    2750:	c9 01       	movw	r24, r18
    2752:	b8 01       	movw	r22, r16
    2754:	0e 94 40 18 	call	0x3080	; 0x3080 <__clzsi2>
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	97 ff       	sbrs	r25, 7
    275c:	39 c0       	rjmp	.+114    	; 0x27d0 <__floatunsisf+0xae>
    275e:	ee 27       	eor	r30, r30
    2760:	ff 27       	eor	r31, r31
    2762:	e8 1b       	sub	r30, r24
    2764:	f9 0b       	sbc	r31, r25
    2766:	41 e0       	ldi	r20, 0x01	; 1
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	0e 2e       	mov	r0, r30
    2770:	04 c0       	rjmp	.+8      	; 0x277a <__floatunsisf+0x58>
    2772:	44 0f       	add	r20, r20
    2774:	55 1f       	adc	r21, r21
    2776:	66 1f       	adc	r22, r22
    2778:	77 1f       	adc	r23, r23
    277a:	0a 94       	dec	r0
    277c:	d2 f7       	brpl	.-12     	; 0x2772 <__floatunsisf+0x50>
    277e:	41 50       	subi	r20, 0x01	; 1
    2780:	51 09       	sbc	r21, r1
    2782:	61 09       	sbc	r22, r1
    2784:	71 09       	sbc	r23, r1
    2786:	40 23       	and	r20, r16
    2788:	51 23       	and	r21, r17
    278a:	62 23       	and	r22, r18
    278c:	73 23       	and	r23, r19
    278e:	c1 2c       	mov	r12, r1
    2790:	d1 2c       	mov	r13, r1
    2792:	76 01       	movw	r14, r12
    2794:	c3 94       	inc	r12
    2796:	45 2b       	or	r20, r21
    2798:	46 2b       	or	r20, r22
    279a:	47 2b       	or	r20, r23
    279c:	19 f4       	brne	.+6      	; 0x27a4 <__floatunsisf+0x82>
    279e:	c1 2c       	mov	r12, r1
    27a0:	d1 2c       	mov	r13, r1
    27a2:	76 01       	movw	r14, r12
    27a4:	04 c0       	rjmp	.+8      	; 0x27ae <__floatunsisf+0x8c>
    27a6:	36 95       	lsr	r19
    27a8:	27 95       	ror	r18
    27aa:	17 95       	ror	r17
    27ac:	07 95       	ror	r16
    27ae:	ea 95       	dec	r30
    27b0:	d2 f7       	brpl	.-12     	; 0x27a6 <__floatunsisf+0x84>
    27b2:	0c 29       	or	r16, r12
    27b4:	1d 29       	or	r17, r13
    27b6:	2e 29       	or	r18, r14
    27b8:	3f 29       	or	r19, r15
    27ba:	0d 83       	std	Y+5, r16	; 0x05
    27bc:	1e 83       	std	Y+6, r17	; 0x06
    27be:	2f 83       	std	Y+7, r18	; 0x07
    27c0:	38 87       	std	Y+8, r19	; 0x08
    27c2:	2e e1       	ldi	r18, 0x1E	; 30
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	28 1b       	sub	r18, r24
    27c8:	39 0b       	sbc	r19, r25
    27ca:	3c 83       	std	Y+4, r19	; 0x04
    27cc:	2b 83       	std	Y+3, r18	; 0x03
    27ce:	17 c0       	rjmp	.+46     	; 0x27fe <__floatunsisf+0xdc>
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	29 f4       	brne	.+10     	; 0x27de <__floatunsisf+0xbc>
    27d4:	0d 83       	std	Y+5, r16	; 0x05
    27d6:	1e 83       	std	Y+6, r17	; 0x06
    27d8:	2f 83       	std	Y+7, r18	; 0x07
    27da:	38 87       	std	Y+8, r19	; 0x08
    27dc:	10 c0       	rjmp	.+32     	; 0x27fe <__floatunsisf+0xdc>
    27de:	08 2e       	mov	r0, r24
    27e0:	04 c0       	rjmp	.+8      	; 0x27ea <__floatunsisf+0xc8>
    27e2:	00 0f       	add	r16, r16
    27e4:	11 1f       	adc	r17, r17
    27e6:	22 1f       	adc	r18, r18
    27e8:	33 1f       	adc	r19, r19
    27ea:	0a 94       	dec	r0
    27ec:	d2 f7       	brpl	.-12     	; 0x27e2 <__floatunsisf+0xc0>
    27ee:	0d 83       	std	Y+5, r16	; 0x05
    27f0:	1e 83       	std	Y+6, r17	; 0x06
    27f2:	2f 83       	std	Y+7, r18	; 0x07
    27f4:	38 87       	std	Y+8, r19	; 0x08
    27f6:	48 1b       	sub	r20, r24
    27f8:	59 0b       	sbc	r21, r25
    27fa:	5c 83       	std	Y+4, r21	; 0x04
    27fc:	4b 83       	std	Y+3, r20	; 0x03
    27fe:	ce 01       	movw	r24, r28
    2800:	01 96       	adiw	r24, 0x01	; 1
    2802:	0e 94 07 14 	call	0x280e	; 0x280e <__pack_f>
    2806:	28 96       	adiw	r28, 0x08	; 8
    2808:	e8 e0       	ldi	r30, 0x08	; 8
    280a:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__epilogue_restores__+0x14>

0000280e <__pack_f>:
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	dc 01       	movw	r26, r24
    2818:	14 96       	adiw	r26, 0x04	; 4
    281a:	4d 91       	ld	r20, X+
    281c:	5d 91       	ld	r21, X+
    281e:	6d 91       	ld	r22, X+
    2820:	7c 91       	ld	r23, X
    2822:	17 97       	sbiw	r26, 0x07	; 7
    2824:	11 96       	adiw	r26, 0x01	; 1
    2826:	ec 91       	ld	r30, X
    2828:	11 97       	sbiw	r26, 0x01	; 1
    282a:	8c 91       	ld	r24, X
    282c:	82 30       	cpi	r24, 0x02	; 2
    282e:	20 f4       	brcc	.+8      	; 0x2838 <__pack_f+0x2a>
    2830:	60 61       	ori	r22, 0x10	; 16
    2832:	8f ef       	ldi	r24, 0xFF	; 255
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a6 c0       	rjmp	.+332    	; 0x2984 <__pack_f+0x176>
    2838:	84 30       	cpi	r24, 0x04	; 4
    283a:	09 f4       	brne	.+2      	; 0x283e <__pack_f+0x30>
    283c:	9e c0       	rjmp	.+316    	; 0x297a <__pack_f+0x16c>
    283e:	82 30       	cpi	r24, 0x02	; 2
    2840:	09 f4       	brne	.+2      	; 0x2844 <__pack_f+0x36>
    2842:	95 c0       	rjmp	.+298    	; 0x296e <__pack_f+0x160>
    2844:	41 15       	cp	r20, r1
    2846:	51 05       	cpc	r21, r1
    2848:	61 05       	cpc	r22, r1
    284a:	71 05       	cpc	r23, r1
    284c:	09 f4       	brne	.+2      	; 0x2850 <__pack_f+0x42>
    284e:	92 c0       	rjmp	.+292    	; 0x2974 <__pack_f+0x166>
    2850:	12 96       	adiw	r26, 0x02	; 2
    2852:	2d 91       	ld	r18, X+
    2854:	3c 91       	ld	r19, X
    2856:	13 97       	sbiw	r26, 0x03	; 3
    2858:	22 38       	cpi	r18, 0x82	; 130
    285a:	8f ef       	ldi	r24, 0xFF	; 255
    285c:	38 07       	cpc	r19, r24
    285e:	0c f0       	brlt	.+2      	; 0x2862 <__pack_f+0x54>
    2860:	58 c0       	rjmp	.+176    	; 0x2912 <__pack_f+0x104>
    2862:	c2 e8       	ldi	r28, 0x82	; 130
    2864:	df ef       	ldi	r29, 0xFF	; 255
    2866:	c2 1b       	sub	r28, r18
    2868:	d3 0b       	sbc	r29, r19
    286a:	ca 31       	cpi	r28, 0x1A	; 26
    286c:	d1 05       	cpc	r29, r1
    286e:	6c f5       	brge	.+90     	; 0x28ca <__pack_f+0xbc>
    2870:	8a 01       	movw	r16, r20
    2872:	9b 01       	movw	r18, r22
    2874:	0c 2e       	mov	r0, r28
    2876:	04 c0       	rjmp	.+8      	; 0x2880 <__pack_f+0x72>
    2878:	36 95       	lsr	r19
    287a:	27 95       	ror	r18
    287c:	17 95       	ror	r17
    287e:	07 95       	ror	r16
    2880:	0a 94       	dec	r0
    2882:	d2 f7       	brpl	.-12     	; 0x2878 <__pack_f+0x6a>
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a0 e0       	ldi	r26, 0x00	; 0
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	0c 2e       	mov	r0, r28
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <__pack_f+0x8a>
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	aa 1f       	adc	r26, r26
    2896:	bb 1f       	adc	r27, r27
    2898:	0a 94       	dec	r0
    289a:	d2 f7       	brpl	.-12     	; 0x2890 <__pack_f+0x82>
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	a1 09       	sbc	r26, r1
    28a0:	b1 09       	sbc	r27, r1
    28a2:	84 23       	and	r24, r20
    28a4:	95 23       	and	r25, r21
    28a6:	a6 23       	and	r26, r22
    28a8:	b7 23       	and	r27, r23
    28aa:	41 e0       	ldi	r20, 0x01	; 1
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	70 e0       	ldi	r23, 0x00	; 0
    28b2:	89 2b       	or	r24, r25
    28b4:	8a 2b       	or	r24, r26
    28b6:	8b 2b       	or	r24, r27
    28b8:	19 f4       	brne	.+6      	; 0x28c0 <__pack_f+0xb2>
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	ba 01       	movw	r22, r20
    28c0:	40 2b       	or	r20, r16
    28c2:	51 2b       	or	r21, r17
    28c4:	62 2b       	or	r22, r18
    28c6:	73 2b       	or	r23, r19
    28c8:	03 c0       	rjmp	.+6      	; 0x28d0 <__pack_f+0xc2>
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	ba 01       	movw	r22, r20
    28d0:	db 01       	movw	r26, r22
    28d2:	ca 01       	movw	r24, r20
    28d4:	8f 77       	andi	r24, 0x7F	; 127
    28d6:	99 27       	eor	r25, r25
    28d8:	aa 27       	eor	r26, r26
    28da:	bb 27       	eor	r27, r27
    28dc:	80 34       	cpi	r24, 0x40	; 64
    28de:	91 05       	cpc	r25, r1
    28e0:	a1 05       	cpc	r26, r1
    28e2:	b1 05       	cpc	r27, r1
    28e4:	39 f4       	brne	.+14     	; 0x28f4 <__pack_f+0xe6>
    28e6:	47 ff       	sbrs	r20, 7
    28e8:	09 c0       	rjmp	.+18     	; 0x28fc <__pack_f+0xee>
    28ea:	40 5c       	subi	r20, 0xC0	; 192
    28ec:	5f 4f       	sbci	r21, 0xFF	; 255
    28ee:	6f 4f       	sbci	r22, 0xFF	; 255
    28f0:	7f 4f       	sbci	r23, 0xFF	; 255
    28f2:	04 c0       	rjmp	.+8      	; 0x28fc <__pack_f+0xee>
    28f4:	41 5c       	subi	r20, 0xC1	; 193
    28f6:	5f 4f       	sbci	r21, 0xFF	; 255
    28f8:	6f 4f       	sbci	r22, 0xFF	; 255
    28fa:	7f 4f       	sbci	r23, 0xFF	; 255
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	41 15       	cp	r20, r1
    2902:	51 05       	cpc	r21, r1
    2904:	61 05       	cpc	r22, r1
    2906:	20 e4       	ldi	r18, 0x40	; 64
    2908:	72 07       	cpc	r23, r18
    290a:	48 f5       	brcc	.+82     	; 0x295e <__pack_f+0x150>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	26 c0       	rjmp	.+76     	; 0x295e <__pack_f+0x150>
    2912:	20 38       	cpi	r18, 0x80	; 128
    2914:	31 05       	cpc	r19, r1
    2916:	8c f5       	brge	.+98     	; 0x297a <__pack_f+0x16c>
    2918:	db 01       	movw	r26, r22
    291a:	ca 01       	movw	r24, r20
    291c:	8f 77       	andi	r24, 0x7F	; 127
    291e:	99 27       	eor	r25, r25
    2920:	aa 27       	eor	r26, r26
    2922:	bb 27       	eor	r27, r27
    2924:	80 34       	cpi	r24, 0x40	; 64
    2926:	91 05       	cpc	r25, r1
    2928:	a1 05       	cpc	r26, r1
    292a:	b1 05       	cpc	r27, r1
    292c:	39 f4       	brne	.+14     	; 0x293c <__pack_f+0x12e>
    292e:	47 ff       	sbrs	r20, 7
    2930:	09 c0       	rjmp	.+18     	; 0x2944 <__pack_f+0x136>
    2932:	40 5c       	subi	r20, 0xC0	; 192
    2934:	5f 4f       	sbci	r21, 0xFF	; 255
    2936:	6f 4f       	sbci	r22, 0xFF	; 255
    2938:	7f 4f       	sbci	r23, 0xFF	; 255
    293a:	04 c0       	rjmp	.+8      	; 0x2944 <__pack_f+0x136>
    293c:	41 5c       	subi	r20, 0xC1	; 193
    293e:	5f 4f       	sbci	r21, 0xFF	; 255
    2940:	6f 4f       	sbci	r22, 0xFF	; 255
    2942:	7f 4f       	sbci	r23, 0xFF	; 255
    2944:	77 fd       	sbrc	r23, 7
    2946:	04 c0       	rjmp	.+8      	; 0x2950 <__pack_f+0x142>
    2948:	c9 01       	movw	r24, r18
    294a:	81 58       	subi	r24, 0x81	; 129
    294c:	9f 4f       	sbci	r25, 0xFF	; 255
    294e:	07 c0       	rjmp	.+14     	; 0x295e <__pack_f+0x150>
    2950:	76 95       	lsr	r23
    2952:	67 95       	ror	r22
    2954:	57 95       	ror	r21
    2956:	47 95       	ror	r20
    2958:	c9 01       	movw	r24, r18
    295a:	80 58       	subi	r24, 0x80	; 128
    295c:	9f 4f       	sbci	r25, 0xFF	; 255
    295e:	97 e0       	ldi	r25, 0x07	; 7
    2960:	76 95       	lsr	r23
    2962:	67 95       	ror	r22
    2964:	57 95       	ror	r21
    2966:	47 95       	ror	r20
    2968:	9a 95       	dec	r25
    296a:	d1 f7       	brne	.-12     	; 0x2960 <__pack_f+0x152>
    296c:	0b c0       	rjmp	.+22     	; 0x2984 <__pack_f+0x176>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	05 c0       	rjmp	.+10     	; 0x297e <__pack_f+0x170>
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	05 c0       	rjmp	.+10     	; 0x2984 <__pack_f+0x176>
    297a:	8f ef       	ldi	r24, 0xFF	; 255
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	40 e0       	ldi	r20, 0x00	; 0
    2980:	50 e0       	ldi	r21, 0x00	; 0
    2982:	ba 01       	movw	r22, r20
    2984:	98 2f       	mov	r25, r24
    2986:	96 95       	lsr	r25
    2988:	e0 fb       	bst	r30, 0
    298a:	97 f9       	bld	r25, 7
    298c:	36 2f       	mov	r19, r22
    298e:	80 fb       	bst	r24, 0
    2990:	37 f9       	bld	r19, 7
    2992:	64 2f       	mov	r22, r20
    2994:	75 2f       	mov	r23, r21
    2996:	83 2f       	mov	r24, r19
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	08 95       	ret

000029a2 <__unpack_f>:
    29a2:	cf 92       	push	r12
    29a4:	df 92       	push	r13
    29a6:	ef 92       	push	r14
    29a8:	dc 01       	movw	r26, r24
    29aa:	fb 01       	movw	r30, r22
    29ac:	cc 90       	ld	r12, X
    29ae:	11 96       	adiw	r26, 0x01	; 1
    29b0:	dc 90       	ld	r13, X
    29b2:	11 97       	sbiw	r26, 0x01	; 1
    29b4:	12 96       	adiw	r26, 0x02	; 2
    29b6:	8c 91       	ld	r24, X
    29b8:	12 97       	sbiw	r26, 0x02	; 2
    29ba:	3f e7       	ldi	r19, 0x7F	; 127
    29bc:	e3 2e       	mov	r14, r19
    29be:	e8 22       	and	r14, r24
    29c0:	6e 2d       	mov	r22, r14
    29c2:	a6 01       	movw	r20, r12
    29c4:	70 e0       	ldi	r23, 0x00	; 0
    29c6:	98 2f       	mov	r25, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	99 27       	eor	r25, r25
    29cc:	99 1f       	adc	r25, r25
    29ce:	13 96       	adiw	r26, 0x03	; 3
    29d0:	2c 91       	ld	r18, X
    29d2:	82 2f       	mov	r24, r18
    29d4:	88 0f       	add	r24, r24
    29d6:	89 2b       	or	r24, r25
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	27 fb       	bst	r18, 7
    29dc:	22 27       	eor	r18, r18
    29de:	20 f9       	bld	r18, 0
    29e0:	21 83       	std	Z+1, r18	; 0x01
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	29 f5       	brne	.+74     	; 0x2a30 <__unpack_f+0x8e>
    29e6:	41 15       	cp	r20, r1
    29e8:	51 05       	cpc	r21, r1
    29ea:	61 05       	cpc	r22, r1
    29ec:	71 05       	cpc	r23, r1
    29ee:	11 f4       	brne	.+4      	; 0x29f4 <__unpack_f+0x52>
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	27 c0       	rjmp	.+78     	; 0x2a42 <__unpack_f+0xa0>
    29f4:	82 e8       	ldi	r24, 0x82	; 130
    29f6:	9f ef       	ldi	r25, 0xFF	; 255
    29f8:	93 83       	std	Z+3, r25	; 0x03
    29fa:	82 83       	std	Z+2, r24	; 0x02
    29fc:	27 e0       	ldi	r18, 0x07	; 7
    29fe:	44 0f       	add	r20, r20
    2a00:	55 1f       	adc	r21, r21
    2a02:	66 1f       	adc	r22, r22
    2a04:	77 1f       	adc	r23, r23
    2a06:	2a 95       	dec	r18
    2a08:	d1 f7       	brne	.-12     	; 0x29fe <__unpack_f+0x5c>
    2a0a:	83 e0       	ldi	r24, 0x03	; 3
    2a0c:	80 83       	st	Z, r24
    2a0e:	09 c0       	rjmp	.+18     	; 0x2a22 <__unpack_f+0x80>
    2a10:	44 0f       	add	r20, r20
    2a12:	55 1f       	adc	r21, r21
    2a14:	66 1f       	adc	r22, r22
    2a16:	77 1f       	adc	r23, r23
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	93 83       	std	Z+3, r25	; 0x03
    2a20:	82 83       	std	Z+2, r24	; 0x02
    2a22:	41 15       	cp	r20, r1
    2a24:	51 05       	cpc	r21, r1
    2a26:	61 05       	cpc	r22, r1
    2a28:	80 e4       	ldi	r24, 0x40	; 64
    2a2a:	78 07       	cpc	r23, r24
    2a2c:	88 f3       	brcs	.-30     	; 0x2a10 <__unpack_f+0x6e>
    2a2e:	20 c0       	rjmp	.+64     	; 0x2a70 <__unpack_f+0xce>
    2a30:	8f 3f       	cpi	r24, 0xFF	; 255
    2a32:	91 05       	cpc	r25, r1
    2a34:	79 f4       	brne	.+30     	; 0x2a54 <__unpack_f+0xb2>
    2a36:	41 15       	cp	r20, r1
    2a38:	51 05       	cpc	r21, r1
    2a3a:	61 05       	cpc	r22, r1
    2a3c:	71 05       	cpc	r23, r1
    2a3e:	19 f4       	brne	.+6      	; 0x2a46 <__unpack_f+0xa4>
    2a40:	84 e0       	ldi	r24, 0x04	; 4
    2a42:	80 83       	st	Z, r24
    2a44:	19 c0       	rjmp	.+50     	; 0x2a78 <__unpack_f+0xd6>
    2a46:	e4 fe       	sbrs	r14, 4
    2a48:	03 c0       	rjmp	.+6      	; 0x2a50 <__unpack_f+0xae>
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	80 83       	st	Z, r24
    2a4e:	10 c0       	rjmp	.+32     	; 0x2a70 <__unpack_f+0xce>
    2a50:	10 82       	st	Z, r1
    2a52:	0e c0       	rjmp	.+28     	; 0x2a70 <__unpack_f+0xce>
    2a54:	8f 57       	subi	r24, 0x7F	; 127
    2a56:	91 09       	sbc	r25, r1
    2a58:	93 83       	std	Z+3, r25	; 0x03
    2a5a:	82 83       	std	Z+2, r24	; 0x02
    2a5c:	83 e0       	ldi	r24, 0x03	; 3
    2a5e:	80 83       	st	Z, r24
    2a60:	87 e0       	ldi	r24, 0x07	; 7
    2a62:	44 0f       	add	r20, r20
    2a64:	55 1f       	adc	r21, r21
    2a66:	66 1f       	adc	r22, r22
    2a68:	77 1f       	adc	r23, r23
    2a6a:	8a 95       	dec	r24
    2a6c:	d1 f7       	brne	.-12     	; 0x2a62 <__unpack_f+0xc0>
    2a6e:	70 64       	ori	r23, 0x40	; 64
    2a70:	44 83       	std	Z+4, r20	; 0x04
    2a72:	55 83       	std	Z+5, r21	; 0x05
    2a74:	66 83       	std	Z+6, r22	; 0x06
    2a76:	77 83       	std	Z+7, r23	; 0x07
    2a78:	ef 90       	pop	r14
    2a7a:	df 90       	pop	r13
    2a7c:	cf 90       	pop	r12
    2a7e:	08 95       	ret

00002a80 <__fpcmp_parts_f>:
    2a80:	cf 93       	push	r28
    2a82:	fc 01       	movw	r30, r24
    2a84:	db 01       	movw	r26, r22
    2a86:	90 81       	ld	r25, Z
    2a88:	92 30       	cpi	r25, 0x02	; 2
    2a8a:	08 f4       	brcc	.+2      	; 0x2a8e <__fpcmp_parts_f+0xe>
    2a8c:	52 c0       	rjmp	.+164    	; 0x2b32 <__fpcmp_parts_f+0xb2>
    2a8e:	8c 91       	ld	r24, X
    2a90:	82 30       	cpi	r24, 0x02	; 2
    2a92:	08 f4       	brcc	.+2      	; 0x2a96 <__fpcmp_parts_f+0x16>
    2a94:	4e c0       	rjmp	.+156    	; 0x2b32 <__fpcmp_parts_f+0xb2>
    2a96:	94 30       	cpi	r25, 0x04	; 4
    2a98:	71 f4       	brne	.+28     	; 0x2ab6 <__fpcmp_parts_f+0x36>
    2a9a:	84 30       	cpi	r24, 0x04	; 4
    2a9c:	39 f4       	brne	.+14     	; 0x2aac <__fpcmp_parts_f+0x2c>
    2a9e:	11 96       	adiw	r26, 0x01	; 1
    2aa0:	2c 91       	ld	r18, X
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	81 81       	ldd	r24, Z+1	; 0x01
    2aa6:	28 1b       	sub	r18, r24
    2aa8:	31 09       	sbc	r19, r1
    2aaa:	48 c0       	rjmp	.+144    	; 0x2b3c <__fpcmp_parts_f+0xbc>
    2aac:	81 81       	ldd	r24, Z+1	; 0x01
    2aae:	88 23       	and	r24, r24
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <__fpcmp_parts_f+0x34>
    2ab2:	3f c0       	rjmp	.+126    	; 0x2b32 <__fpcmp_parts_f+0xb2>
    2ab4:	3b c0       	rjmp	.+118    	; 0x2b2c <__fpcmp_parts_f+0xac>
    2ab6:	84 30       	cpi	r24, 0x04	; 4
    2ab8:	29 f4       	brne	.+10     	; 0x2ac4 <__fpcmp_parts_f+0x44>
    2aba:	11 96       	adiw	r26, 0x01	; 1
    2abc:	8c 91       	ld	r24, X
    2abe:	81 11       	cpse	r24, r1
    2ac0:	38 c0       	rjmp	.+112    	; 0x2b32 <__fpcmp_parts_f+0xb2>
    2ac2:	34 c0       	rjmp	.+104    	; 0x2b2c <__fpcmp_parts_f+0xac>
    2ac4:	92 30       	cpi	r25, 0x02	; 2
    2ac6:	19 f4       	brne	.+6      	; 0x2ace <__fpcmp_parts_f+0x4e>
    2ac8:	82 30       	cpi	r24, 0x02	; 2
    2aca:	b9 f7       	brne	.-18     	; 0x2aba <__fpcmp_parts_f+0x3a>
    2acc:	35 c0       	rjmp	.+106    	; 0x2b38 <__fpcmp_parts_f+0xb8>
    2ace:	82 30       	cpi	r24, 0x02	; 2
    2ad0:	69 f3       	breq	.-38     	; 0x2aac <__fpcmp_parts_f+0x2c>
    2ad2:	c1 81       	ldd	r28, Z+1	; 0x01
    2ad4:	11 96       	adiw	r26, 0x01	; 1
    2ad6:	8c 91       	ld	r24, X
    2ad8:	11 97       	sbiw	r26, 0x01	; 1
    2ada:	c8 13       	cpse	r28, r24
    2adc:	1d c0       	rjmp	.+58     	; 0x2b18 <__fpcmp_parts_f+0x98>
    2ade:	22 81       	ldd	r18, Z+2	; 0x02
    2ae0:	33 81       	ldd	r19, Z+3	; 0x03
    2ae2:	12 96       	adiw	r26, 0x02	; 2
    2ae4:	8d 91       	ld	r24, X+
    2ae6:	9c 91       	ld	r25, X
    2ae8:	13 97       	sbiw	r26, 0x03	; 3
    2aea:	82 17       	cp	r24, r18
    2aec:	93 07       	cpc	r25, r19
    2aee:	0c f4       	brge	.+2      	; 0x2af2 <__fpcmp_parts_f+0x72>
    2af0:	13 c0       	rjmp	.+38     	; 0x2b18 <__fpcmp_parts_f+0x98>
    2af2:	28 17       	cp	r18, r24
    2af4:	39 07       	cpc	r19, r25
    2af6:	0c f4       	brge	.+2      	; 0x2afa <__fpcmp_parts_f+0x7a>
    2af8:	17 c0       	rjmp	.+46     	; 0x2b28 <__fpcmp_parts_f+0xa8>
    2afa:	44 81       	ldd	r20, Z+4	; 0x04
    2afc:	55 81       	ldd	r21, Z+5	; 0x05
    2afe:	66 81       	ldd	r22, Z+6	; 0x06
    2b00:	77 81       	ldd	r23, Z+7	; 0x07
    2b02:	14 96       	adiw	r26, 0x04	; 4
    2b04:	8d 91       	ld	r24, X+
    2b06:	9d 91       	ld	r25, X+
    2b08:	0d 90       	ld	r0, X+
    2b0a:	bc 91       	ld	r27, X
    2b0c:	a0 2d       	mov	r26, r0
    2b0e:	84 17       	cp	r24, r20
    2b10:	95 07       	cpc	r25, r21
    2b12:	a6 07       	cpc	r26, r22
    2b14:	b7 07       	cpc	r27, r23
    2b16:	18 f4       	brcc	.+6      	; 0x2b1e <__fpcmp_parts_f+0x9e>
    2b18:	c1 11       	cpse	r28, r1
    2b1a:	08 c0       	rjmp	.+16     	; 0x2b2c <__fpcmp_parts_f+0xac>
    2b1c:	0a c0       	rjmp	.+20     	; 0x2b32 <__fpcmp_parts_f+0xb2>
    2b1e:	48 17       	cp	r20, r24
    2b20:	59 07       	cpc	r21, r25
    2b22:	6a 07       	cpc	r22, r26
    2b24:	7b 07       	cpc	r23, r27
    2b26:	40 f4       	brcc	.+16     	; 0x2b38 <__fpcmp_parts_f+0xb8>
    2b28:	c1 11       	cpse	r28, r1
    2b2a:	03 c0       	rjmp	.+6      	; 0x2b32 <__fpcmp_parts_f+0xb2>
    2b2c:	2f ef       	ldi	r18, 0xFF	; 255
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	05 c0       	rjmp	.+10     	; 0x2b3c <__fpcmp_parts_f+0xbc>
    2b32:	21 e0       	ldi	r18, 0x01	; 1
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <__fpcmp_parts_f+0xbc>
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	c9 01       	movw	r24, r18
    2b3e:	cf 91       	pop	r28
    2b40:	08 95       	ret

00002b42 <_ZN7ili93413cmdEh>:
    2b42:	14 98       	cbi	0x02, 4	; 2
    2b44:	88 b9       	out	0x08, r24	; 8
    2b46:	13 98       	cbi	0x02, 3	; 2
    2b48:	13 9a       	sbi	0x02, 3	; 2
    2b4a:	14 9a       	sbi	0x02, 4	; 2
    2b4c:	08 95       	ret

00002b4e <_ZN7ili93414dataEh>:
    2b4e:	88 b9       	out	0x08, r24	; 8
    2b50:	13 98       	cbi	0x02, 3	; 2
    2b52:	13 9a       	sbi	0x02, 3	; 2
    2b54:	08 95       	ret

00002b56 <_ZN7ili93414initEv>:
	else
		TFT_WCTRL &= ~TFT_BLC;
}

inline void ili9341::init(void)
{
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
	uint8_t c;
	uint16_t r;

#ifndef TFT_USE_PORT_BD
	MCUCR |= 0x80;			// Disable JTAG
    2b5c:	85 b7       	in	r24, 0x35	; 53
    2b5e:	80 68       	ori	r24, 0x80	; 128
    2b60:	85 bf       	out	0x35, r24	; 53
	MCUCR |= 0x80;
    2b62:	85 b7       	in	r24, 0x35	; 53
    2b64:	80 68       	ori	r24, 0x80	; 128
    2b66:	85 bf       	out	0x35, r24	; 53
#endif

	TFT_PCTRL = 0xFF & ~TFT_FMK;
    2b68:	8f e7       	ldi	r24, 0x7F	; 127
    2b6a:	81 b9       	out	0x01, r24	; 1
	TFT_WCTRL = 0xFF & ~TFT_BLC;	// Disable background light
    2b6c:	8d ef       	ldi	r24, 0xFD	; 253
    2b6e:	82 b9       	out	0x02, r24	; 2
	RECV();
    2b70:	17 b8       	out	0x07, r1	; 7
    2b72:	8f ef       	ldi	r24, 0xFF	; 255
    2b74:	88 b9       	out	0x08, r24	; 8
	LOW(TFT_RST);			// Hardware reset
    2b76:	12 98       	cbi	0x02, 2	; 2
	LOW(TFT_CS);
    2b78:	10 98       	cbi	0x02, 0	; 2
	HIGH(TFT_WR);
    2b7a:	13 9a       	sbi	0x02, 3	; 2
	HIGH(TFT_RD);
    2b7c:	15 9a       	sbi	0x02, 5	; 2
	HIGH(TFT_RS);
    2b7e:	14 9a       	sbi	0x02, 4	; 2
	HIGH(TFT_VSY);
    2b80:	16 9a       	sbi	0x02, 6	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b82:	28 e2       	ldi	r18, 0x28	; 40
    2b84:	2a 95       	dec	r18
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <_ZN7ili93414initEv+0x2e>
	_delay_us(10);			// Min: 10us
	HIGH(TFT_RST);
    2b88:	12 9a       	sbi	0x02, 2	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b8a:	3f ef       	ldi	r19, 0xFF	; 255
    2b8c:	94 e6       	ldi	r25, 0x64	; 100
    2b8e:	24 e0       	ldi	r18, 0x04	; 4
    2b90:	31 50       	subi	r19, 0x01	; 1
    2b92:	90 40       	sbci	r25, 0x00	; 0
    2b94:	20 40       	sbci	r18, 0x00	; 0
    2b96:	e1 f7       	brne	.-8      	; 0x2b90 <_ZN7ili93414initEv+0x3a>
    2b98:	00 c0       	rjmp	.+0      	; 0x2b9a <_ZN7ili93414initEv+0x44>
    2b9a:	00 00       	nop
	_delay_ms(120);
	SEND();
    2b9c:	87 b9       	out	0x07, r24	; 7
	cmd(0x28);		// Display OFF
    2b9e:	88 e2       	ldi	r24, 0x28	; 40
    2ba0:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	cmd(0x11);		// Sleep Out
    2ba4:	81 e1       	ldi	r24, 0x11	; 17
    2ba6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
    2baa:	3f ef       	ldi	r19, 0xFF	; 255
    2bac:	84 e6       	ldi	r24, 0x64	; 100
    2bae:	94 e0       	ldi	r25, 0x04	; 4
    2bb0:	31 50       	subi	r19, 0x01	; 1
    2bb2:	80 40       	sbci	r24, 0x00	; 0
    2bb4:	90 40       	sbci	r25, 0x00	; 0
    2bb6:	e1 f7       	brne	.-8      	; 0x2bb0 <_ZN7ili93414initEv+0x5a>
    2bb8:	00 c0       	rjmp	.+0      	; 0x2bba <_ZN7ili93414initEv+0x64>
    2bba:	00 00       	nop
	_delay_ms(120);
	cmd(0x34);		// Tearing Effect Line OFF
    2bbc:	84 e3       	ldi	r24, 0x34	; 52
    2bbe:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	cmd(0x38);		// Idle Mode OFF
    2bc2:	88 e3       	ldi	r24, 0x38	; 56
    2bc4:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	cmd(0x13);		// Normal Display Mode ON
    2bc8:	83 e1       	ldi	r24, 0x13	; 19
    2bca:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	cmd(0x20);		// Display Inversion OFF
    2bce:	80 e2       	ldi	r24, 0x20	; 32
    2bd0:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	cmd(0x3A);		// COLMOD: Pixel Format Set
    2bd4:	8a e3       	ldi	r24, 0x3A	; 58
    2bd6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	data(0x55);		// 16 bits/pixel
    2bda:	85 e5       	ldi	r24, 0x55	; 85
    2bdc:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
	cmd(0x36);		// Memory Access Control
    2be0:	86 e3       	ldi	r24, 0x36	; 54
    2be2:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	data(0x48);		// Column Adress Order, BGR
    2be6:	88 e4       	ldi	r24, 0x48	; 72
    2be8:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
	cmd(0x2C);		// Memory Write
    2bec:	8c e2       	ldi	r24, 0x2C	; 44
    2bee:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
    2bf2:	c0 e4       	ldi	r28, 0x40	; 64
    2bf4:	d1 e0       	ldi	r29, 0x01	; 1
    2bf6:	0d c0       	rjmp	.+26     	; 0x2c12 <_ZN7ili93414initEv+0xbc>
	for (r = 0; r < 320; r++)	// Black screen
		for (c = 0; c < 240; c++) {
			data(0x00);
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
			data(0x00);
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
			data(0x00);
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
    2c0a:	11 50       	subi	r17, 0x01	; 1
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
	data(0x48);		// Column Adress Order, BGR
	cmd(0x2C);		// Memory Write
	for (r = 0; r < 320; r++)	// Black screen
		for (c = 0; c < 240; c++) {
    2c0c:	a9 f7       	brne	.-22     	; 0x2bf8 <_ZN7ili93414initEv+0xa2>
    2c0e:	21 97       	sbiw	r28, 0x01	; 1
	cmd(0x3A);		// COLMOD: Pixel Format Set
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
	data(0x48);		// Column Adress Order, BGR
	cmd(0x2C);		// Memory Write
	for (r = 0; r < 320; r++)	// Black screen
    2c10:	11 f0       	breq	.+4      	; 0x2c16 <_ZN7ili93414initEv+0xc0>
	else
		TFT_WCTRL &= ~TFT_BLC;
}

inline void ili9341::init(void)
{
    2c12:	10 ef       	ldi	r17, 0xF0	; 240
    2c14:	f1 cf       	rjmp	.-30     	; 0x2bf8 <_ZN7ili93414initEv+0xa2>
		for (c = 0; c < 240; c++) {
			data(0x00);
			data(0x00);
			data(0x00);
		}
	cmd(0xB1);		// Frame Rate control, normal
    2c16:	81 eb       	ldi	r24, 0xB1	; 177
    2c18:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	data(0x00);		// Faster
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
	data(0x18);
    2c22:	88 e1       	ldi	r24, 0x18	; 24
    2c24:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
	cmd(0xB3);		// Frame Rate control, partial
    2c28:	83 eb       	ldi	r24, 0xB3	; 179
    2c2a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	data(0x00);		// Faster
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
	data(0x18);
    2c34:	88 e1       	ldi	r24, 0x18	; 24
    2c36:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
	cmd(0x29);		// Display On
    2c3a:	89 e2       	ldi	r24, 0x29	; 41
}
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	1f 91       	pop	r17
	data(0x00);		// Faster
	data(0x18);
	cmd(0xB3);		// Frame Rate control, partial
	data(0x00);		// Faster
	data(0x18);
	cmd(0x29);		// Display On
    2c42:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>

00002c46 <_ZN5tft_t7write16Ej>:
    2c46:	cf 93       	push	r28
    2c48:	c8 2f       	mov	r28, r24
    2c4a:	89 2f       	mov	r24, r25
    2c4c:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
    2c50:	8c 2f       	mov	r24, r28
    2c52:	cf 91       	pop	r28
    2c54:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>

00002c58 <_ZN5tft_t4fillEj>:
#endif
	}
}

inline void tft_t::fill(uint16_t clr)
{
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	8c 01       	movw	r16, r24
    2c6a:	d6 2e       	mov	r13, r22
    2c6c:	c7 2e       	mov	r12, r23
		printf("%d/%d, ",res.x,res.y);	
	}
	goto loop;

	return 1;
}
    2c6e:	fc 01       	movw	r30, r24
    2c70:	c7 81       	ldd	r28, Z+7	; 0x07
    2c72:	d0 85       	ldd	r29, Z+8	; 0x08
    2c74:	e1 84       	ldd	r14, Z+9	; 0x09
    2c76:	f2 84       	ldd	r15, Z+10	; 0x0a
	}
}

inline void tft_t::area(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
	cmd(0x2A);			// Column Address Set
    2c78:	8a e2       	ldi	r24, 0x2A	; 42
    2c7a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	write16(x);
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
	write16(x + w - 1);
    2c86:	ce 01       	movw	r24, r28
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
	cmd(0x2B);			// Page Address Set
    2c8e:	8b e2       	ldi	r24, 0x2B	; 43
    2c90:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	write16(y);
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
	write16(y + h - 1);
    2c9c:	c7 01       	movw	r24, r14
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN5tft_t7write16Ej>
	inline void point(uint16_t x, uint16_t y, uint16_t c);
	inline void shiftUp(const uint16_t l);

	inline void area(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
	inline void all(void) {area(0, 0, width(), height());}
	static inline void start(void) {cmd(0x2C);}	// Memory write
    2ca4:	8c e2       	ldi	r24, 0x2C	; 44
    2ca6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
    2caa:	11 c0       	rjmp	.+34     	; 0x2cce <_ZN5tft_t4fillEj+0x76>
    2cac:	f8 01       	movw	r30, r16
    2cae:	e1 84       	ldd	r14, Z+9	; 0x09
    2cb0:	f2 84       	ldd	r15, Z+10	; 0x0a
	uint16_t x = width(), y;
	all();
	start();
	while (x--) {
		y = height();
		while (y--) {
    2cb2:	09 c0       	rjmp	.+18     	; 0x2cc6 <_ZN5tft_t4fillEj+0x6e>
    2cb4:	f1 e0       	ldi	r31, 0x01	; 1
    2cb6:	ef 1a       	sub	r14, r31
    2cb8:	f1 08       	sbc	r15, r1
			data(ch);
    2cba:	8c 2d       	mov	r24, r12
    2cbc:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
			data(cl);
    2cc0:	8d 2d       	mov	r24, r13
    2cc2:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
	uint16_t x = width(), y;
	all();
	start();
	while (x--) {
		y = height();
		while (y--) {
    2cc6:	e1 14       	cp	r14, r1
    2cc8:	f1 04       	cpc	r15, r1
    2cca:	a1 f7       	brne	.-24     	; 0x2cb4 <_ZN5tft_t4fillEj+0x5c>
    2ccc:	21 97       	sbiw	r28, 0x01	; 1
{
	uint8_t ch = clr / 0x0100, cl = clr % 0x0100;
	uint16_t x = width(), y;
	all();
	start();
	while (x--) {
    2cce:	20 97       	sbiw	r28, 0x00	; 0
    2cd0:	69 f7       	brne	.-38     	; 0x2cac <_ZN5tft_t4fillEj+0x54>
		while (y--) {
			data(ch);
			data(cl);
		}
	}
}
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	ef 90       	pop	r14
    2cde:	df 90       	pop	r13
    2ce0:	cf 90       	pop	r12
    2ce2:	08 95       	ret

00002ce4 <main>:
	eeprom_first_done();
}

int main(void)
{
	init();
    2ce4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z4initv>
	inline void setBottomMask(const uint16_t lm) {d.bottomMask = lm;}
	// Return to normal mode (disable transform, vertical scrolling)
	inline void vsNormal(void) {setTransform(false); setVerticalScrolling(topEdge());}
#endif

	inline void clean(void) {fill(background()); setX(0); setY(0);}
    2ce8:	60 91 6c 01 	lds	r22, 0x016C
    2cec:	70 91 6d 01 	lds	r23, 0x016D
    2cf0:	8f e5       	ldi	r24, 0x5F	; 95
    2cf2:	91 e0       	ldi	r25, 0x01	; 1
    2cf4:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN5tft_t4fillEj>
	tft_t(void);

	inline class tft_t& operator<<(const char c);
	inline class tft_t& operator<<(const char *str);

	inline void setX(uint16_t x) {d.x = x;}
    2cf8:	10 92 63 01 	sts	0x0163, r1
    2cfc:	10 92 62 01 	sts	0x0162, r1
	inline void setY(uint16_t y) {d.y = y;}
    2d00:	10 92 65 01 	sts	0x0165, r1
    2d04:	10 92 64 01 	sts	0x0164, r1
	inline void setXY(uint16_t x, uint16_t y) {setX(x); setY(y);}
	inline uint16_t x(void) const {return d.x;}
	inline uint16_t y(void) const {return d.y;}
	inline uint16_t width(void) const {return d.w;}
	inline uint16_t height(void) const {return d.h;}
	inline void setZoom(const uint8_t zoom) {d.zoom = zoom;}
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	80 93 5f 01 	sts	0x015F, r24
	tft.clean();
	tft.setZoom(1);
	puts("*** Touch ***");
    2d0e:	8f e0       	ldi	r24, 0x0F	; 15
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <puts>

loop:
	if (touch.pressed()) {
		rTouch::coord_t res = touch.position();
		printf("%d/%d, ",res.x,res.y);	
    2d16:	cd e1       	ldi	r28, 0x1D	; 29
    2d18:	d1 e0       	ldi	r29, 0x01	; 1
	tft.clean();
	tft.setZoom(1);
	puts("*** Touch ***");

loop:
	if (touch.pressed()) {
    2d1a:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN6rTouch7pressedEv>
    2d1e:	88 23       	and	r24, r24
    2d20:	e1 f3       	breq	.-8      	; 0x2d1a <main+0x36>
		rTouch::coord_t res = touch.position();
    2d22:	8a e3       	ldi	r24, 0x3A	; 58
    2d24:	91 e0       	ldi	r25, 0x01	; 1
    2d26:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN6rTouch8positionEv>
		printf("%d/%d, ",res.x,res.y);	
    2d2a:	9f 93       	push	r25
    2d2c:	8f 93       	push	r24
    2d2e:	7f 93       	push	r23
    2d30:	6f 93       	push	r22
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	0e 94 dd 19 	call	0x33ba	; 0x33ba <printf>
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	e9 cf       	rjmp	.-46     	; 0x2d1a <main+0x36>

00002d48 <_GLOBAL__sub_I_tft>:
#include <eemem.h>
#include <adc.h>

//#define AUTO_COLOUR

tft_t tft;
    2d48:	8f e5       	ldi	r24, 0x5F	; 95
    2d4a:	91 e0       	ldi	r25, 0x01	; 1
    2d4c:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN5tft_tC1Ev>
rTouch touch(&tft);
    2d50:	6f e5       	ldi	r22, 0x5F	; 95
    2d52:	71 e0       	ldi	r23, 0x01	; 1
    2d54:	8a e3       	ldi	r24, 0x3A	; 58
    2d56:	91 e0       	ldi	r25, 0x01	; 1
    2d58:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <_ZN6rTouchC1EP5tft_t>

00002d5c <_ZN7ili934110_setOrientEh>:
	TFT_PDATA = 0x00; \
	TFT_WDATA = 0xFF; \
} while(0)

inline void ili9341::_setOrient(uint8_t o)
{
    2d5c:	cf 93       	push	r28
    2d5e:	c8 2f       	mov	r28, r24
	// BMPLandscape, BMPPortrait, BMPFlipLandscape, BMPFlipPortrait
	static const uint8_t orient[] = {
			0x28, 0x48, 0xE8, 0x88,
			0x68, 0xD8, 0xA8, 0x18
	};
	cmd(0x36);			// Memory Access Control
    2d60:	86 e3       	ldi	r24, 0x36	; 54
    2d62:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>
	data(orient[o]);
    2d66:	ec 2f       	mov	r30, r28
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	eb 5d       	subi	r30, 0xDB	; 219
    2d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6e:	80 81       	ld	r24, Z
}
    2d70:	cf 91       	pop	r28
	static const uint8_t orient[] = {
			0x28, 0x48, 0xE8, 0x88,
			0x68, 0xD8, 0xA8, 0x18
	};
	cmd(0x36);			// Memory Access Control
	data(orient[o]);
    2d72:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>

00002d76 <_ZN5tft_t5startEv>:
	inline void point(uint16_t x, uint16_t y, uint16_t c);
	inline void shiftUp(const uint16_t l);

	inline void area(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
	inline void all(void) {area(0, 0, width(), height());}
	static inline void start(void) {cmd(0x2C);}	// Memory write
    2d76:	8c e2       	ldi	r24, 0x2C	; 44
    2d78:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <_ZN7ili93413cmdEh>

00002d7c <_ZN5tft_t7newlineEv>:
	start();
	write16(c);
}

inline void tft_t::newline(void)
{
    2d7c:	cf 92       	push	r12
    2d7e:	df 92       	push	r13
    2d80:	ef 92       	push	r14
    2d82:	ff 92       	push	r15
    2d84:	0f 93       	push	r16
    2d86:	1f 93       	push	r17
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	ec 01       	movw	r28, r24
	tft_t(void);

	inline class tft_t& operator<<(const char c);
	inline class tft_t& operator<<(const char *str);

	inline void setX(uint16_t x) {d.x = x;}
    2d8e:	1c 82       	std	Y+4, r1	; 0x04
    2d90:	1b 82       	std	Y+3, r1	; 0x03
    2d92:	48 81       	ld	r20, Y
}

inline void tft_t::newline(void)
{
	setX(0);
	setY(y() + FONT_HEIGHT * zoom());
    2d94:	88 e0       	ldi	r24, 0x08	; 8
    2d96:	48 9f       	mul	r20, r24
    2d98:	a0 01       	movw	r20, r0
    2d9a:	11 24       	eor	r1, r1
    2d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2da0:	84 0f       	add	r24, r20
    2da2:	95 1f       	adc	r25, r21

	inline class tft_t& operator<<(const char c);
	inline class tft_t& operator<<(const char *str);

	inline void setX(uint16_t x) {d.x = x;}
	inline void setY(uint16_t y) {d.y = y;}
    2da4:	9e 83       	std	Y+6, r25	; 0x06
    2da6:	8d 83       	std	Y+5, r24	; 0x05
    2da8:	29 85       	ldd	r18, Y+9	; 0x09
    2daa:	3a 85       	ldd	r19, Y+10	; 0x0a

inline void tft_t::newline(void)
{
	setX(0);
	setY(y() + FONT_HEIGHT * zoom());
	if (y() + FONT_HEIGHT * zoom() > height()) {
    2dac:	84 0f       	add	r24, r20
    2dae:	95 1f       	adc	r25, r21
    2db0:	28 17       	cp	r18, r24
    2db2:	39 07       	cpc	r19, r25
    2db4:	20 f5       	brcc	.+72     	; 0x2dfe <_ZN5tft_t7newlineEv+0x82>
    2db6:	dd 84       	ldd	r13, Y+13	; 0x0d
    2db8:	ce 84       	ldd	r12, Y+14	; 0x0e
    2dba:	0f 81       	ldd	r16, Y+7	; 0x07
    2dbc:	18 85       	ldd	r17, Y+8	; 0x08
		uint16_t c);
	inline void point(uint16_t x, uint16_t y, uint16_t c);
	inline void shiftUp(const uint16_t l);

	inline void area(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
	inline void all(void) {area(0, 0, width(), height());}
    2dbe:	a8 01       	movw	r20, r16
    2dc0:	60 e0       	ldi	r22, 0x00	; 0
    2dc2:	70 e0       	ldi	r23, 0x00	; 0
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	0e 94 22 02 	call	0x444	; 0x444 <_ZN5tft_t4areaEjjjj.isra.17>
inline void tft_t::fill(uint16_t clr)
{
	uint8_t ch = clr / 0x0100, cl = clr % 0x0100;
	uint16_t x = width(), y;
	all();
	start();
    2dcc:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN5tft_t5startEv>
    2dd0:	11 c0       	rjmp	.+34     	; 0x2df4 <_ZN5tft_t7newlineEv+0x78>
    2dd2:	e9 84       	ldd	r14, Y+9	; 0x09
    2dd4:	fa 84       	ldd	r15, Y+10	; 0x0a
    2dd6:	09 c0       	rjmp	.+18     	; 0x2dea <_ZN5tft_t7newlineEv+0x6e>
	while (x--) {
		y = height();
		while (y--) {
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	e8 1a       	sub	r14, r24
    2ddc:	f1 08       	sbc	r15, r1
			data(ch);
    2dde:	8c 2d       	mov	r24, r12
    2de0:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
			data(cl);
    2de4:	8d 2d       	mov	r24, r13
    2de6:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN7ili93414dataEh>
	uint16_t x = width(), y;
	all();
	start();
	while (x--) {
		y = height();
		while (y--) {
    2dea:	e1 14       	cp	r14, r1
    2dec:	f1 04       	cpc	r15, r1
    2dee:	a1 f7       	brne	.-24     	; 0x2dd8 <_ZN5tft_t7newlineEv+0x5c>
    2df0:	01 50       	subi	r16, 0x01	; 1
    2df2:	11 09       	sbc	r17, r1
{
	uint8_t ch = clr / 0x0100, cl = clr % 0x0100;
	uint16_t x = width(), y;
	all();
	start();
	while (x--) {
    2df4:	01 15       	cp	r16, r1
    2df6:	11 05       	cpc	r17, r1
    2df8:	61 f7       	brne	.-40     	; 0x2dd2 <_ZN5tft_t7newlineEv+0x56>

	inline class tft_t& operator<<(const char c);
	inline class tft_t& operator<<(const char *str);

	inline void setX(uint16_t x) {d.x = x;}
	inline void setY(uint16_t y) {d.y = y;}
    2dfa:	1e 82       	std	Y+6, r1	; 0x06
    2dfc:	1d 82       	std	Y+5, r1	; 0x05
#else
		fill(background());
		setY(0);
#endif
	}
}
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	ff 90       	pop	r15
    2e08:	ef 90       	pop	r14
    2e0a:	df 90       	pop	r13
    2e0c:	cf 90       	pop	r12
    2e0e:	08 95       	ret

00002e10 <_ZN5tft_t4nextEv>:
    2e10:	fc 01       	movw	r30, r24
    2e12:	40 81       	ld	r20, Z
	if (transform() && !portrait()) {
		uint16_t xt = vsTransformBack(x());
		setX(vsTransform(xt + FONT_WIDTH * zoom()));
	} else {
#endif
		setX(x() + FONT_WIDTH * zoom());
    2e14:	f6 e0       	ldi	r31, 0x06	; 6
    2e16:	4f 9f       	mul	r20, r31
    2e18:	a0 01       	movw	r20, r0
    2e1a:	11 24       	eor	r1, r1
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	23 81       	ldd	r18, Z+3	; 0x03
    2e20:	34 81       	ldd	r19, Z+4	; 0x04
    2e22:	24 0f       	add	r18, r20
    2e24:	35 1f       	adc	r19, r21
	tft_t(void);

	inline class tft_t& operator<<(const char c);
	inline class tft_t& operator<<(const char *str);

	inline void setX(uint16_t x) {d.x = x;}
    2e26:	34 83       	std	Z+4, r19	; 0x04
    2e28:	23 83       	std	Z+3, r18	; 0x03
		uint16_t xt = vsTransformBack(x());
		setX(vsTransform(xt + FONT_WIDTH * zoom()));
	} else {
#endif
		setX(x() + FONT_WIDTH * zoom());
		if (x() + FONT_WIDTH * zoom() > width())
    2e2a:	24 0f       	add	r18, r20
    2e2c:	35 1f       	adc	r19, r21
    2e2e:	67 81       	ldd	r22, Z+7	; 0x07
    2e30:	70 85       	ldd	r23, Z+8	; 0x08
    2e32:	62 17       	cp	r22, r18
    2e34:	73 07       	cpc	r23, r19
    2e36:	10 f4       	brcc	.+4      	; 0x2e3c <_ZN5tft_t4nextEv+0x2c>
			newline();
    2e38:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <_ZN5tft_t7newlineEv>
    2e3c:	08 95       	ret

00002e3e <_ZN5tft_tlsEc>:
		for (uint16_t c = width(); c; c--)
			write16(background());
}

inline class tft_t& tft_t::operator<<(const char c)
{
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29
    2e42:	ec 01       	movw	r28, r24
	switch (c) {
    2e44:	69 30       	cpi	r22, 0x09	; 9
    2e46:	29 f0       	breq	.+10     	; 0x2e52 <_ZN5tft_tlsEc+0x14>
    2e48:	6a 30       	cpi	r22, 0x0A	; 10
    2e4a:	39 f5       	brne	.+78     	; 0x2e9a <_ZN5tft_tlsEc+0x5c>
	case '\n':
		newline();
    2e4c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_ZN5tft_t7newlineEv>
		break;
    2e50:	2b c0       	rjmp	.+86     	; 0x2ea8 <_ZN5tft_tlsEc+0x6a>
    2e52:	2b 81       	ldd	r18, Y+3	; 0x03
    2e54:	3c 81       	ldd	r19, Y+4	; 0x04
    2e56:	68 81       	ld	r22, Y
#endif
}

inline void tft_t::tab(void)
{
	if (x() % (FONT_WIDTH * zoom()))
    2e58:	86 e0       	ldi	r24, 0x06	; 6
    2e5a:	68 9f       	mul	r22, r24
    2e5c:	b0 01       	movw	r22, r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	c9 01       	movw	r24, r18
    2e62:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__udivmodhi4>
    2e66:	00 97       	sbiw	r24, 0x00	; 0
    2e68:	21 f0       	breq	.+8      	; 0x2e72 <_ZN5tft_tlsEc+0x34>
		setX(x() - x() % (FONT_WIDTH * zoom()));
    2e6a:	28 1b       	sub	r18, r24
    2e6c:	39 0b       	sbc	r19, r25
	tft_t(void);

	inline class tft_t& operator<<(const char c);
	inline class tft_t& operator<<(const char *str);

	inline void setX(uint16_t x) {d.x = x;}
    2e6e:	3c 83       	std	Y+4, r19	; 0x04
    2e70:	2b 83       	std	Y+3, r18	; 0x03
inline void tft_t::tab(void)
{
	if (x() % (FONT_WIDTH * zoom()))
		setX(x() - x() % (FONT_WIDTH * zoom()));
	do
		next();
    2e72:	ce 01       	movw	r24, r28
    2e74:	0e 94 08 17 	call	0x2e10	; 0x2e10 <_ZN5tft_t4nextEv>
    2e78:	68 81       	ld	r22, Y

inline void tft_t::tab(void)
{
	if (x() % (FONT_WIDTH * zoom()))
		setX(x() - x() % (FONT_WIDTH * zoom()));
	do
    2e7a:	86 e0       	ldi	r24, 0x06	; 6
    2e7c:	68 9f       	mul	r22, r24
    2e7e:	b0 01       	movw	r22, r0
    2e80:	11 24       	eor	r1, r1
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	9c 81       	ldd	r25, Y+4	; 0x04
    2e86:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__udivmodhi4>
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	6a 81       	ldd	r22, Y+2	; 0x02
    2e8e:	70 e0       	ldi	r23, 0x00	; 0
    2e90:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__udivmodhi4>
    2e94:	89 2b       	or	r24, r25
    2e96:	69 f7       	brne	.-38     	; 0x2e72 <_ZN5tft_tlsEc+0x34>
    2e98:	07 c0       	rjmp	.+14     	; 0x2ea8 <_ZN5tft_tlsEc+0x6a>
		break;
	case '\t':
		tab();
		break;
	default:
		if ((unsigned)c < ' ' || (unsigned)c > 127)
    2e9a:	60 32       	cpi	r22, 0x20	; 32
    2e9c:	2c f0       	brlt	.+10     	; 0x2ea8 <_ZN5tft_tlsEc+0x6a>
			break;
		putch(c);
    2e9e:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN5tft_t5putchEc>
		next();
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	0e 94 08 17 	call	0x2e10	; 0x2e10 <_ZN5tft_t4nextEv>
	}
	return *this;
}
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	08 95       	ret

00002eb0 <_Z8tftputchcP6__file>:

static tft_t *tft;

inline int tftputch(const char c, FILE *stream)
{
	(*tft) << c;
    2eb0:	68 2f       	mov	r22, r24
    2eb2:	80 91 6e 01 	lds	r24, 0x016E
    2eb6:	90 91 6f 01 	lds	r25, 0x016F
    2eba:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <_ZN5tft_tlsEc>
	return 0;
}
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	08 95       	ret

00002ec4 <__umulhisi3>:
    2ec4:	a2 9f       	mul	r26, r18
    2ec6:	b0 01       	movw	r22, r0
    2ec8:	b3 9f       	mul	r27, r19
    2eca:	c0 01       	movw	r24, r0
    2ecc:	a3 9f       	mul	r26, r19
    2ece:	01 d0       	rcall	.+2      	; 0x2ed2 <__umulhisi3+0xe>
    2ed0:	b2 9f       	mul	r27, r18
    2ed2:	70 0d       	add	r23, r0
    2ed4:	81 1d       	adc	r24, r1
    2ed6:	11 24       	eor	r1, r1
    2ed8:	91 1d       	adc	r25, r1
    2eda:	08 95       	ret

00002edc <__mulshisi3>:
    2edc:	b7 ff       	sbrs	r27, 7
    2ede:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__muluhisi3>

00002ee2 <__mulohisi3>:
    2ee2:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__muluhisi3>
    2ee6:	82 1b       	sub	r24, r18
    2ee8:	93 0b       	sbc	r25, r19
    2eea:	08 95       	ret

00002eec <__mulsi3>:
    2eec:	db 01       	movw	r26, r22
    2eee:	8f 93       	push	r24
    2ef0:	9f 93       	push	r25
    2ef2:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__muluhisi3>
    2ef6:	bf 91       	pop	r27
    2ef8:	af 91       	pop	r26
    2efa:	a2 9f       	mul	r26, r18
    2efc:	80 0d       	add	r24, r0
    2efe:	91 1d       	adc	r25, r1
    2f00:	a3 9f       	mul	r26, r19
    2f02:	90 0d       	add	r25, r0
    2f04:	b2 9f       	mul	r27, r18
    2f06:	90 0d       	add	r25, r0
    2f08:	11 24       	eor	r1, r1
    2f0a:	08 95       	ret

00002f0c <__udivmodqi4>:
    2f0c:	99 1b       	sub	r25, r25
    2f0e:	79 e0       	ldi	r23, 0x09	; 9
    2f10:	04 c0       	rjmp	.+8      	; 0x2f1a <__udivmodqi4_ep>

00002f12 <__udivmodqi4_loop>:
    2f12:	99 1f       	adc	r25, r25
    2f14:	96 17       	cp	r25, r22
    2f16:	08 f0       	brcs	.+2      	; 0x2f1a <__udivmodqi4_ep>
    2f18:	96 1b       	sub	r25, r22

00002f1a <__udivmodqi4_ep>:
    2f1a:	88 1f       	adc	r24, r24
    2f1c:	7a 95       	dec	r23
    2f1e:	c9 f7       	brne	.-14     	; 0x2f12 <__udivmodqi4_loop>
    2f20:	80 95       	com	r24
    2f22:	08 95       	ret

00002f24 <__udivmodhi4>:
    2f24:	aa 1b       	sub	r26, r26
    2f26:	bb 1b       	sub	r27, r27
    2f28:	51 e1       	ldi	r21, 0x11	; 17
    2f2a:	07 c0       	rjmp	.+14     	; 0x2f3a <__udivmodhi4_ep>

00002f2c <__udivmodhi4_loop>:
    2f2c:	aa 1f       	adc	r26, r26
    2f2e:	bb 1f       	adc	r27, r27
    2f30:	a6 17       	cp	r26, r22
    2f32:	b7 07       	cpc	r27, r23
    2f34:	10 f0       	brcs	.+4      	; 0x2f3a <__udivmodhi4_ep>
    2f36:	a6 1b       	sub	r26, r22
    2f38:	b7 0b       	sbc	r27, r23

00002f3a <__udivmodhi4_ep>:
    2f3a:	88 1f       	adc	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	5a 95       	dec	r21
    2f40:	a9 f7       	brne	.-22     	; 0x2f2c <__udivmodhi4_loop>
    2f42:	80 95       	com	r24
    2f44:	90 95       	com	r25
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	08 95       	ret

00002f4c <__divmodhi4>:
    2f4c:	97 fb       	bst	r25, 7
    2f4e:	07 2e       	mov	r0, r23
    2f50:	16 f4       	brtc	.+4      	; 0x2f56 <__divmodhi4+0xa>
    2f52:	00 94       	com	r0
    2f54:	07 d0       	rcall	.+14     	; 0x2f64 <__divmodhi4_neg1>
    2f56:	77 fd       	sbrc	r23, 7
    2f58:	09 d0       	rcall	.+18     	; 0x2f6c <__divmodhi4_neg2>
    2f5a:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__udivmodhi4>
    2f5e:	07 fc       	sbrc	r0, 7
    2f60:	05 d0       	rcall	.+10     	; 0x2f6c <__divmodhi4_neg2>
    2f62:	3e f4       	brtc	.+14     	; 0x2f72 <__divmodhi4_exit>

00002f64 <__divmodhi4_neg1>:
    2f64:	90 95       	com	r25
    2f66:	81 95       	neg	r24
    2f68:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6a:	08 95       	ret

00002f6c <__divmodhi4_neg2>:
    2f6c:	70 95       	com	r23
    2f6e:	61 95       	neg	r22
    2f70:	7f 4f       	sbci	r23, 0xFF	; 255

00002f72 <__divmodhi4_exit>:
    2f72:	08 95       	ret

00002f74 <__divmodsi4>:
    2f74:	05 2e       	mov	r0, r21
    2f76:	97 fb       	bst	r25, 7
    2f78:	16 f4       	brtc	.+4      	; 0x2f7e <__divmodsi4+0xa>
    2f7a:	00 94       	com	r0
    2f7c:	07 d0       	rcall	.+14     	; 0x2f8c <__divmodsi4_neg1>
    2f7e:	57 fd       	sbrc	r21, 7
    2f80:	0d d0       	rcall	.+26     	; 0x2f9c <__divmodsi4_neg2>
    2f82:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__udivmodsi4>
    2f86:	07 fc       	sbrc	r0, 7
    2f88:	09 d0       	rcall	.+18     	; 0x2f9c <__divmodsi4_neg2>
    2f8a:	7e f4       	brtc	.+30     	; 0x2faa <__divmodsi4_exit>

00002f8c <__divmodsi4_neg1>:
    2f8c:	90 95       	com	r25
    2f8e:	80 95       	com	r24
    2f90:	70 95       	com	r23
    2f92:	61 95       	neg	r22
    2f94:	7f 4f       	sbci	r23, 0xFF	; 255
    2f96:	8f 4f       	sbci	r24, 0xFF	; 255
    2f98:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9a:	08 95       	ret

00002f9c <__divmodsi4_neg2>:
    2f9c:	50 95       	com	r21
    2f9e:	40 95       	com	r20
    2fa0:	30 95       	com	r19
    2fa2:	21 95       	neg	r18
    2fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa6:	4f 4f       	sbci	r20, 0xFF	; 255
    2fa8:	5f 4f       	sbci	r21, 0xFF	; 255

00002faa <__divmodsi4_exit>:
    2faa:	08 95       	ret

00002fac <__muluhisi3>:
    2fac:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__umulhisi3>
    2fb0:	a5 9f       	mul	r26, r21
    2fb2:	90 0d       	add	r25, r0
    2fb4:	b4 9f       	mul	r27, r20
    2fb6:	90 0d       	add	r25, r0
    2fb8:	a4 9f       	mul	r26, r20
    2fba:	80 0d       	add	r24, r0
    2fbc:	91 1d       	adc	r25, r1
    2fbe:	11 24       	eor	r1, r1
    2fc0:	08 95       	ret

00002fc2 <__udivmodsi4>:
    2fc2:	a1 e2       	ldi	r26, 0x21	; 33
    2fc4:	1a 2e       	mov	r1, r26
    2fc6:	aa 1b       	sub	r26, r26
    2fc8:	bb 1b       	sub	r27, r27
    2fca:	fd 01       	movw	r30, r26
    2fcc:	0d c0       	rjmp	.+26     	; 0x2fe8 <__udivmodsi4_ep>

00002fce <__udivmodsi4_loop>:
    2fce:	aa 1f       	adc	r26, r26
    2fd0:	bb 1f       	adc	r27, r27
    2fd2:	ee 1f       	adc	r30, r30
    2fd4:	ff 1f       	adc	r31, r31
    2fd6:	a2 17       	cp	r26, r18
    2fd8:	b3 07       	cpc	r27, r19
    2fda:	e4 07       	cpc	r30, r20
    2fdc:	f5 07       	cpc	r31, r21
    2fde:	20 f0       	brcs	.+8      	; 0x2fe8 <__udivmodsi4_ep>
    2fe0:	a2 1b       	sub	r26, r18
    2fe2:	b3 0b       	sbc	r27, r19
    2fe4:	e4 0b       	sbc	r30, r20
    2fe6:	f5 0b       	sbc	r31, r21

00002fe8 <__udivmodsi4_ep>:
    2fe8:	66 1f       	adc	r22, r22
    2fea:	77 1f       	adc	r23, r23
    2fec:	88 1f       	adc	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	1a 94       	dec	r1
    2ff2:	69 f7       	brne	.-38     	; 0x2fce <__udivmodsi4_loop>
    2ff4:	60 95       	com	r22
    2ff6:	70 95       	com	r23
    2ff8:	80 95       	com	r24
    2ffa:	90 95       	com	r25
    2ffc:	9b 01       	movw	r18, r22
    2ffe:	ac 01       	movw	r20, r24
    3000:	bd 01       	movw	r22, r26
    3002:	cf 01       	movw	r24, r30
    3004:	08 95       	ret

00003006 <__prologue_saves__>:
    3006:	2f 92       	push	r2
    3008:	3f 92       	push	r3
    300a:	4f 92       	push	r4
    300c:	5f 92       	push	r5
    300e:	6f 92       	push	r6
    3010:	7f 92       	push	r7
    3012:	8f 92       	push	r8
    3014:	9f 92       	push	r9
    3016:	af 92       	push	r10
    3018:	bf 92       	push	r11
    301a:	cf 92       	push	r12
    301c:	df 92       	push	r13
    301e:	ef 92       	push	r14
    3020:	ff 92       	push	r15
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	ca 1b       	sub	r28, r26
    3030:	db 0b       	sbc	r29, r27
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	09 94       	ijmp

0000303e <__epilogue_restores__>:
    303e:	2a 88       	ldd	r2, Y+18	; 0x12
    3040:	39 88       	ldd	r3, Y+17	; 0x11
    3042:	48 88       	ldd	r4, Y+16	; 0x10
    3044:	5f 84       	ldd	r5, Y+15	; 0x0f
    3046:	6e 84       	ldd	r6, Y+14	; 0x0e
    3048:	7d 84       	ldd	r7, Y+13	; 0x0d
    304a:	8c 84       	ldd	r8, Y+12	; 0x0c
    304c:	9b 84       	ldd	r9, Y+11	; 0x0b
    304e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3050:	b9 84       	ldd	r11, Y+9	; 0x09
    3052:	c8 84       	ldd	r12, Y+8	; 0x08
    3054:	df 80       	ldd	r13, Y+7	; 0x07
    3056:	ee 80       	ldd	r14, Y+6	; 0x06
    3058:	fd 80       	ldd	r15, Y+5	; 0x05
    305a:	0c 81       	ldd	r16, Y+4	; 0x04
    305c:	1b 81       	ldd	r17, Y+3	; 0x03
    305e:	aa 81       	ldd	r26, Y+2	; 0x02
    3060:	b9 81       	ldd	r27, Y+1	; 0x01
    3062:	ce 0f       	add	r28, r30
    3064:	d1 1d       	adc	r29, r1
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	f8 94       	cli
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	ed 01       	movw	r28, r26
    3072:	08 95       	ret

00003074 <__tablejump2__>:
    3074:	ee 0f       	add	r30, r30
    3076:	ff 1f       	adc	r31, r31

00003078 <__tablejump__>:
    3078:	05 90       	lpm	r0, Z+
    307a:	f4 91       	lpm	r31, Z+
    307c:	e0 2d       	mov	r30, r0
    307e:	09 94       	ijmp

00003080 <__clzsi2>:
    3080:	0e 94 49 18 	call	0x3092	; 0x3092 <__clzhi2>
    3084:	84 ff       	sbrs	r24, 4
    3086:	08 95       	ret
    3088:	cb 01       	movw	r24, r22
    308a:	0e 94 49 18 	call	0x3092	; 0x3092 <__clzhi2>
    308e:	80 5f       	subi	r24, 0xF0	; 240
    3090:	08 95       	ret

00003092 <__clzhi2>:
    3092:	aa 27       	eor	r26, r26
    3094:	99 23       	and	r25, r25
    3096:	29 f4       	brne	.+10     	; 0x30a2 <__clzhi2+0x10>
    3098:	a8 5f       	subi	r26, 0xF8	; 248
    309a:	98 2b       	or	r25, r24
    309c:	11 f4       	brne	.+4      	; 0x30a2 <__clzhi2+0x10>
    309e:	80 e1       	ldi	r24, 0x10	; 16
    30a0:	08 95       	ret
    30a2:	90 31       	cpi	r25, 0x10	; 16
    30a4:	18 f4       	brcc	.+6      	; 0x30ac <__clzhi2+0x1a>
    30a6:	ad 5f       	subi	r26, 0xFD	; 253
    30a8:	92 95       	swap	r25
    30aa:	a3 95       	inc	r26
    30ac:	99 0f       	add	r25, r25
    30ae:	e8 f7       	brcc	.-6      	; 0x30aa <__clzhi2+0x18>
    30b0:	8a 2f       	mov	r24, r26
    30b2:	99 27       	eor	r25, r25
    30b4:	08 95       	ret

000030b6 <malloc>:
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	82 30       	cpi	r24, 0x02	; 2
    30c0:	91 05       	cpc	r25, r1
    30c2:	10 f4       	brcc	.+4      	; 0x30c8 <malloc+0x12>
    30c4:	82 e0       	ldi	r24, 0x02	; 2
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	e0 91 bf 01 	lds	r30, 0x01BF
    30cc:	f0 91 c0 01 	lds	r31, 0x01C0
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	c0 e0       	ldi	r28, 0x00	; 0
    30d6:	d0 e0       	ldi	r29, 0x00	; 0
    30d8:	23 c0       	rjmp	.+70     	; 0x3120 <malloc+0x6a>
    30da:	40 81       	ld	r20, Z
    30dc:	51 81       	ldd	r21, Z+1	; 0x01
    30de:	48 17       	cp	r20, r24
    30e0:	59 07       	cpc	r21, r25
    30e2:	a8 f0       	brcs	.+42     	; 0x310e <malloc+0x58>
    30e4:	48 17       	cp	r20, r24
    30e6:	59 07       	cpc	r21, r25
    30e8:	61 f4       	brne	.+24     	; 0x3102 <malloc+0x4c>
    30ea:	82 81       	ldd	r24, Z+2	; 0x02
    30ec:	93 81       	ldd	r25, Z+3	; 0x03
    30ee:	20 97       	sbiw	r28, 0x00	; 0
    30f0:	19 f0       	breq	.+6      	; 0x30f8 <malloc+0x42>
    30f2:	9b 83       	std	Y+3, r25	; 0x03
    30f4:	8a 83       	std	Y+2, r24	; 0x02
    30f6:	2e c0       	rjmp	.+92     	; 0x3154 <malloc+0x9e>
    30f8:	90 93 c0 01 	sts	0x01C0, r25
    30fc:	80 93 bf 01 	sts	0x01BF, r24
    3100:	29 c0       	rjmp	.+82     	; 0x3154 <malloc+0x9e>
    3102:	21 15       	cp	r18, r1
    3104:	31 05       	cpc	r19, r1
    3106:	29 f0       	breq	.+10     	; 0x3112 <malloc+0x5c>
    3108:	42 17       	cp	r20, r18
    310a:	53 07       	cpc	r21, r19
    310c:	10 f0       	brcs	.+4      	; 0x3112 <malloc+0x5c>
    310e:	a9 01       	movw	r20, r18
    3110:	02 c0       	rjmp	.+4      	; 0x3116 <malloc+0x60>
    3112:	be 01       	movw	r22, r28
    3114:	df 01       	movw	r26, r30
    3116:	02 81       	ldd	r16, Z+2	; 0x02
    3118:	13 81       	ldd	r17, Z+3	; 0x03
    311a:	ef 01       	movw	r28, r30
    311c:	9a 01       	movw	r18, r20
    311e:	f8 01       	movw	r30, r16
    3120:	30 97       	sbiw	r30, 0x00	; 0
    3122:	d9 f6       	brne	.-74     	; 0x30da <malloc+0x24>
    3124:	21 15       	cp	r18, r1
    3126:	31 05       	cpc	r19, r1
    3128:	09 f1       	breq	.+66     	; 0x316c <malloc+0xb6>
    312a:	28 1b       	sub	r18, r24
    312c:	39 0b       	sbc	r19, r25
    312e:	24 30       	cpi	r18, 0x04	; 4
    3130:	31 05       	cpc	r19, r1
    3132:	90 f4       	brcc	.+36     	; 0x3158 <malloc+0xa2>
    3134:	12 96       	adiw	r26, 0x02	; 2
    3136:	8d 91       	ld	r24, X+
    3138:	9c 91       	ld	r25, X
    313a:	13 97       	sbiw	r26, 0x03	; 3
    313c:	61 15       	cp	r22, r1
    313e:	71 05       	cpc	r23, r1
    3140:	21 f0       	breq	.+8      	; 0x314a <malloc+0x94>
    3142:	fb 01       	movw	r30, r22
    3144:	93 83       	std	Z+3, r25	; 0x03
    3146:	82 83       	std	Z+2, r24	; 0x02
    3148:	04 c0       	rjmp	.+8      	; 0x3152 <malloc+0x9c>
    314a:	90 93 c0 01 	sts	0x01C0, r25
    314e:	80 93 bf 01 	sts	0x01BF, r24
    3152:	fd 01       	movw	r30, r26
    3154:	32 96       	adiw	r30, 0x02	; 2
    3156:	44 c0       	rjmp	.+136    	; 0x31e0 <malloc+0x12a>
    3158:	fd 01       	movw	r30, r26
    315a:	e2 0f       	add	r30, r18
    315c:	f3 1f       	adc	r31, r19
    315e:	81 93       	st	Z+, r24
    3160:	91 93       	st	Z+, r25
    3162:	22 50       	subi	r18, 0x02	; 2
    3164:	31 09       	sbc	r19, r1
    3166:	2d 93       	st	X+, r18
    3168:	3c 93       	st	X, r19
    316a:	3a c0       	rjmp	.+116    	; 0x31e0 <malloc+0x12a>
    316c:	20 91 bd 01 	lds	r18, 0x01BD
    3170:	30 91 be 01 	lds	r19, 0x01BE
    3174:	23 2b       	or	r18, r19
    3176:	41 f4       	brne	.+16     	; 0x3188 <malloc+0xd2>
    3178:	20 91 03 01 	lds	r18, 0x0103
    317c:	30 91 04 01 	lds	r19, 0x0104
    3180:	30 93 be 01 	sts	0x01BE, r19
    3184:	20 93 bd 01 	sts	0x01BD, r18
    3188:	20 91 01 01 	lds	r18, 0x0101
    318c:	30 91 02 01 	lds	r19, 0x0102
    3190:	21 15       	cp	r18, r1
    3192:	31 05       	cpc	r19, r1
    3194:	41 f4       	brne	.+16     	; 0x31a6 <malloc+0xf0>
    3196:	2d b7       	in	r18, 0x3d	; 61
    3198:	3e b7       	in	r19, 0x3e	; 62
    319a:	40 91 05 01 	lds	r20, 0x0105
    319e:	50 91 06 01 	lds	r21, 0x0106
    31a2:	24 1b       	sub	r18, r20
    31a4:	35 0b       	sbc	r19, r21
    31a6:	e0 91 bd 01 	lds	r30, 0x01BD
    31aa:	f0 91 be 01 	lds	r31, 0x01BE
    31ae:	e2 17       	cp	r30, r18
    31b0:	f3 07       	cpc	r31, r19
    31b2:	a0 f4       	brcc	.+40     	; 0x31dc <malloc+0x126>
    31b4:	2e 1b       	sub	r18, r30
    31b6:	3f 0b       	sbc	r19, r31
    31b8:	28 17       	cp	r18, r24
    31ba:	39 07       	cpc	r19, r25
    31bc:	78 f0       	brcs	.+30     	; 0x31dc <malloc+0x126>
    31be:	ac 01       	movw	r20, r24
    31c0:	4e 5f       	subi	r20, 0xFE	; 254
    31c2:	5f 4f       	sbci	r21, 0xFF	; 255
    31c4:	24 17       	cp	r18, r20
    31c6:	35 07       	cpc	r19, r21
    31c8:	48 f0       	brcs	.+18     	; 0x31dc <malloc+0x126>
    31ca:	4e 0f       	add	r20, r30
    31cc:	5f 1f       	adc	r21, r31
    31ce:	50 93 be 01 	sts	0x01BE, r21
    31d2:	40 93 bd 01 	sts	0x01BD, r20
    31d6:	81 93       	st	Z+, r24
    31d8:	91 93       	st	Z+, r25
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <malloc+0x12a>
    31dc:	e0 e0       	ldi	r30, 0x00	; 0
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	cf 01       	movw	r24, r30
    31e2:	df 91       	pop	r29
    31e4:	cf 91       	pop	r28
    31e6:	1f 91       	pop	r17
    31e8:	0f 91       	pop	r16
    31ea:	08 95       	ret

000031ec <free>:
    31ec:	ef 92       	push	r14
    31ee:	ff 92       	push	r15
    31f0:	0f 93       	push	r16
    31f2:	1f 93       	push	r17
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	09 f4       	brne	.+2      	; 0x31fe <free+0x12>
    31fc:	8e c0       	rjmp	.+284    	; 0x331a <free+0x12e>
    31fe:	dc 01       	movw	r26, r24
    3200:	12 97       	sbiw	r26, 0x02	; 2
    3202:	13 96       	adiw	r26, 0x03	; 3
    3204:	1c 92       	st	X, r1
    3206:	1e 92       	st	-X, r1
    3208:	12 97       	sbiw	r26, 0x02	; 2
    320a:	e0 90 bf 01 	lds	r14, 0x01BF
    320e:	f0 90 c0 01 	lds	r15, 0x01C0
    3212:	e1 14       	cp	r14, r1
    3214:	f1 04       	cpc	r15, r1
    3216:	89 f4       	brne	.+34     	; 0x323a <free+0x4e>
    3218:	2d 91       	ld	r18, X+
    321a:	3c 91       	ld	r19, X
    321c:	11 97       	sbiw	r26, 0x01	; 1
    321e:	28 0f       	add	r18, r24
    3220:	39 1f       	adc	r19, r25
    3222:	80 91 bd 01 	lds	r24, 0x01BD
    3226:	90 91 be 01 	lds	r25, 0x01BE
    322a:	82 17       	cp	r24, r18
    322c:	93 07       	cpc	r25, r19
    322e:	89 f5       	brne	.+98     	; 0x3292 <free+0xa6>
    3230:	b0 93 be 01 	sts	0x01BE, r27
    3234:	a0 93 bd 01 	sts	0x01BD, r26
    3238:	70 c0       	rjmp	.+224    	; 0x331a <free+0x12e>
    323a:	e7 01       	movw	r28, r14
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	01 c0       	rjmp	.+2      	; 0x3244 <free+0x58>
    3242:	ea 01       	movw	r28, r20
    3244:	ca 17       	cp	r28, r26
    3246:	db 07       	cpc	r29, r27
    3248:	38 f4       	brcc	.+14     	; 0x3258 <free+0x6c>
    324a:	4a 81       	ldd	r20, Y+2	; 0x02
    324c:	5b 81       	ldd	r21, Y+3	; 0x03
    324e:	9e 01       	movw	r18, r28
    3250:	41 15       	cp	r20, r1
    3252:	51 05       	cpc	r21, r1
    3254:	b1 f7       	brne	.-20     	; 0x3242 <free+0x56>
    3256:	22 c0       	rjmp	.+68     	; 0x329c <free+0xb0>
    3258:	ac 01       	movw	r20, r24
    325a:	42 50       	subi	r20, 0x02	; 2
    325c:	51 09       	sbc	r21, r1
    325e:	fa 01       	movw	r30, r20
    3260:	d3 83       	std	Z+3, r29	; 0x03
    3262:	c2 83       	std	Z+2, r28	; 0x02
    3264:	00 81       	ld	r16, Z
    3266:	11 81       	ldd	r17, Z+1	; 0x01
    3268:	bc 01       	movw	r22, r24
    326a:	60 0f       	add	r22, r16
    326c:	71 1f       	adc	r23, r17
    326e:	6c 17       	cp	r22, r28
    3270:	7d 07       	cpc	r23, r29
    3272:	61 f4       	brne	.+24     	; 0x328c <free+0xa0>
    3274:	68 81       	ld	r22, Y
    3276:	79 81       	ldd	r23, Y+1	; 0x01
    3278:	60 0f       	add	r22, r16
    327a:	71 1f       	adc	r23, r17
    327c:	6e 5f       	subi	r22, 0xFE	; 254
    327e:	7f 4f       	sbci	r23, 0xFF	; 255
    3280:	71 83       	std	Z+1, r23	; 0x01
    3282:	60 83       	st	Z, r22
    3284:	6a 81       	ldd	r22, Y+2	; 0x02
    3286:	7b 81       	ldd	r23, Y+3	; 0x03
    3288:	73 83       	std	Z+3, r23	; 0x03
    328a:	62 83       	std	Z+2, r22	; 0x02
    328c:	21 15       	cp	r18, r1
    328e:	31 05       	cpc	r19, r1
    3290:	29 f4       	brne	.+10     	; 0x329c <free+0xb0>
    3292:	b0 93 c0 01 	sts	0x01C0, r27
    3296:	a0 93 bf 01 	sts	0x01BF, r26
    329a:	3f c0       	rjmp	.+126    	; 0x331a <free+0x12e>
    329c:	f9 01       	movw	r30, r18
    329e:	b3 83       	std	Z+3, r27	; 0x03
    32a0:	a2 83       	std	Z+2, r26	; 0x02
    32a2:	e9 01       	movw	r28, r18
    32a4:	49 91       	ld	r20, Y+
    32a6:	59 91       	ld	r21, Y+
    32a8:	c4 0f       	add	r28, r20
    32aa:	d5 1f       	adc	r29, r21
    32ac:	ac 17       	cp	r26, r28
    32ae:	bd 07       	cpc	r27, r29
    32b0:	71 f4       	brne	.+28     	; 0x32ce <free+0xe2>
    32b2:	dc 01       	movw	r26, r24
    32b4:	9e 91       	ld	r25, -X
    32b6:	8e 91       	ld	r24, -X
    32b8:	84 0f       	add	r24, r20
    32ba:	95 1f       	adc	r25, r21
    32bc:	02 96       	adiw	r24, 0x02	; 2
    32be:	91 83       	std	Z+1, r25	; 0x01
    32c0:	80 83       	st	Z, r24
    32c2:	12 96       	adiw	r26, 0x02	; 2
    32c4:	8d 91       	ld	r24, X+
    32c6:	9c 91       	ld	r25, X
    32c8:	13 97       	sbiw	r26, 0x03	; 3
    32ca:	93 83       	std	Z+3, r25	; 0x03
    32cc:	82 83       	std	Z+2, r24	; 0x02
    32ce:	a0 e0       	ldi	r26, 0x00	; 0
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	02 c0       	rjmp	.+4      	; 0x32d8 <free+0xec>
    32d4:	d7 01       	movw	r26, r14
    32d6:	7c 01       	movw	r14, r24
    32d8:	f7 01       	movw	r30, r14
    32da:	82 81       	ldd	r24, Z+2	; 0x02
    32dc:	93 81       	ldd	r25, Z+3	; 0x03
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	c9 f7       	brne	.-14     	; 0x32d4 <free+0xe8>
    32e2:	c7 01       	movw	r24, r14
    32e4:	02 96       	adiw	r24, 0x02	; 2
    32e6:	20 81       	ld	r18, Z
    32e8:	31 81       	ldd	r19, Z+1	; 0x01
    32ea:	82 0f       	add	r24, r18
    32ec:	93 1f       	adc	r25, r19
    32ee:	20 91 bd 01 	lds	r18, 0x01BD
    32f2:	30 91 be 01 	lds	r19, 0x01BE
    32f6:	28 17       	cp	r18, r24
    32f8:	39 07       	cpc	r19, r25
    32fa:	79 f4       	brne	.+30     	; 0x331a <free+0x12e>
    32fc:	10 97       	sbiw	r26, 0x00	; 0
    32fe:	29 f4       	brne	.+10     	; 0x330a <free+0x11e>
    3300:	10 92 c0 01 	sts	0x01C0, r1
    3304:	10 92 bf 01 	sts	0x01BF, r1
    3308:	04 c0       	rjmp	.+8      	; 0x3312 <free+0x126>
    330a:	13 96       	adiw	r26, 0x03	; 3
    330c:	1c 92       	st	X, r1
    330e:	1e 92       	st	-X, r1
    3310:	12 97       	sbiw	r26, 0x02	; 2
    3312:	f0 92 be 01 	sts	0x01BE, r15
    3316:	e0 92 bd 01 	sts	0x01BD, r14
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	e6 e0       	ldi	r30, 0x06	; 6
    3320:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

00003324 <fdevopen>:
    3324:	0f 93       	push	r16
    3326:	1f 93       	push	r17
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	ec 01       	movw	r28, r24
    332e:	8b 01       	movw	r16, r22
    3330:	00 97       	sbiw	r24, 0x00	; 0
    3332:	31 f4       	brne	.+12     	; 0x3340 <fdevopen+0x1c>
    3334:	61 15       	cp	r22, r1
    3336:	71 05       	cpc	r23, r1
    3338:	19 f4       	brne	.+6      	; 0x3340 <fdevopen+0x1c>
    333a:	e0 e0       	ldi	r30, 0x00	; 0
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	37 c0       	rjmp	.+110    	; 0x33ae <fdevopen+0x8a>
    3340:	6e e0       	ldi	r22, 0x0E	; 14
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	0e 94 3a 1c 	call	0x3874	; 0x3874 <calloc>
    334c:	fc 01       	movw	r30, r24
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	a1 f3       	breq	.-24     	; 0x333a <fdevopen+0x16>
    3352:	80 e8       	ldi	r24, 0x80	; 128
    3354:	83 83       	std	Z+3, r24	; 0x03
    3356:	01 15       	cp	r16, r1
    3358:	11 05       	cpc	r17, r1
    335a:	71 f0       	breq	.+28     	; 0x3378 <fdevopen+0x54>
    335c:	13 87       	std	Z+11, r17	; 0x0b
    335e:	02 87       	std	Z+10, r16	; 0x0a
    3360:	81 e8       	ldi	r24, 0x81	; 129
    3362:	83 83       	std	Z+3, r24	; 0x03
    3364:	80 91 c1 01 	lds	r24, 0x01C1
    3368:	90 91 c2 01 	lds	r25, 0x01C2
    336c:	89 2b       	or	r24, r25
    336e:	21 f4       	brne	.+8      	; 0x3378 <fdevopen+0x54>
    3370:	f0 93 c2 01 	sts	0x01C2, r31
    3374:	e0 93 c1 01 	sts	0x01C1, r30
    3378:	20 97       	sbiw	r28, 0x00	; 0
    337a:	c9 f0       	breq	.+50     	; 0x33ae <fdevopen+0x8a>
    337c:	d1 87       	std	Z+9, r29	; 0x09
    337e:	c0 87       	std	Z+8, r28	; 0x08
    3380:	83 81       	ldd	r24, Z+3	; 0x03
    3382:	82 60       	ori	r24, 0x02	; 2
    3384:	83 83       	std	Z+3, r24	; 0x03
    3386:	80 91 c3 01 	lds	r24, 0x01C3
    338a:	90 91 c4 01 	lds	r25, 0x01C4
    338e:	89 2b       	or	r24, r25
    3390:	71 f4       	brne	.+28     	; 0x33ae <fdevopen+0x8a>
    3392:	f0 93 c4 01 	sts	0x01C4, r31
    3396:	e0 93 c3 01 	sts	0x01C3, r30
    339a:	80 91 c5 01 	lds	r24, 0x01C5
    339e:	90 91 c6 01 	lds	r25, 0x01C6
    33a2:	89 2b       	or	r24, r25
    33a4:	21 f4       	brne	.+8      	; 0x33ae <fdevopen+0x8a>
    33a6:	f0 93 c6 01 	sts	0x01C6, r31
    33aa:	e0 93 c5 01 	sts	0x01C5, r30
    33ae:	cf 01       	movw	r24, r30
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	1f 91       	pop	r17
    33b6:	0f 91       	pop	r16
    33b8:	08 95       	ret

000033ba <printf>:
    33ba:	a2 e0       	ldi	r26, 0x02	; 2
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	e3 ee       	ldi	r30, 0xE3	; 227
    33c0:	f9 e1       	ldi	r31, 0x19	; 25
    33c2:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x20>
    33c6:	fe 01       	movw	r30, r28
    33c8:	37 96       	adiw	r30, 0x07	; 7
    33ca:	61 91       	ld	r22, Z+
    33cc:	71 91       	ld	r23, Z+
    33ce:	fa 83       	std	Y+2, r31	; 0x02
    33d0:	e9 83       	std	Y+1, r30	; 0x01
    33d2:	af 01       	movw	r20, r30
    33d4:	80 91 c3 01 	lds	r24, 0x01C3
    33d8:	90 91 c4 01 	lds	r25, 0x01C4
    33dc:	0e 94 23 1a 	call	0x3446	; 0x3446 <vfprintf>
    33e0:	22 96       	adiw	r28, 0x02	; 2
    33e2:	e2 e0       	ldi	r30, 0x02	; 2
    33e4:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x20>

000033e8 <puts>:
    33e8:	0f 93       	push	r16
    33ea:	1f 93       	push	r17
    33ec:	cf 93       	push	r28
    33ee:	df 93       	push	r29
    33f0:	8c 01       	movw	r16, r24
    33f2:	e0 91 c3 01 	lds	r30, 0x01C3
    33f6:	f0 91 c4 01 	lds	r31, 0x01C4
    33fa:	83 81       	ldd	r24, Z+3	; 0x03
    33fc:	81 ff       	sbrs	r24, 1
    33fe:	1b c0       	rjmp	.+54     	; 0x3436 <puts+0x4e>
    3400:	c0 e0       	ldi	r28, 0x00	; 0
    3402:	d0 e0       	ldi	r29, 0x00	; 0
    3404:	05 c0       	rjmp	.+10     	; 0x3410 <puts+0x28>
    3406:	09 95       	icall
    3408:	89 2b       	or	r24, r25
    340a:	11 f0       	breq	.+4      	; 0x3410 <puts+0x28>
    340c:	cf ef       	ldi	r28, 0xFF	; 255
    340e:	df ef       	ldi	r29, 0xFF	; 255
    3410:	f8 01       	movw	r30, r16
    3412:	81 91       	ld	r24, Z+
    3414:	8f 01       	movw	r16, r30
    3416:	60 91 c3 01 	lds	r22, 0x01C3
    341a:	70 91 c4 01 	lds	r23, 0x01C4
    341e:	db 01       	movw	r26, r22
    3420:	18 96       	adiw	r26, 0x08	; 8
    3422:	ed 91       	ld	r30, X+
    3424:	fc 91       	ld	r31, X
    3426:	19 97       	sbiw	r26, 0x09	; 9
    3428:	81 11       	cpse	r24, r1
    342a:	ed cf       	rjmp	.-38     	; 0x3406 <puts+0x1e>
    342c:	8a e0       	ldi	r24, 0x0A	; 10
    342e:	09 95       	icall
    3430:	89 2b       	or	r24, r25
    3432:	09 f4       	brne	.+2      	; 0x3436 <puts+0x4e>
    3434:	02 c0       	rjmp	.+4      	; 0x343a <puts+0x52>
    3436:	cf ef       	ldi	r28, 0xFF	; 255
    3438:	df ef       	ldi	r29, 0xFF	; 255
    343a:	ce 01       	movw	r24, r28
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	1f 91       	pop	r17
    3442:	0f 91       	pop	r16
    3444:	08 95       	ret

00003446 <vfprintf>:
    3446:	ac e0       	ldi	r26, 0x0C	; 12
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	e9 e2       	ldi	r30, 0x29	; 41
    344c:	fa e1       	ldi	r31, 0x1A	; 26
    344e:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__prologue_saves__>
    3452:	7c 01       	movw	r14, r24
    3454:	6b 01       	movw	r12, r22
    3456:	8a 01       	movw	r16, r20
    3458:	fc 01       	movw	r30, r24
    345a:	17 82       	std	Z+7, r1	; 0x07
    345c:	16 82       	std	Z+6, r1	; 0x06
    345e:	83 81       	ldd	r24, Z+3	; 0x03
    3460:	81 ff       	sbrs	r24, 1
    3462:	c7 c1       	rjmp	.+910    	; 0x37f2 <vfprintf+0x3ac>
    3464:	88 24       	eor	r8, r8
    3466:	83 94       	inc	r8
    3468:	91 2c       	mov	r9, r1
    346a:	8c 0e       	add	r8, r28
    346c:	9d 1e       	adc	r9, r29
    346e:	f7 01       	movw	r30, r14
    3470:	93 81       	ldd	r25, Z+3	; 0x03
    3472:	f6 01       	movw	r30, r12
    3474:	93 fd       	sbrc	r25, 3
    3476:	85 91       	lpm	r24, Z+
    3478:	93 ff       	sbrs	r25, 3
    347a:	81 91       	ld	r24, Z+
    347c:	6f 01       	movw	r12, r30
    347e:	88 23       	and	r24, r24
    3480:	09 f4       	brne	.+2      	; 0x3484 <vfprintf+0x3e>
    3482:	b3 c1       	rjmp	.+870    	; 0x37ea <vfprintf+0x3a4>
    3484:	85 32       	cpi	r24, 0x25	; 37
    3486:	39 f4       	brne	.+14     	; 0x3496 <vfprintf+0x50>
    3488:	93 fd       	sbrc	r25, 3
    348a:	85 91       	lpm	r24, Z+
    348c:	93 ff       	sbrs	r25, 3
    348e:	81 91       	ld	r24, Z+
    3490:	6f 01       	movw	r12, r30
    3492:	85 32       	cpi	r24, 0x25	; 37
    3494:	29 f4       	brne	.+10     	; 0x34a0 <vfprintf+0x5a>
    3496:	b7 01       	movw	r22, r14
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <fputc>
    349e:	e7 cf       	rjmp	.-50     	; 0x346e <vfprintf+0x28>
    34a0:	71 2c       	mov	r7, r1
    34a2:	31 2c       	mov	r3, r1
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	20 32       	cpi	r18, 0x20	; 32
    34a8:	a8 f4       	brcc	.+42     	; 0x34d4 <vfprintf+0x8e>
    34aa:	8b 32       	cpi	r24, 0x2B	; 43
    34ac:	61 f0       	breq	.+24     	; 0x34c6 <vfprintf+0x80>
    34ae:	28 f4       	brcc	.+10     	; 0x34ba <vfprintf+0x74>
    34b0:	80 32       	cpi	r24, 0x20	; 32
    34b2:	51 f0       	breq	.+20     	; 0x34c8 <vfprintf+0x82>
    34b4:	83 32       	cpi	r24, 0x23	; 35
    34b6:	71 f4       	brne	.+28     	; 0x34d4 <vfprintf+0x8e>
    34b8:	0b c0       	rjmp	.+22     	; 0x34d0 <vfprintf+0x8a>
    34ba:	8d 32       	cpi	r24, 0x2D	; 45
    34bc:	39 f0       	breq	.+14     	; 0x34cc <vfprintf+0x86>
    34be:	80 33       	cpi	r24, 0x30	; 48
    34c0:	49 f4       	brne	.+18     	; 0x34d4 <vfprintf+0x8e>
    34c2:	21 60       	ori	r18, 0x01	; 1
    34c4:	28 c0       	rjmp	.+80     	; 0x3516 <vfprintf+0xd0>
    34c6:	22 60       	ori	r18, 0x02	; 2
    34c8:	24 60       	ori	r18, 0x04	; 4
    34ca:	25 c0       	rjmp	.+74     	; 0x3516 <vfprintf+0xd0>
    34cc:	28 60       	ori	r18, 0x08	; 8
    34ce:	23 c0       	rjmp	.+70     	; 0x3516 <vfprintf+0xd0>
    34d0:	20 61       	ori	r18, 0x10	; 16
    34d2:	21 c0       	rjmp	.+66     	; 0x3516 <vfprintf+0xd0>
    34d4:	27 fd       	sbrc	r18, 7
    34d6:	27 c0       	rjmp	.+78     	; 0x3526 <vfprintf+0xe0>
    34d8:	38 2f       	mov	r19, r24
    34da:	30 53       	subi	r19, 0x30	; 48
    34dc:	3a 30       	cpi	r19, 0x0A	; 10
    34de:	78 f4       	brcc	.+30     	; 0x34fe <vfprintf+0xb8>
    34e0:	26 ff       	sbrs	r18, 6
    34e2:	06 c0       	rjmp	.+12     	; 0x34f0 <vfprintf+0xaa>
    34e4:	fa e0       	ldi	r31, 0x0A	; 10
    34e6:	7f 9e       	mul	r7, r31
    34e8:	30 0d       	add	r19, r0
    34ea:	11 24       	eor	r1, r1
    34ec:	73 2e       	mov	r7, r19
    34ee:	13 c0       	rjmp	.+38     	; 0x3516 <vfprintf+0xd0>
    34f0:	8a e0       	ldi	r24, 0x0A	; 10
    34f2:	38 9e       	mul	r3, r24
    34f4:	30 0d       	add	r19, r0
    34f6:	11 24       	eor	r1, r1
    34f8:	33 2e       	mov	r3, r19
    34fa:	20 62       	ori	r18, 0x20	; 32
    34fc:	0c c0       	rjmp	.+24     	; 0x3516 <vfprintf+0xd0>
    34fe:	8e 32       	cpi	r24, 0x2E	; 46
    3500:	21 f4       	brne	.+8      	; 0x350a <vfprintf+0xc4>
    3502:	26 fd       	sbrc	r18, 6
    3504:	72 c1       	rjmp	.+740    	; 0x37ea <vfprintf+0x3a4>
    3506:	20 64       	ori	r18, 0x40	; 64
    3508:	06 c0       	rjmp	.+12     	; 0x3516 <vfprintf+0xd0>
    350a:	8c 36       	cpi	r24, 0x6C	; 108
    350c:	11 f4       	brne	.+4      	; 0x3512 <vfprintf+0xcc>
    350e:	20 68       	ori	r18, 0x80	; 128
    3510:	02 c0       	rjmp	.+4      	; 0x3516 <vfprintf+0xd0>
    3512:	88 36       	cpi	r24, 0x68	; 104
    3514:	41 f4       	brne	.+16     	; 0x3526 <vfprintf+0xe0>
    3516:	f6 01       	movw	r30, r12
    3518:	93 fd       	sbrc	r25, 3
    351a:	85 91       	lpm	r24, Z+
    351c:	93 ff       	sbrs	r25, 3
    351e:	81 91       	ld	r24, Z+
    3520:	6f 01       	movw	r12, r30
    3522:	81 11       	cpse	r24, r1
    3524:	c0 cf       	rjmp	.-128    	; 0x34a6 <vfprintf+0x60>
    3526:	98 2f       	mov	r25, r24
    3528:	95 54       	subi	r25, 0x45	; 69
    352a:	93 30       	cpi	r25, 0x03	; 3
    352c:	18 f0       	brcs	.+6      	; 0x3534 <vfprintf+0xee>
    352e:	90 52       	subi	r25, 0x20	; 32
    3530:	93 30       	cpi	r25, 0x03	; 3
    3532:	28 f4       	brcc	.+10     	; 0x353e <vfprintf+0xf8>
    3534:	0c 5f       	subi	r16, 0xFC	; 252
    3536:	1f 4f       	sbci	r17, 0xFF	; 255
    3538:	ff e3       	ldi	r31, 0x3F	; 63
    353a:	f9 83       	std	Y+1, r31	; 0x01
    353c:	0d c0       	rjmp	.+26     	; 0x3558 <vfprintf+0x112>
    353e:	83 36       	cpi	r24, 0x63	; 99
    3540:	31 f0       	breq	.+12     	; 0x354e <vfprintf+0x108>
    3542:	83 37       	cpi	r24, 0x73	; 115
    3544:	71 f0       	breq	.+28     	; 0x3562 <vfprintf+0x11c>
    3546:	83 35       	cpi	r24, 0x53	; 83
    3548:	09 f0       	breq	.+2      	; 0x354c <vfprintf+0x106>
    354a:	5e c0       	rjmp	.+188    	; 0x3608 <vfprintf+0x1c2>
    354c:	23 c0       	rjmp	.+70     	; 0x3594 <vfprintf+0x14e>
    354e:	f8 01       	movw	r30, r16
    3550:	80 81       	ld	r24, Z
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	0e 5f       	subi	r16, 0xFE	; 254
    3556:	1f 4f       	sbci	r17, 0xFF	; 255
    3558:	66 24       	eor	r6, r6
    355a:	63 94       	inc	r6
    355c:	71 2c       	mov	r7, r1
    355e:	54 01       	movw	r10, r8
    3560:	15 c0       	rjmp	.+42     	; 0x358c <vfprintf+0x146>
    3562:	28 01       	movw	r4, r16
    3564:	f2 e0       	ldi	r31, 0x02	; 2
    3566:	4f 0e       	add	r4, r31
    3568:	51 1c       	adc	r5, r1
    356a:	f8 01       	movw	r30, r16
    356c:	a0 80       	ld	r10, Z
    356e:	b1 80       	ldd	r11, Z+1	; 0x01
    3570:	26 ff       	sbrs	r18, 6
    3572:	03 c0       	rjmp	.+6      	; 0x357a <vfprintf+0x134>
    3574:	67 2d       	mov	r22, r7
    3576:	70 e0       	ldi	r23, 0x00	; 0
    3578:	02 c0       	rjmp	.+4      	; 0x357e <vfprintf+0x138>
    357a:	6f ef       	ldi	r22, 0xFF	; 255
    357c:	7f ef       	ldi	r23, 0xFF	; 255
    357e:	c5 01       	movw	r24, r10
    3580:	2c 87       	std	Y+12, r18	; 0x0c
    3582:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <strnlen>
    3586:	3c 01       	movw	r6, r24
    3588:	82 01       	movw	r16, r4
    358a:	2c 85       	ldd	r18, Y+12	; 0x0c
    358c:	6f e7       	ldi	r22, 0x7F	; 127
    358e:	26 2e       	mov	r2, r22
    3590:	22 22       	and	r2, r18
    3592:	18 c0       	rjmp	.+48     	; 0x35c4 <vfprintf+0x17e>
    3594:	28 01       	movw	r4, r16
    3596:	f2 e0       	ldi	r31, 0x02	; 2
    3598:	4f 0e       	add	r4, r31
    359a:	51 1c       	adc	r5, r1
    359c:	f8 01       	movw	r30, r16
    359e:	a0 80       	ld	r10, Z
    35a0:	b1 80       	ldd	r11, Z+1	; 0x01
    35a2:	26 ff       	sbrs	r18, 6
    35a4:	03 c0       	rjmp	.+6      	; 0x35ac <vfprintf+0x166>
    35a6:	67 2d       	mov	r22, r7
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	02 c0       	rjmp	.+4      	; 0x35b0 <vfprintf+0x16a>
    35ac:	6f ef       	ldi	r22, 0xFF	; 255
    35ae:	7f ef       	ldi	r23, 0xFF	; 255
    35b0:	c5 01       	movw	r24, r10
    35b2:	2c 87       	std	Y+12, r18	; 0x0c
    35b4:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <strnlen_P>
    35b8:	3c 01       	movw	r6, r24
    35ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    35bc:	50 e8       	ldi	r21, 0x80	; 128
    35be:	25 2e       	mov	r2, r21
    35c0:	22 2a       	or	r2, r18
    35c2:	82 01       	movw	r16, r4
    35c4:	23 fc       	sbrc	r2, 3
    35c6:	1c c0       	rjmp	.+56     	; 0x3600 <vfprintf+0x1ba>
    35c8:	06 c0       	rjmp	.+12     	; 0x35d6 <vfprintf+0x190>
    35ca:	b7 01       	movw	r22, r14
    35cc:	80 e2       	ldi	r24, 0x20	; 32
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	0e 94 75 1c 	call	0x38ea	; 0x38ea <fputc>
    35d4:	3a 94       	dec	r3
    35d6:	83 2d       	mov	r24, r3
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	68 16       	cp	r6, r24
    35dc:	79 06       	cpc	r7, r25
    35de:	a8 f3       	brcs	.-22     	; 0x35ca <vfprintf+0x184>
    35e0:	0f c0       	rjmp	.+30     	; 0x3600 <vfprintf+0x1ba>
    35e2:	f5 01       	movw	r30, r10
    35e4:	27 fc       	sbrc	r2, 7
    35e6:	85 91       	lpm	r24, Z+
    35e8:	27 fe       	sbrs	r2, 7
    35ea:	81 91       	ld	r24, Z+
    35ec:	5f 01       	movw	r10, r30
    35ee:	b7 01       	movw	r22, r14
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	0e 94 75 1c 	call	0x38ea	; 0x38ea <fputc>
    35f6:	31 10       	cpse	r3, r1
    35f8:	3a 94       	dec	r3
    35fa:	f1 e0       	ldi	r31, 0x01	; 1
    35fc:	6f 1a       	sub	r6, r31
    35fe:	71 08       	sbc	r7, r1
    3600:	61 14       	cp	r6, r1
    3602:	71 04       	cpc	r7, r1
    3604:	71 f7       	brne	.-36     	; 0x35e2 <vfprintf+0x19c>
    3606:	ee c0       	rjmp	.+476    	; 0x37e4 <vfprintf+0x39e>
    3608:	84 36       	cpi	r24, 0x64	; 100
    360a:	11 f0       	breq	.+4      	; 0x3610 <vfprintf+0x1ca>
    360c:	89 36       	cpi	r24, 0x69	; 105
    360e:	41 f5       	brne	.+80     	; 0x3660 <vfprintf+0x21a>
    3610:	f8 01       	movw	r30, r16
    3612:	27 ff       	sbrs	r18, 7
    3614:	07 c0       	rjmp	.+14     	; 0x3624 <vfprintf+0x1de>
    3616:	60 81       	ld	r22, Z
    3618:	71 81       	ldd	r23, Z+1	; 0x01
    361a:	82 81       	ldd	r24, Z+2	; 0x02
    361c:	93 81       	ldd	r25, Z+3	; 0x03
    361e:	0c 5f       	subi	r16, 0xFC	; 252
    3620:	1f 4f       	sbci	r17, 0xFF	; 255
    3622:	08 c0       	rjmp	.+16     	; 0x3634 <vfprintf+0x1ee>
    3624:	60 81       	ld	r22, Z
    3626:	71 81       	ldd	r23, Z+1	; 0x01
    3628:	88 27       	eor	r24, r24
    362a:	77 fd       	sbrc	r23, 7
    362c:	80 95       	com	r24
    362e:	98 2f       	mov	r25, r24
    3630:	0e 5f       	subi	r16, 0xFE	; 254
    3632:	1f 4f       	sbci	r17, 0xFF	; 255
    3634:	4f e6       	ldi	r20, 0x6F	; 111
    3636:	64 2e       	mov	r6, r20
    3638:	62 22       	and	r6, r18
    363a:	97 ff       	sbrs	r25, 7
    363c:	09 c0       	rjmp	.+18     	; 0x3650 <vfprintf+0x20a>
    363e:	90 95       	com	r25
    3640:	80 95       	com	r24
    3642:	70 95       	com	r23
    3644:	61 95       	neg	r22
    3646:	7f 4f       	sbci	r23, 0xFF	; 255
    3648:	8f 4f       	sbci	r24, 0xFF	; 255
    364a:	9f 4f       	sbci	r25, 0xFF	; 255
    364c:	f0 e8       	ldi	r31, 0x80	; 128
    364e:	6f 2a       	or	r6, r31
    3650:	2a e0       	ldi	r18, 0x0A	; 10
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	a4 01       	movw	r20, r8
    3656:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__ultoa_invert>
    365a:	a8 2e       	mov	r10, r24
    365c:	a8 18       	sub	r10, r8
    365e:	44 c0       	rjmp	.+136    	; 0x36e8 <vfprintf+0x2a2>
    3660:	85 37       	cpi	r24, 0x75	; 117
    3662:	31 f4       	brne	.+12     	; 0x3670 <vfprintf+0x22a>
    3664:	3f ee       	ldi	r19, 0xEF	; 239
    3666:	b3 2e       	mov	r11, r19
    3668:	b2 22       	and	r11, r18
    366a:	2a e0       	ldi	r18, 0x0A	; 10
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	24 c0       	rjmp	.+72     	; 0x36b8 <vfprintf+0x272>
    3670:	99 ef       	ldi	r25, 0xF9	; 249
    3672:	b9 2e       	mov	r11, r25
    3674:	b2 22       	and	r11, r18
    3676:	8f 36       	cpi	r24, 0x6F	; 111
    3678:	b9 f0       	breq	.+46     	; 0x36a8 <vfprintf+0x262>
    367a:	20 f4       	brcc	.+8      	; 0x3684 <vfprintf+0x23e>
    367c:	88 35       	cpi	r24, 0x58	; 88
    367e:	09 f0       	breq	.+2      	; 0x3682 <vfprintf+0x23c>
    3680:	b4 c0       	rjmp	.+360    	; 0x37ea <vfprintf+0x3a4>
    3682:	0d c0       	rjmp	.+26     	; 0x369e <vfprintf+0x258>
    3684:	80 37       	cpi	r24, 0x70	; 112
    3686:	21 f0       	breq	.+8      	; 0x3690 <vfprintf+0x24a>
    3688:	88 37       	cpi	r24, 0x78	; 120
    368a:	09 f0       	breq	.+2      	; 0x368e <vfprintf+0x248>
    368c:	ae c0       	rjmp	.+348    	; 0x37ea <vfprintf+0x3a4>
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <vfprintf+0x24e>
    3690:	20 e1       	ldi	r18, 0x10	; 16
    3692:	b2 2a       	or	r11, r18
    3694:	b4 fe       	sbrs	r11, 4
    3696:	0b c0       	rjmp	.+22     	; 0x36ae <vfprintf+0x268>
    3698:	84 e0       	ldi	r24, 0x04	; 4
    369a:	b8 2a       	or	r11, r24
    369c:	08 c0       	rjmp	.+16     	; 0x36ae <vfprintf+0x268>
    369e:	24 ff       	sbrs	r18, 4
    36a0:	09 c0       	rjmp	.+18     	; 0x36b4 <vfprintf+0x26e>
    36a2:	e6 e0       	ldi	r30, 0x06	; 6
    36a4:	be 2a       	or	r11, r30
    36a6:	06 c0       	rjmp	.+12     	; 0x36b4 <vfprintf+0x26e>
    36a8:	28 e0       	ldi	r18, 0x08	; 8
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	05 c0       	rjmp	.+10     	; 0x36b8 <vfprintf+0x272>
    36ae:	20 e1       	ldi	r18, 0x10	; 16
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	02 c0       	rjmp	.+4      	; 0x36b8 <vfprintf+0x272>
    36b4:	20 e1       	ldi	r18, 0x10	; 16
    36b6:	32 e0       	ldi	r19, 0x02	; 2
    36b8:	f8 01       	movw	r30, r16
    36ba:	b7 fe       	sbrs	r11, 7
    36bc:	07 c0       	rjmp	.+14     	; 0x36cc <vfprintf+0x286>
    36be:	60 81       	ld	r22, Z
    36c0:	71 81       	ldd	r23, Z+1	; 0x01
    36c2:	82 81       	ldd	r24, Z+2	; 0x02
    36c4:	93 81       	ldd	r25, Z+3	; 0x03
    36c6:	0c 5f       	subi	r16, 0xFC	; 252
    36c8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ca:	06 c0       	rjmp	.+12     	; 0x36d8 <vfprintf+0x292>
    36cc:	60 81       	ld	r22, Z
    36ce:	71 81       	ldd	r23, Z+1	; 0x01
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	0e 5f       	subi	r16, 0xFE	; 254
    36d6:	1f 4f       	sbci	r17, 0xFF	; 255
    36d8:	a4 01       	movw	r20, r8
    36da:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__ultoa_invert>
    36de:	a8 2e       	mov	r10, r24
    36e0:	a8 18       	sub	r10, r8
    36e2:	8f e7       	ldi	r24, 0x7F	; 127
    36e4:	68 2e       	mov	r6, r24
    36e6:	6b 20       	and	r6, r11
    36e8:	66 fe       	sbrs	r6, 6
    36ea:	0b c0       	rjmp	.+22     	; 0x3702 <vfprintf+0x2bc>
    36ec:	36 2d       	mov	r19, r6
    36ee:	3e 7f       	andi	r19, 0xFE	; 254
    36f0:	a7 14       	cp	r10, r7
    36f2:	50 f4       	brcc	.+20     	; 0x3708 <vfprintf+0x2c2>
    36f4:	64 fe       	sbrs	r6, 4
    36f6:	0a c0       	rjmp	.+20     	; 0x370c <vfprintf+0x2c6>
    36f8:	62 fc       	sbrc	r6, 2
    36fa:	08 c0       	rjmp	.+16     	; 0x370c <vfprintf+0x2c6>
    36fc:	36 2d       	mov	r19, r6
    36fe:	3e 7e       	andi	r19, 0xEE	; 238
    3700:	05 c0       	rjmp	.+10     	; 0x370c <vfprintf+0x2c6>
    3702:	ba 2c       	mov	r11, r10
    3704:	36 2d       	mov	r19, r6
    3706:	03 c0       	rjmp	.+6      	; 0x370e <vfprintf+0x2c8>
    3708:	ba 2c       	mov	r11, r10
    370a:	01 c0       	rjmp	.+2      	; 0x370e <vfprintf+0x2c8>
    370c:	b7 2c       	mov	r11, r7
    370e:	34 ff       	sbrs	r19, 4
    3710:	0d c0       	rjmp	.+26     	; 0x372c <vfprintf+0x2e6>
    3712:	fe 01       	movw	r30, r28
    3714:	ea 0d       	add	r30, r10
    3716:	f1 1d       	adc	r31, r1
    3718:	80 81       	ld	r24, Z
    371a:	80 33       	cpi	r24, 0x30	; 48
    371c:	11 f4       	brne	.+4      	; 0x3722 <vfprintf+0x2dc>
    371e:	39 7e       	andi	r19, 0xE9	; 233
    3720:	09 c0       	rjmp	.+18     	; 0x3734 <vfprintf+0x2ee>
    3722:	32 ff       	sbrs	r19, 2
    3724:	06 c0       	rjmp	.+12     	; 0x3732 <vfprintf+0x2ec>
    3726:	b3 94       	inc	r11
    3728:	b3 94       	inc	r11
    372a:	04 c0       	rjmp	.+8      	; 0x3734 <vfprintf+0x2ee>
    372c:	83 2f       	mov	r24, r19
    372e:	86 78       	andi	r24, 0x86	; 134
    3730:	09 f0       	breq	.+2      	; 0x3734 <vfprintf+0x2ee>
    3732:	b3 94       	inc	r11
    3734:	33 fd       	sbrc	r19, 3
    3736:	14 c0       	rjmp	.+40     	; 0x3760 <vfprintf+0x31a>
    3738:	30 ff       	sbrs	r19, 0
    373a:	0f c0       	rjmp	.+30     	; 0x375a <vfprintf+0x314>
    373c:	7a 2c       	mov	r7, r10
    373e:	b3 14       	cp	r11, r3
    3740:	60 f4       	brcc	.+24     	; 0x375a <vfprintf+0x314>
    3742:	73 0c       	add	r7, r3
    3744:	7b 18       	sub	r7, r11
    3746:	b3 2c       	mov	r11, r3
    3748:	08 c0       	rjmp	.+16     	; 0x375a <vfprintf+0x314>
    374a:	b7 01       	movw	r22, r14
    374c:	80 e2       	ldi	r24, 0x20	; 32
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	3c 87       	std	Y+12, r19	; 0x0c
    3752:	0e 94 75 1c 	call	0x38ea	; 0x38ea <fputc>
    3756:	b3 94       	inc	r11
    3758:	3c 85       	ldd	r19, Y+12	; 0x0c
    375a:	b3 14       	cp	r11, r3
    375c:	b0 f3       	brcs	.-20     	; 0x374a <vfprintf+0x304>
    375e:	04 c0       	rjmp	.+8      	; 0x3768 <vfprintf+0x322>
    3760:	b3 14       	cp	r11, r3
    3762:	10 f4       	brcc	.+4      	; 0x3768 <vfprintf+0x322>
    3764:	3b 18       	sub	r3, r11
    3766:	01 c0       	rjmp	.+2      	; 0x376a <vfprintf+0x324>
    3768:	31 2c       	mov	r3, r1
    376a:	34 ff       	sbrs	r19, 4
    376c:	12 c0       	rjmp	.+36     	; 0x3792 <vfprintf+0x34c>
    376e:	b7 01       	movw	r22, r14
    3770:	80 e3       	ldi	r24, 0x30	; 48
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	3c 87       	std	Y+12, r19	; 0x0c
    3776:	0e 94 75 1c 	call	0x38ea	; 0x38ea <fputc>
    377a:	3c 85       	ldd	r19, Y+12	; 0x0c
    377c:	32 ff       	sbrs	r19, 2
    377e:	1e c0       	rjmp	.+60     	; 0x37bc <vfprintf+0x376>
    3780:	31 ff       	sbrs	r19, 1
    3782:	03 c0       	rjmp	.+6      	; 0x378a <vfprintf+0x344>
    3784:	88 e5       	ldi	r24, 0x58	; 88
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	02 c0       	rjmp	.+4      	; 0x378e <vfprintf+0x348>
    378a:	88 e7       	ldi	r24, 0x78	; 120
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	b7 01       	movw	r22, r14
    3790:	0c c0       	rjmp	.+24     	; 0x37aa <vfprintf+0x364>
    3792:	83 2f       	mov	r24, r19
    3794:	86 78       	andi	r24, 0x86	; 134
    3796:	91 f0       	breq	.+36     	; 0x37bc <vfprintf+0x376>
    3798:	31 fd       	sbrc	r19, 1
    379a:	02 c0       	rjmp	.+4      	; 0x37a0 <vfprintf+0x35a>
    379c:	80 e2       	ldi	r24, 0x20	; 32
    379e:	01 c0       	rjmp	.+2      	; 0x37a2 <vfprintf+0x35c>
    37a0:	8b e2       	ldi	r24, 0x2B	; 43
    37a2:	37 fd       	sbrc	r19, 7
    37a4:	8d e2       	ldi	r24, 0x2D	; 45
    37a6:	b7 01       	movw	r22, r14
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	0e 94 75 1c 	call	0x38ea	; 0x38ea <fputc>
    37ae:	06 c0       	rjmp	.+12     	; 0x37bc <vfprintf+0x376>
    37b0:	b7 01       	movw	r22, r14
    37b2:	80 e3       	ldi	r24, 0x30	; 48
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	0e 94 75 1c 	call	0x38ea	; 0x38ea <fputc>
    37ba:	7a 94       	dec	r7
    37bc:	a7 14       	cp	r10, r7
    37be:	c0 f3       	brcs	.-16     	; 0x37b0 <vfprintf+0x36a>
    37c0:	aa 94       	dec	r10
    37c2:	f4 01       	movw	r30, r8
    37c4:	ea 0d       	add	r30, r10
    37c6:	f1 1d       	adc	r31, r1
    37c8:	b7 01       	movw	r22, r14
    37ca:	80 81       	ld	r24, Z
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	0e 94 75 1c 	call	0x38ea	; 0x38ea <fputc>
    37d2:	a1 10       	cpse	r10, r1
    37d4:	f5 cf       	rjmp	.-22     	; 0x37c0 <vfprintf+0x37a>
    37d6:	06 c0       	rjmp	.+12     	; 0x37e4 <vfprintf+0x39e>
    37d8:	b7 01       	movw	r22, r14
    37da:	80 e2       	ldi	r24, 0x20	; 32
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	0e 94 75 1c 	call	0x38ea	; 0x38ea <fputc>
    37e2:	3a 94       	dec	r3
    37e4:	31 10       	cpse	r3, r1
    37e6:	f8 cf       	rjmp	.-16     	; 0x37d8 <vfprintf+0x392>
    37e8:	42 ce       	rjmp	.-892    	; 0x346e <vfprintf+0x28>
    37ea:	f7 01       	movw	r30, r14
    37ec:	26 81       	ldd	r18, Z+6	; 0x06
    37ee:	37 81       	ldd	r19, Z+7	; 0x07
    37f0:	02 c0       	rjmp	.+4      	; 0x37f6 <vfprintf+0x3b0>
    37f2:	2f ef       	ldi	r18, 0xFF	; 255
    37f4:	3f ef       	ldi	r19, 0xFF	; 255
    37f6:	c9 01       	movw	r24, r18
    37f8:	2c 96       	adiw	r28, 0x0c	; 12
    37fa:	e2 e1       	ldi	r30, 0x12	; 18
    37fc:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__epilogue_restores__>

00003800 <__eerd_block_m644p>:
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22

00003804 <__eerd_blraw_m644p>:
    3804:	fc 01       	movw	r30, r24
    3806:	f9 99       	sbic	0x1f, 1	; 31
    3808:	fe cf       	rjmp	.-4      	; 0x3806 <__eerd_blraw_m644p+0x2>
    380a:	06 c0       	rjmp	.+12     	; 0x3818 <__eerd_blraw_m644p+0x14>
    380c:	f2 bd       	out	0x22, r31	; 34
    380e:	e1 bd       	out	0x21, r30	; 33
    3810:	f8 9a       	sbi	0x1f, 0	; 31
    3812:	31 96       	adiw	r30, 0x01	; 1
    3814:	00 b4       	in	r0, 0x20	; 32
    3816:	0d 92       	st	X+, r0
    3818:	41 50       	subi	r20, 0x01	; 1
    381a:	50 40       	sbci	r21, 0x00	; 0
    381c:	b8 f7       	brcc	.-18     	; 0x380c <__eerd_blraw_m644p+0x8>
    381e:	08 95       	ret

00003820 <__eerd_byte_m644p>:
    3820:	f9 99       	sbic	0x1f, 1	; 31
    3822:	fe cf       	rjmp	.-4      	; 0x3820 <__eerd_byte_m644p>
    3824:	92 bd       	out	0x22, r25	; 34
    3826:	81 bd       	out	0x21, r24	; 33
    3828:	f8 9a       	sbi	0x1f, 0	; 31
    382a:	99 27       	eor	r25, r25
    382c:	80 b5       	in	r24, 0x20	; 32
    382e:	08 95       	ret

00003830 <__eeupd_block_m644p>:
    3830:	dc 01       	movw	r26, r24
    3832:	a4 0f       	add	r26, r20
    3834:	b5 1f       	adc	r27, r21
    3836:	41 50       	subi	r20, 0x01	; 1
    3838:	50 40       	sbci	r21, 0x00	; 0
    383a:	48 f0       	brcs	.+18     	; 0x384e <__eeupd_block_m644p+0x1e>
    383c:	cb 01       	movw	r24, r22
    383e:	84 0f       	add	r24, r20
    3840:	95 1f       	adc	r25, r21
    3842:	2e 91       	ld	r18, -X
    3844:	0e 94 29 1c 	call	0x3852	; 0x3852 <__eeupd_r18_m644p>
    3848:	41 50       	subi	r20, 0x01	; 1
    384a:	50 40       	sbci	r21, 0x00	; 0
    384c:	d0 f7       	brcc	.-12     	; 0x3842 <__eeupd_block_m644p+0x12>
    384e:	08 95       	ret

00003850 <__eeupd_byte_m644p>:
    3850:	26 2f       	mov	r18, r22

00003852 <__eeupd_r18_m644p>:
    3852:	f9 99       	sbic	0x1f, 1	; 31
    3854:	fe cf       	rjmp	.-4      	; 0x3852 <__eeupd_r18_m644p>
    3856:	92 bd       	out	0x22, r25	; 34
    3858:	81 bd       	out	0x21, r24	; 33
    385a:	f8 9a       	sbi	0x1f, 0	; 31
    385c:	01 97       	sbiw	r24, 0x01	; 1
    385e:	00 b4       	in	r0, 0x20	; 32
    3860:	02 16       	cp	r0, r18
    3862:	39 f0       	breq	.+14     	; 0x3872 <__eeupd_r18_m644p+0x20>
    3864:	1f ba       	out	0x1f, r1	; 31
    3866:	20 bd       	out	0x20, r18	; 32
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	fa 9a       	sbi	0x1f, 2	; 31
    386e:	f9 9a       	sbi	0x1f, 1	; 31
    3870:	0f be       	out	0x3f, r0	; 63
    3872:	08 95       	ret

00003874 <calloc>:
    3874:	0f 93       	push	r16
    3876:	1f 93       	push	r17
    3878:	cf 93       	push	r28
    387a:	df 93       	push	r29
    387c:	68 9f       	mul	r22, r24
    387e:	80 01       	movw	r16, r0
    3880:	69 9f       	mul	r22, r25
    3882:	10 0d       	add	r17, r0
    3884:	78 9f       	mul	r23, r24
    3886:	10 0d       	add	r17, r0
    3888:	11 24       	eor	r1, r1
    388a:	c8 01       	movw	r24, r16
    388c:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <malloc>
    3890:	c8 2f       	mov	r28, r24
    3892:	d9 2f       	mov	r29, r25
    3894:	20 97       	sbiw	r28, 0x00	; 0
    3896:	31 f0       	breq	.+12     	; 0x38a4 <calloc+0x30>
    3898:	a8 01       	movw	r20, r16
    389a:	60 e0       	ldi	r22, 0x00	; 0
    389c:	70 e0       	ldi	r23, 0x00	; 0
    389e:	8c 2f       	mov	r24, r28
    38a0:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <memset>
    38a4:	ce 01       	movw	r24, r28
    38a6:	df 91       	pop	r29
    38a8:	cf 91       	pop	r28
    38aa:	1f 91       	pop	r17
    38ac:	0f 91       	pop	r16
    38ae:	08 95       	ret

000038b0 <strnlen_P>:
    38b0:	fc 01       	movw	r30, r24
    38b2:	05 90       	lpm	r0, Z+
    38b4:	61 50       	subi	r22, 0x01	; 1
    38b6:	70 40       	sbci	r23, 0x00	; 0
    38b8:	01 10       	cpse	r0, r1
    38ba:	d8 f7       	brcc	.-10     	; 0x38b2 <strnlen_P+0x2>
    38bc:	80 95       	com	r24
    38be:	90 95       	com	r25
    38c0:	8e 0f       	add	r24, r30
    38c2:	9f 1f       	adc	r25, r31
    38c4:	08 95       	ret

000038c6 <memset>:
    38c6:	dc 01       	movw	r26, r24
    38c8:	01 c0       	rjmp	.+2      	; 0x38cc <memset+0x6>
    38ca:	6d 93       	st	X+, r22
    38cc:	41 50       	subi	r20, 0x01	; 1
    38ce:	50 40       	sbci	r21, 0x00	; 0
    38d0:	e0 f7       	brcc	.-8      	; 0x38ca <memset+0x4>
    38d2:	08 95       	ret

000038d4 <strnlen>:
    38d4:	fc 01       	movw	r30, r24
    38d6:	61 50       	subi	r22, 0x01	; 1
    38d8:	70 40       	sbci	r23, 0x00	; 0
    38da:	01 90       	ld	r0, Z+
    38dc:	01 10       	cpse	r0, r1
    38de:	d8 f7       	brcc	.-10     	; 0x38d6 <strnlen+0x2>
    38e0:	80 95       	com	r24
    38e2:	90 95       	com	r25
    38e4:	8e 0f       	add	r24, r30
    38e6:	9f 1f       	adc	r25, r31
    38e8:	08 95       	ret

000038ea <fputc>:
    38ea:	0f 93       	push	r16
    38ec:	1f 93       	push	r17
    38ee:	cf 93       	push	r28
    38f0:	df 93       	push	r29
    38f2:	8c 01       	movw	r16, r24
    38f4:	eb 01       	movw	r28, r22
    38f6:	8b 81       	ldd	r24, Y+3	; 0x03
    38f8:	81 fd       	sbrc	r24, 1
    38fa:	03 c0       	rjmp	.+6      	; 0x3902 <fputc+0x18>
    38fc:	0f ef       	ldi	r16, 0xFF	; 255
    38fe:	1f ef       	ldi	r17, 0xFF	; 255
    3900:	1a c0       	rjmp	.+52     	; 0x3936 <fputc+0x4c>
    3902:	82 ff       	sbrs	r24, 2
    3904:	0d c0       	rjmp	.+26     	; 0x3920 <fputc+0x36>
    3906:	2e 81       	ldd	r18, Y+6	; 0x06
    3908:	3f 81       	ldd	r19, Y+7	; 0x07
    390a:	8c 81       	ldd	r24, Y+4	; 0x04
    390c:	9d 81       	ldd	r25, Y+5	; 0x05
    390e:	28 17       	cp	r18, r24
    3910:	39 07       	cpc	r19, r25
    3912:	64 f4       	brge	.+24     	; 0x392c <fputc+0x42>
    3914:	e8 81       	ld	r30, Y
    3916:	f9 81       	ldd	r31, Y+1	; 0x01
    3918:	01 93       	st	Z+, r16
    391a:	f9 83       	std	Y+1, r31	; 0x01
    391c:	e8 83       	st	Y, r30
    391e:	06 c0       	rjmp	.+12     	; 0x392c <fputc+0x42>
    3920:	e8 85       	ldd	r30, Y+8	; 0x08
    3922:	f9 85       	ldd	r31, Y+9	; 0x09
    3924:	80 2f       	mov	r24, r16
    3926:	09 95       	icall
    3928:	89 2b       	or	r24, r25
    392a:	41 f7       	brne	.-48     	; 0x38fc <fputc+0x12>
    392c:	8e 81       	ldd	r24, Y+6	; 0x06
    392e:	9f 81       	ldd	r25, Y+7	; 0x07
    3930:	01 96       	adiw	r24, 0x01	; 1
    3932:	9f 83       	std	Y+7, r25	; 0x07
    3934:	8e 83       	std	Y+6, r24	; 0x06
    3936:	c8 01       	movw	r24, r16
    3938:	df 91       	pop	r29
    393a:	cf 91       	pop	r28
    393c:	1f 91       	pop	r17
    393e:	0f 91       	pop	r16
    3940:	08 95       	ret

00003942 <__ultoa_invert>:
    3942:	fa 01       	movw	r30, r20
    3944:	aa 27       	eor	r26, r26
    3946:	28 30       	cpi	r18, 0x08	; 8
    3948:	51 f1       	breq	.+84     	; 0x399e <__ultoa_invert+0x5c>
    394a:	20 31       	cpi	r18, 0x10	; 16
    394c:	81 f1       	breq	.+96     	; 0x39ae <__ultoa_invert+0x6c>
    394e:	e8 94       	clt
    3950:	6f 93       	push	r22
    3952:	6e 7f       	andi	r22, 0xFE	; 254
    3954:	6e 5f       	subi	r22, 0xFE	; 254
    3956:	7f 4f       	sbci	r23, 0xFF	; 255
    3958:	8f 4f       	sbci	r24, 0xFF	; 255
    395a:	9f 4f       	sbci	r25, 0xFF	; 255
    395c:	af 4f       	sbci	r26, 0xFF	; 255
    395e:	b1 e0       	ldi	r27, 0x01	; 1
    3960:	3e d0       	rcall	.+124    	; 0x39de <__ultoa_invert+0x9c>
    3962:	b4 e0       	ldi	r27, 0x04	; 4
    3964:	3c d0       	rcall	.+120    	; 0x39de <__ultoa_invert+0x9c>
    3966:	67 0f       	add	r22, r23
    3968:	78 1f       	adc	r23, r24
    396a:	89 1f       	adc	r24, r25
    396c:	9a 1f       	adc	r25, r26
    396e:	a1 1d       	adc	r26, r1
    3970:	68 0f       	add	r22, r24
    3972:	79 1f       	adc	r23, r25
    3974:	8a 1f       	adc	r24, r26
    3976:	91 1d       	adc	r25, r1
    3978:	a1 1d       	adc	r26, r1
    397a:	6a 0f       	add	r22, r26
    397c:	71 1d       	adc	r23, r1
    397e:	81 1d       	adc	r24, r1
    3980:	91 1d       	adc	r25, r1
    3982:	a1 1d       	adc	r26, r1
    3984:	20 d0       	rcall	.+64     	; 0x39c6 <__ultoa_invert+0x84>
    3986:	09 f4       	brne	.+2      	; 0x398a <__ultoa_invert+0x48>
    3988:	68 94       	set
    398a:	3f 91       	pop	r19
    398c:	2a e0       	ldi	r18, 0x0A	; 10
    398e:	26 9f       	mul	r18, r22
    3990:	11 24       	eor	r1, r1
    3992:	30 19       	sub	r19, r0
    3994:	30 5d       	subi	r19, 0xD0	; 208
    3996:	31 93       	st	Z+, r19
    3998:	de f6       	brtc	.-74     	; 0x3950 <__ultoa_invert+0xe>
    399a:	cf 01       	movw	r24, r30
    399c:	08 95       	ret
    399e:	46 2f       	mov	r20, r22
    39a0:	47 70       	andi	r20, 0x07	; 7
    39a2:	40 5d       	subi	r20, 0xD0	; 208
    39a4:	41 93       	st	Z+, r20
    39a6:	b3 e0       	ldi	r27, 0x03	; 3
    39a8:	0f d0       	rcall	.+30     	; 0x39c8 <__ultoa_invert+0x86>
    39aa:	c9 f7       	brne	.-14     	; 0x399e <__ultoa_invert+0x5c>
    39ac:	f6 cf       	rjmp	.-20     	; 0x399a <__ultoa_invert+0x58>
    39ae:	46 2f       	mov	r20, r22
    39b0:	4f 70       	andi	r20, 0x0F	; 15
    39b2:	40 5d       	subi	r20, 0xD0	; 208
    39b4:	4a 33       	cpi	r20, 0x3A	; 58
    39b6:	18 f0       	brcs	.+6      	; 0x39be <__ultoa_invert+0x7c>
    39b8:	49 5d       	subi	r20, 0xD9	; 217
    39ba:	31 fd       	sbrc	r19, 1
    39bc:	40 52       	subi	r20, 0x20	; 32
    39be:	41 93       	st	Z+, r20
    39c0:	02 d0       	rcall	.+4      	; 0x39c6 <__ultoa_invert+0x84>
    39c2:	a9 f7       	brne	.-22     	; 0x39ae <__ultoa_invert+0x6c>
    39c4:	ea cf       	rjmp	.-44     	; 0x399a <__ultoa_invert+0x58>
    39c6:	b4 e0       	ldi	r27, 0x04	; 4
    39c8:	a6 95       	lsr	r26
    39ca:	97 95       	ror	r25
    39cc:	87 95       	ror	r24
    39ce:	77 95       	ror	r23
    39d0:	67 95       	ror	r22
    39d2:	ba 95       	dec	r27
    39d4:	c9 f7       	brne	.-14     	; 0x39c8 <__ultoa_invert+0x86>
    39d6:	00 97       	sbiw	r24, 0x00	; 0
    39d8:	61 05       	cpc	r22, r1
    39da:	71 05       	cpc	r23, r1
    39dc:	08 95       	ret
    39de:	9b 01       	movw	r18, r22
    39e0:	ac 01       	movw	r20, r24
    39e2:	0a 2e       	mov	r0, r26
    39e4:	06 94       	lsr	r0
    39e6:	57 95       	ror	r21
    39e8:	47 95       	ror	r20
    39ea:	37 95       	ror	r19
    39ec:	27 95       	ror	r18
    39ee:	ba 95       	dec	r27
    39f0:	c9 f7       	brne	.-14     	; 0x39e4 <__ultoa_invert+0xa2>
    39f2:	62 0f       	add	r22, r18
    39f4:	73 1f       	adc	r23, r19
    39f6:	84 1f       	adc	r24, r20
    39f8:	95 1f       	adc	r25, r21
    39fa:	a0 1d       	adc	r26, r0
    39fc:	08 95       	ret

000039fe <_exit>:
    39fe:	f8 94       	cli

00003a00 <__stop_program>:
    3a00:	ff cf       	rjmp	.-2      	; 0x3a00 <__stop_program>
